<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\Objects\aws_demos.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\Objects\aws_demos.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat May 18 00:46:47 2019
<BR><P>
<H3>Maximum Stack Usage =       3416 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rsa_alt_check_pair &rArr; rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c7]">DebugMon_Handler</a><BR>
 <LI><a href="#[712]">mbedtls_gcm_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59e]">mbedtls_cipher_update</a><BR>
 <LI><a href="#[563]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e9]">lwip_send</a><BR>
 <LI><a href="#[6c5]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c5]">netconn_drain</a><BR>
 <LI><a href="#[3d9]">wpa_supplicant_get_scan_results</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9f3]">wpa_driver_inband_handle_wow</a><BR>
 <LI><a href="#[238]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">qsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c4]">BusFault_Handler</a> from exception_handler.o(.emb_text) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[9]">C_CloseSession</a> from aws_pkcs11_mbedtls.o(i.C_CloseSession) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[a]">C_CreateObject</a> from aws_pkcs11_mbedtls.o(i.C_CreateObject) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[b]">C_DestroyObject</a> from aws_pkcs11_mbedtls.o(i.C_DestroyObject) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[12]">C_DigestFinal</a> from aws_pkcs11_mbedtls.o(i.C_DigestFinal) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[10]">C_DigestInit</a> from aws_pkcs11_mbedtls.o(i.C_DigestInit) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[11]">C_DigestUpdate</a> from aws_pkcs11_mbedtls.o(i.C_DigestUpdate) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[5]">C_Finalize</a> from aws_pkcs11_mbedtls.o(i.C_Finalize) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[e]">C_FindObjects</a> from aws_pkcs11_mbedtls.o(i.C_FindObjects) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[f]">C_FindObjectsFinal</a> from aws_pkcs11_mbedtls.o(i.C_FindObjectsFinal) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[d]">C_FindObjectsInit</a> from aws_pkcs11_mbedtls.o(i.C_FindObjectsInit) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[17]">C_GenerateKeyPair</a> from aws_pkcs11_mbedtls.o(i.C_GenerateKeyPair) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[18]">C_GenerateRandom</a> from aws_pkcs11_mbedtls.o(i.C_GenerateRandom) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[c]">C_GetAttributeValue</a> from aws_pkcs11_mbedtls.o(i.C_GetAttributeValue) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[6]">C_GetFunctionList</a> from aws_pkcs11_mbedtls.o(i.C_GetFunctionList) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[6]">C_GetFunctionList</a> from aws_pkcs11_mbedtls.o(i.C_GetFunctionList) referenced from aws_tls.o(i.TLS_Init)
 <LI><a href="#[6]">C_GetFunctionList</a> from aws_pkcs11_mbedtls.o(i.C_GetFunctionList) referenced from aws_dev_mode_key_provisioning.o(i.xInitializePkcsSession)
 <LI><a href="#[7]">C_GetSlotList</a> from aws_pkcs11_mbedtls.o(i.C_GetSlotList) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[4]">C_Initialize</a> from aws_pkcs11_mbedtls.o(i.C_Initialize) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[8]">C_OpenSession</a> from aws_pkcs11_mbedtls.o(i.C_OpenSession) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[14]">C_Sign</a> from aws_pkcs11_mbedtls.o(i.C_Sign) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[13]">C_SignInit</a> from aws_pkcs11_mbedtls.o(i.C_SignInit) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[16]">C_Verify</a> from aws_pkcs11_mbedtls.o(i.C_Verify) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[15]">C_VerifyInit</a> from aws_pkcs11_mbedtls.o(i.C_VerifyInit) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[28]">CachePreInit</a> from system_mt7687.o(i.CachePreInit) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[24]">DMA_ERROR_LISR</a> from dma.o(i.DMA_ERROR_LISR) referenced 6 times from dma.o(.data)
 <LI><a href="#[24]">DMA_ERROR_LISR</a> from dma.o(i.DMA_ERROR_LISR) referenced from dma.o(i.DMA_UnRegister)
 <LI><a href="#[35]">DMA_LISR</a> from dma.o(i.DMA_LISR) referenced from dma.o(i.DMA_Init)
 <LI><a href="#[1c7]">DebugMon_Handler</a> from startup_mt7687.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1bc]">Flash_ReturnReady</a> from flash_sfc.o(.ramTEXT) referenced 3 times from startup_mt7687.o(.ramTEXT)
 <LI><a href="#[36]">GPT_INT_Handler</a> from gpt.o(i.GPT_INT_Handler) referenced from gpt.o(i.GPT_init)
 <LI><a href="#[1c2]">HardFault_Handler</a> from exception_handler.o(.emb_text) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[39]">IotMqtt_ReceiveCallback</a> from iot_mqtt_network.o(i.IotMqtt_ReceiveCallback) referenced from iot_mqtt_api.o(i.IotMqtt_Connect)
 <LI><a href="#[183]">IotNetworkAfr_Close</a> from iot_network_afr.o(i.IotNetworkAfr_Close) referenced from iot_network_afr.o(.constdata)
 <LI><a href="#[17f]">IotNetworkAfr_Create</a> from iot_network_afr.o(i.IotNetworkAfr_Create) referenced from iot_network_afr.o(.constdata)
 <LI><a href="#[184]">IotNetworkAfr_Destroy</a> from iot_network_afr.o(i.IotNetworkAfr_Destroy) referenced from iot_network_afr.o(.constdata)
 <LI><a href="#[182]">IotNetworkAfr_Receive</a> from iot_network_afr.o(i.IotNetworkAfr_Receive) referenced from iot_network_afr.o(.constdata)
 <LI><a href="#[181]">IotNetworkAfr_Send</a> from iot_network_afr.o(i.IotNetworkAfr_Send) referenced from iot_network_afr.o(.constdata)
 <LI><a href="#[180]">IotNetworkAfr_SetReceiveCallback</a> from iot_network_afr.o(i.IotNetworkAfr_SetReceiveCallback) referenced from iot_network_afr.o(.constdata)
 <LI><a href="#[1c3]">MemManage_Handler</a> from exception_handler.o(.emb_text) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1c1]">NMI_Handler</a> from exception_handler.o(i.NMI_Handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1be]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_mt7687.o(.ramTEXT)
 <LI><a href="#[1c8]">PendSV_Main</a> from startup_mt7687.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1cb]">Reset_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[3]">RunMqttDemo</a> from iot_demo_mqtt.o(i.RunMqttDemo) referenced 2 times from iot_demo_runner.o(.data)
 <LI><a href="#[1bd]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_mt7687.o(.ramTEXT)
 <LI><a href="#[1c6]">SvcCall_Main</a> from startup_mt7687.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1bf]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_mt7687.o(.ramTEXT)
 <LI><a href="#[1c9]">SysTick_Main</a> from startup_mt7687.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[29]">SystemInit</a> from system_mt7687.o(i.SystemInit) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[1c5]">UsageFault_Handler</a> from exception_handler.o(.emb_text) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[89]">WDT_LISR</a> from low_hal_wdt.o(i.WDT_LISR) referenced from low_hal_wdt.o(i.halWDTConfig)
 <LI><a href="#[55]">_IotMqtt_DeserializeConnack</a> from iot_mqtt_serialize.o(i._IotMqtt_DeserializeConnack) referenced from iot_mqtt_network.o(i._deserializeIncomingPacket)
 <LI><a href="#[5a]">_IotMqtt_DeserializePingresp</a> from iot_mqtt_serialize.o(i._IotMqtt_DeserializePingresp) referenced from iot_mqtt_network.o(i._deserializeIncomingPacket)
 <LI><a href="#[57]">_IotMqtt_DeserializePuback</a> from iot_mqtt_serialize.o(i._IotMqtt_DeserializePuback) referenced from iot_mqtt_network.o(i._deserializeIncomingPacket)
 <LI><a href="#[56]">_IotMqtt_DeserializePublish</a> from iot_mqtt_serialize.o(i._IotMqtt_DeserializePublish) referenced from iot_mqtt_network.o(i._deserializeIncomingPacket)
 <LI><a href="#[58]">_IotMqtt_DeserializeSuback</a> from iot_mqtt_serialize.o(i._IotMqtt_DeserializeSuback) referenced from iot_mqtt_network.o(i._deserializeIncomingPacket)
 <LI><a href="#[59]">_IotMqtt_DeserializeUnsuback</a> from iot_mqtt_serialize.o(i._IotMqtt_DeserializeUnsuback) referenced from iot_mqtt_network.o(i._deserializeIncomingPacket)
 <LI><a href="#[49]">_IotMqtt_FreePacket</a> from iot_mqtt_serialize.o(i._IotMqtt_FreePacket) referenced from iot_mqtt_operation.o(i._IotMqtt_DestroyOperation)
 <LI><a href="#[49]">_IotMqtt_FreePacket</a> from iot_mqtt_serialize.o(i._IotMqtt_FreePacket) referenced from iot_mqtt_network.o(i._sendPuback)
 <LI><a href="#[5d]">_IotMqtt_GetPacketType</a> from iot_mqtt_serialize.o(i._IotMqtt_GetPacketType) referenced from iot_mqtt_network.o(i._getIncomingPacket)
 <LI><a href="#[5e]">_IotMqtt_GetRemainingLength</a> from iot_mqtt_serialize.o(i._IotMqtt_GetRemainingLength) referenced from iot_mqtt_network.o(i._getIncomingPacket)
 <LI><a href="#[4b]">_IotMqtt_ProcessCompletedOperation</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessCompletedOperation) referenced from iot_mqtt_operation.o(i._IotMqtt_Notify)
 <LI><a href="#[4b]">_IotMqtt_ProcessCompletedOperation</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessCompletedOperation) referenced from iot_mqtt_operation.o(i._IotMqtt_ScheduleOperation)
 <LI><a href="#[4d]">_IotMqtt_ProcessIncomingPublish</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessIncomingPublish) referenced from iot_mqtt_operation.o(i._IotMqtt_ScheduleOperation)
 <LI><a href="#[4d]">_IotMqtt_ProcessIncomingPublish</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessIncomingPublish) referenced from iot_mqtt_network.o(i._deserializeIncomingPacket)
 <LI><a href="#[53]">_IotMqtt_ProcessKeepAlive</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessKeepAlive) referenced from iot_mqtt_operation.o(i._IotMqtt_ProcessKeepAlive)
 <LI><a href="#[53]">_IotMqtt_ProcessKeepAlive</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessKeepAlive) referenced from iot_mqtt_api.o(i._createKeepAliveJob)
 <LI><a href="#[3a]">_IotMqtt_ProcessSend</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessSend) referenced from iot_mqtt_api.o(i.IotMqtt_Connect)
 <LI><a href="#[3a]">_IotMqtt_ProcessSend</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessSend) referenced from iot_mqtt_api.o(i.IotMqtt_Disconnect)
 <LI><a href="#[3a]">_IotMqtt_ProcessSend</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessSend) referenced from iot_mqtt_api.o(i.IotMqtt_Publish)
 <LI><a href="#[3a]">_IotMqtt_ProcessSend</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessSend) referenced from iot_mqtt_operation.o(i._IotMqtt_ScheduleOperation)
 <LI><a href="#[3a]">_IotMqtt_ProcessSend</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessSend) referenced from iot_mqtt_operation.o(i._scheduleNextRetry)
 <LI><a href="#[3a]">_IotMqtt_ProcessSend</a> from iot_mqtt_operation.o(i._IotMqtt_ProcessSend) referenced from iot_mqtt_api.o(i._subscriptionCommon)
 <LI><a href="#[51]">_IotMqtt_PublishSetDup</a> from iot_mqtt_serialize.o(i._IotMqtt_PublishSetDup) referenced from iot_mqtt_operation.o(i._checkRetryLimit)
 <LI><a href="#[38]">_IotMqtt_SerializeConnect</a> from iot_mqtt_serialize.o(i._IotMqtt_SerializeConnect) referenced from iot_mqtt_api.o(i.IotMqtt_Connect)
 <LI><a href="#[3b]">_IotMqtt_SerializeDisconnect</a> from iot_mqtt_serialize.o(i._IotMqtt_SerializeDisconnect) referenced from iot_mqtt_api.o(i.IotMqtt_Disconnect)
 <LI><a href="#[52]">_IotMqtt_SerializePingreq</a> from iot_mqtt_serialize.o(i._IotMqtt_SerializePingreq) referenced from iot_mqtt_api.o(i._createKeepAliveJob)
 <LI><a href="#[65]">_IotMqtt_SerializePuback</a> from iot_mqtt_serialize.o(i._IotMqtt_SerializePuback) referenced from iot_mqtt_network.o(i._sendPuback)
 <LI><a href="#[3e]">_IotMqtt_SerializePublish</a> from iot_mqtt_serialize.o(i._IotMqtt_SerializePublish) referenced from iot_mqtt_api.o(i.IotMqtt_Publish)
 <LI><a href="#[66]">_IotMqtt_SerializeSubscribe</a> from iot_mqtt_serialize.o(i._IotMqtt_SerializeSubscribe) referenced from iot_mqtt_api.o(i._subscriptionCommon)
 <LI><a href="#[67]">_IotMqtt_SerializeUnsubscribe</a> from iot_mqtt_serialize.o(i._IotMqtt_SerializeUnsubscribe) referenced from iot_mqtt_api.o(i._subscriptionCommon)
 <LI><a href="#[2a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[63]">_dispatchNetworkStateChangeCB</a> from aws_iot_network_manager.o(i._dispatchNetworkStateChangeCB) referenced from aws_iot_network_manager.o(i._onNetworkStateChangeCallback)
 <LI><a href="#[a6]">_ieee802_1x_abort_auth</a> from ieee802_1x.o(i._ieee802_1x_abort_auth) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[a1]">_ieee802_1x_finished</a> from ieee802_1x.o(i._ieee802_1x_finished) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[a7]">_ieee802_1x_tx_key</a> from ieee802_1x.o(i._ieee802_1x_tx_key) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[af]">_inband_queue_n9log_dump</a> from inband_queue.o(i._inband_queue_n9log_dump) referenced from inband_queue.o(i.inband_queue_init)
 <LI><a href="#[62]">_ip_ready_callback</a> from aws_wifi.o(i._ip_ready_callback) referenced from aws_wifi.o(i._mtk_sta_ip_up)
 <LI><a href="#[68]">_matchJobByPointer</a> from iot_taskpool.o(i._matchJobByPointer) referenced from iot_taskpool.o(i._tryCancelInternal)
 <LI><a href="#[4a]">_mqttOperation_match</a> from iot_mqtt_operation.o(i._mqttOperation_match) referenced from iot_mqtt_operation.o(i._IotMqtt_FindOperation)
 <LI><a href="#[3c]">_mqttOperation_tryDestroy</a> from iot_mqtt_api.o(i._mqttOperation_tryDestroy) referenced from iot_mqtt_api.o(i.IotMqtt_Disconnect)
 <LI><a href="#[61]">_mqttSubscriptionCallback</a> from iot_demo_mqtt.o(i._mqttSubscriptionCallback) referenced from iot_demo_mqtt.o(i._modifySubscriptions)
 <LI><a href="#[5b]">_mqttSubscription_setUnsubscribe</a> from iot_mqtt_api.o(i._mqttSubscription_setUnsubscribe) referenced from iot_mqtt_api.o(i._destroyMqttConnection)
 <LI><a href="#[5c]">_mqttSubscription_tryDestroy</a> from iot_mqtt_api.o(i._mqttSubscription_tryDestroy) referenced from iot_mqtt_api.o(i._destroyMqttConnection)
 <LI><a href="#[3f]">_networkReceiveTask</a> from iot_network_afr.o(i._networkReceiveTask) referenced from iot_network_afr.o(i.IotNetworkAfr_SetReceiveCallback)
 <LI><a href="#[30]">_onNetworkStateChangeCallback</a> from aws_iot_network_manager.o(i._onNetworkStateChangeCallback) referenced from aws_iot_network_manager.o(i.AwsIotNetworkManager_Init)
 <LI><a href="#[60]">_onNetworkStateChangeCallback</a> from iot_demo_afr.o(i._onNetworkStateChangeCallback) referenced from iot_demo_afr.o(i._initialize)
 <LI><a href="#[64]">_operationCompleteCallback</a> from iot_demo_mqtt.o(i._operationCompleteCallback) referenced from iot_demo_mqtt.o(i._publishAllMessages)
 <LI><a href="#[4c]">_packetMatch</a> from iot_mqtt_subscription.o(i._packetMatch) referenced from iot_mqtt_subscription.o(i._IotMqtt_RemoveSubscriptionByPacket)
 <LI><a href="#[2d]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[2e]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[2c]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[4f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[50]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[54]">_taskPoolWorker</a> from iot_taskpool.o(i._taskPoolWorker) referenced from iot_taskpool.o(i._createTaskPool)
 <LI><a href="#[54]">_taskPoolWorker</a> from iot_taskpool.o(i._taskPoolWorker) referenced from iot_taskpool.o(i._scheduleInternal)
 <LI><a href="#[41]">_threadRoutineWrapper</a> from iot_threads_afr.o(i._threadRoutineWrapper) referenced from iot_threads_afr.o(i.Iot_CreateDetachedThread)
 <LI><a href="#[40]">_timerEventCompare</a> from iot_taskpool.o(i._timerEventCompare) referenced from iot_taskpool.o(i.IotTaskPool_ScheduleDeferred)
 <LI><a href="#[5f]">_timerThread</a> from iot_taskpool.o(i._timerThread) referenced from iot_taskpool.o(i._initTaskPoolControlStructures)
 <LI><a href="#[3d]">_topicMatch</a> from iot_mqtt_subscription.o(i._topicMatch) referenced from iot_mqtt_subscription.o(i.IotMqtt_IsSubscribed)
 <LI><a href="#[3d]">_topicMatch</a> from iot_mqtt_subscription.o(i._topicMatch) referenced from iot_mqtt_subscription.o(i._IotMqtt_AddSubscriptions)
 <LI><a href="#[3d]">_topicMatch</a> from iot_mqtt_subscription.o(i._topicMatch) referenced from iot_mqtt_subscription.o(i._IotMqtt_InvokeSubscriptionCallback)
 <LI><a href="#[3d]">_topicMatch</a> from iot_mqtt_subscription.o(i._topicMatch) referenced from iot_mqtt_subscription.o(i._IotMqtt_RemoveSubscriptionByTopicFilter)
 <LI><a href="#[c9]">_uart_event</a> from io_def.o(i._uart_event) referenced from io_def.o(i.io_def_uart_init)
 <LI><a href="#[13b]">_wifi_evt_disconnect_cbk</a> from aws_wifi.o(i._wifi_evt_disconnect_cbk) referenced from aws_wifi.o(.constdata)
 <LI><a href="#[139]">_wifi_evt_init_done_cbk</a> from aws_wifi.o(i._wifi_evt_init_done_cbk) referenced from aws_wifi.o(.constdata)
 <LI><a href="#[13a]">_wifi_evt_port_secure_cbk</a> from aws_wifi.o(i._wifi_evt_port_secure_cbk) referenced 2 times from aws_wifi.o(.constdata)
 <LI><a href="#[13c]">_wifi_evt_portfail_cbk</a> from aws_wifi.o(i._wifi_evt_portfail_cbk) referenced from aws_wifi.o(.constdata)
 <LI><a href="#[12d]">_wpa_alloc_eapol</a> from wpas_glue.o(i._wpa_alloc_eapol) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[12b]">_wpa_ether_send</a> from wpas_glue.o(i._wpa_ether_send) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[12e]">_wpa_supplicant_cancel_auth_timeout</a> from wpas_glue.o(i._wpa_supplicant_cancel_auth_timeout) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[126]">_wpa_supplicant_deauthenticate</a> from wpas_glue.o(i._wpa_supplicant_deauthenticate) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[127]">_wpa_supplicant_disassociate</a> from wpas_glue.o(i._wpa_supplicant_disassociate) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[125]">_wpa_supplicant_get_state</a> from wpas_glue.o(i._wpa_supplicant_get_state) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[124]">_wpa_supplicant_set_state</a> from wpas_glue.o(i._wpa_supplicant_set_state) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[d5]">add_one_and_zeros_padding</a> from cipher.o(i.add_one_and_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[d3]">add_pkcs_padding</a> from cipher.o(i.add_pkcs_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[d7]">add_zeros_and_len_padding</a> from cipher.o(i.add_zeros_and_len_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[d9]">add_zeros_padding</a> from cipher.o(i.add_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[13e]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(i.aes_crypt_cbc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[13f]">aes_crypt_cfb128_wrap</a> from cipher_wrap.o(i.aes_crypt_cfb128_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[140]">aes_crypt_ctr_wrap</a> from cipher_wrap.o(i.aes_crypt_ctr_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[13d]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(i.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[143]">aes_ctx_alloc</a> from cipher_wrap.o(i.aes_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[144]">aes_ctx_free</a> from cipher_wrap.o(i.aes_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[142]">aes_setkey_dec_wrap</a> from cipher_wrap.o(i.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[141]">aes_setkey_enc_wrap</a> from cipher_wrap.o(i.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[6a]">ap_handle_session_timer</a> from sta_info.o(i.ap_handle_session_timer) referenced from sta_info.o(i.ap_free_sta)
 <LI><a href="#[69]">ap_handle_timer</a> from sta_info.o(i.ap_handle_timer) referenced from sta_info.o(i.ap_free_sta)
 <LI><a href="#[69]">ap_handle_timer</a> from sta_info.o(i.ap_handle_timer) referenced 3 times from sta_info.o(i.ap_handle_timer)
 <LI><a href="#[69]">ap_handle_timer</a> from sta_info.o(i.ap_handle_timer) referenced from sta_info.o(i.ap_sta_add)
 <LI><a href="#[69]">ap_handle_timer</a> from sta_info.o(i.ap_handle_timer) referenced from sta_info.o(i.ap_sta_disassociate)
 <LI><a href="#[69]">ap_handle_timer</a> from sta_info.o(i.ap_handle_timer) referenced from sta_info.o(i.ap_sta_disconnect)
 <LI><a href="#[119]">ap_probe_req_rx</a> from ap.o(i.ap_probe_req_rx) referenced from ap.o(i.wpa_supplicant_create_ap)
 <LI><a href="#[117]">ap_public_action_rx</a> from ap.o(i.ap_public_action_rx) referenced from ap.o(i.wpa_supplicant_create_ap)
 <LI><a href="#[11c]">ap_sta_authorized_cb</a> from ap.o(i.ap_sta_authorized_cb) referenced from ap.o(i.wpa_supplicant_create_ap)
 <LI><a href="#[6b]">ap_sta_deauth_cb_timeout</a> from sta_info.o(i.ap_sta_deauth_cb_timeout) referenced from sta_info.o(i.ap_free_sta)
 <LI><a href="#[6c]">ap_sta_disassoc_cb_timeout</a> from sta_info.o(i.ap_sta_disassoc_cb_timeout) referenced from sta_info.o(i.ap_free_sta)
 <LI><a href="#[6c]">ap_sta_disassoc_cb_timeout</a> from sta_info.o(i.ap_sta_disassoc_cb_timeout) referenced from sta_info.o(i.ap_sta_disassociate)
 <LI><a href="#[118]">ap_vendor_action_rx</a> from ap.o(i.ap_vendor_action_rx) referenced from ap.o(i.wpa_supplicant_create_ap)
 <LI><a href="#[11b]">ap_wps_event_cb</a> from ap.o(i.ap_wps_event_cb) referenced from ap.o(i.wpa_supplicant_create_ap)
 <LI><a href="#[11a]">ap_wps_reg_success_cb</a> from ap.o(i.ap_wps_reg_success_cb) referenced from ap.o(i.wpa_supplicant_create_ap)
 <LI><a href="#[f7]">aws_mbedtls_mutex_free</a> from aws_pkcs11_mbedtls.o(i.aws_mbedtls_mutex_free) referenced from aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
 <LI><a href="#[f8]">aws_mbedtls_mutex_init</a> from aws_pkcs11_mbedtls.o(i.aws_mbedtls_mutex_init) referenced from aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
 <LI><a href="#[f6]">aws_mbedtls_mutex_lock</a> from aws_pkcs11_mbedtls.o(i.aws_mbedtls_mutex_lock) referenced from aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
 <LI><a href="#[f5]">aws_mbedtls_mutex_unlock</a> from aws_pkcs11_mbedtls.o(i.aws_mbedtls_mutex_unlock) referenced from aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
 <LI><a href="#[19]">calloc</a> from wrap_heap.o(i.$Sub$$calloc) referenced 2 times from platform.o(.data)
 <LI><a href="#[23]">connsys_deliver_inband</a> from inband_queue.o(i.connsys_deliver_inband) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[71]">connsys_dma_callback</a> from connsys_driver.o(i.connsys_dma_callback) referenced from connsys_driver.o(i.connsys_open)
 <LI><a href="#[72]">connsys_driver_interrupt</a> from connsys_driver.o(i.connsys_driver_interrupt) referenced from connsys_driver.o(i.connsys_open)
 <LI><a href="#[70]">connsys_get_ownership</a> from connsys_driver.o(i.connsys_get_ownership) referenced from connsys_driver.o(i.connsys_open)
 <LI><a href="#[73]">connsys_irq_handler</a> from connsys_driver.o(i.connsys_irq_handler) referenced from connsys_driver.o(i.connsys_open)
 <LI><a href="#[6d]">connsys_util_intr_enhance_mode_receive_data</a> from connsys_util.o(i.connsys_util_intr_enhance_mode_receive_data) referenced from connsys_driver.o(i.connsys_driver_interrupt)
 <LI><a href="#[74]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.cyclic_timer)
 <LI><a href="#[74]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[17c]">dhcp_coarse_tmr</a> from dhcp.o(i.dhcp_coarse_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[17d]">dhcp_fine_tmr</a> from dhcp.o(i.dhcp_fine_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[75]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_inc_pcb_refcount)
 <LI><a href="#[76]">dhcpd_wifi_api_rx_event_handler</a> from dhcpd.o(i.dhcpd_wifi_api_rx_event_handler) referenced from dhcpd.o(i.dhcpd_stop)
 <LI><a href="#[106]">dma_interrupt_hander</a> from hal_pdma_internal.o(i.dma_interrupt_hander) referenced from hal_pdma_internal.o(i.vdma_init)
 <LI><a href="#[77]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_alloc_random_port)
 <LI><a href="#[17e]">dns_tmr</a> from dns.o(i.dns_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[ab]">driver_msg_recv</a> from driver_inband.o(i.driver_msg_recv) referenced from driver_inband.o(i.inband_driver_init)
 <LI><a href="#[7c]">eap_identity_buildReq</a> from eap_server_identity.o(i.eap_identity_buildReq) referenced from eap_server_identity.o(i.eap_server_identity_register)
 <LI><a href="#[7d]">eap_identity_check</a> from eap_server_identity.o(i.eap_identity_check) referenced from eap_server_identity.o(i.eap_server_identity_register)
 <LI><a href="#[79]">eap_identity_init</a> from eap_server_identity.o(i.eap_identity_init) referenced from eap_server_identity.o(i.eap_server_identity_register)
 <LI><a href="#[7a]">eap_identity_initPickUp</a> from eap_server_identity.o(i.eap_identity_initPickUp) referenced from eap_server_identity.o(i.eap_server_identity_register)
 <LI><a href="#[7f]">eap_identity_isDone</a> from eap_server_identity.o(i.eap_identity_isDone) referenced from eap_server_identity.o(i.eap_server_identity_register)
 <LI><a href="#[80]">eap_identity_isSuccess</a> from eap_server_identity.o(i.eap_identity_isSuccess) referenced from eap_server_identity.o(i.eap_server_identity_register)
 <LI><a href="#[7e]">eap_identity_process</a> from eap_server_identity.o(i.eap_identity_process) referenced from eap_server_identity.o(i.eap_server_identity_register)
 <LI><a href="#[7b]">eap_identity_reset</a> from eap_server_identity.o(i.eap_identity_reset) referenced from eap_server_identity.o(i.eap_server_identity_register)
 <LI><a href="#[81]">eapol_port_timers_tick</a> from eapol_auth_sm.o(i.eapol_port_timers_tick) referenced from eapol_auth_sm.o(i.eapol_auth_free)
 <LI><a href="#[81]">eapol_port_timers_tick</a> from eapol_auth_sm.o(i.eapol_port_timers_tick) referenced from eapol_auth_sm.o(i.eapol_auth_initialize)
 <LI><a href="#[81]">eapol_port_timers_tick</a> from eapol_auth_sm.o(i.eapol_port_timers_tick) referenced from eapol_auth_sm.o(i.eapol_port_timers_tick)
 <LI><a href="#[26]">eapol_sm_get_eap_req_id_text</a> from eapol_auth_sm.o(i.eapol_sm_get_eap_req_id_text) referenced 2 times from eapol_auth_sm.o(.data)
 <LI><a href="#[25]">eapol_sm_get_eap_user</a> from eapol_auth_sm.o(i.eapol_sm_get_eap_user) referenced 2 times from eapol_auth_sm.o(.data)
 <LI><a href="#[82]">eapol_sm_step_cb</a> from eapol_auth_sm.o(i.eapol_sm_step_cb) referenced from eapol_auth_sm.o(i.eapol_auth_free)
 <LI><a href="#[82]">eapol_sm_step_cb</a> from eapol_auth_sm.o(i.eapol_sm_step_cb) referenced from eapol_auth_sm.o(i.eapol_auth_step)
 <LI><a href="#[170]">ecdsa_alloc_wrap</a> from pk_wrap.o(i.ecdsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16d]">ecdsa_can_do</a> from pk_wrap.o(i.ecdsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[171]">ecdsa_free_wrap</a> from pk_wrap.o(i.ecdsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16f]">ecdsa_sign_wrap</a> from pk_wrap.o(i.ecdsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16e]">ecdsa_verify_wrap</a> from pk_wrap.o(i.ecdsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[169]">eckey_alloc_wrap</a> from pk_wrap.o(i.eckey_alloc_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[165]">eckey_can_do</a> from pk_wrap.o(i.eckey_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[168]">eckey_check_pair</a> from pk_wrap.o(i.eckey_check_pair) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[16b]">eckey_debug</a> from pk_wrap.o(i.eckey_debug) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[16a]">eckey_free_wrap</a> from pk_wrap.o(i.eckey_free_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[164]">eckey_get_bitlen</a> from pk_wrap.o(i.eckey_get_bitlen) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[167]">eckey_sign_wrap</a> from pk_wrap.o(i.eckey_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[166]">eckey_verify_wrap</a> from pk_wrap.o(i.eckey_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16c]">eckeydh_can_do</a> from pk_wrap.o(i.eckeydh_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[dc]">ecp_mod_p256</a> from ecp_curves.o(i.ecp_mod_p256) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[21]">enqueue_bottom_half_from_isr</a> from ethernetif.o(i.enqueue_bottom_half_from_isr) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[ce]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[ce]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[86]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init1)
 <LI><a href="#[86]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init2)
 <LI><a href="#[17b]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[103]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[1f]">ethernetif_free_pkt</a> from ethernetif.o(i.ethernetif_free_pkt) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[85]">ethernetif_init1</a> from ethernetif.o(i.ethernetif_init1) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[84]">ethernetif_init2</a> from ethernetif.o(i.ethernetif_init2) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[1e]">ethernetif_intr_enhance_mode_allocate_pkt_callback</a> from ethernetif.o(i.ethernetif_intr_enhance_mode_allocate_pkt_callback) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[d1]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[4e]">fputc</a> from io_def.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1a]">free</a> from wrap_heap.o(i.$Sub$$free) referenced 2 times from platform.o(.data)
 <LI><a href="#[c8]">freq_cmp</a> from scan.o(i.freq_cmp) referenced from scan.o(i.int_array_sort_unique)
 <LI><a href="#[145]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(i.gcm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[146]">gcm_ctx_alloc</a> from cipher_wrap.o(i.gcm_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[147]">gcm_ctx_free</a> from cipher_wrap.o(i.gcm_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[db]">get_no_padding</a> from cipher.o(i.get_no_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[d6]">get_one_and_zeros_padding</a> from cipher.o(i.get_one_and_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[d4]">get_pkcs_padding</a> from cipher.o(i.get_pkcs_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[d8]">get_zeros_and_len_padding</a> from cipher.o(i.get_zeros_and_len_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[da]">get_zeros_padding</a> from cipher.o(i.get_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[27]">hal_lp_get_wic_status</a> from hal_lp.o(i.hal_lp_get_wic_status) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[8a]">hal_lp_wic_isr</a> from hal_lp.o(i.hal_lp_wic_isr) referenced from hal_lp.o(i.hal_lp_handle_intr)
 <LI><a href="#[ac]">handle_read</a> from driver_inband.o(i.handle_read) referenced from driver_inband.o(i.inband_driver_init)
 <LI><a href="#[8d]">hostapd_new_assoc_sta</a> from hostapd.o(i.hostapd_new_assoc_sta) referenced from hostapd.o(i.hostapd_alloc_bss_data)
 <LI><a href="#[90]">hostapd_wpa_auth_disconnect</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_disconnect) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[9a]">hostapd_wpa_auth_for_each_auth</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_for_each_auth) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[99]">hostapd_wpa_auth_for_each_sta</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_for_each_sta) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[93]">hostapd_wpa_auth_get_eapol</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_get_eapol) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[95]">hostapd_wpa_auth_get_msk</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_get_msk) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[94]">hostapd_wpa_auth_get_psk</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_get_psk) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[97]">hostapd_wpa_auth_get_seqnum</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_get_seqnum) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[8f]">hostapd_wpa_auth_logger</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_logger) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[91]">hostapd_wpa_auth_mic_failure_report</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_mic_failure_report) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[98]">hostapd_wpa_auth_send_eapol</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_send_eapol) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[9b]">hostapd_wpa_auth_send_ether</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_send_ether) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[92]">hostapd_wpa_auth_set_eapol</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_set_eapol) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[96]">hostapd_wpa_auth_set_key</a> from wpa_auth_glue.o(i.hostapd_wpa_auth_set_key) referenced from wpa_auth_glue.o(i.hostapd_setup_wpa)
 <LI><a href="#[9d]">ieee80211_tkip_countermeasures_stop</a> from tkip_countermeasures.o(i.ieee80211_tkip_countermeasures_stop) referenced from tkip_countermeasures.o(i.ieee80211_tkip_countermeasures_deinit)
 <LI><a href="#[9d]">ieee80211_tkip_countermeasures_stop</a> from tkip_countermeasures.o(i.ieee80211_tkip_countermeasures_stop) referenced from tkip_countermeasures.o(i.ieee80211_tkip_countermeasures_start)
 <LI><a href="#[a0]">ieee802_1x_aaa_send</a> from ieee802_1x.o(i.ieee802_1x_aaa_send) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[a8]">ieee802_1x_eapol_event</a> from ieee802_1x.o(i.ieee802_1x_eapol_event) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[9f]">ieee802_1x_eapol_send</a> from ieee802_1x.o(i.ieee802_1x_eapol_send) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[a2]">ieee802_1x_get_eap_user</a> from ieee802_1x.o(i.ieee802_1x_get_eap_user) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[a4]">ieee802_1x_logger</a> from ieee802_1x.o(i.ieee802_1x_logger) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[9e]">ieee802_1x_rekey</a> from ieee802_1x.o(i.ieee802_1x_rekey) referenced from ieee802_1x.o(i.ieee802_1x_deinit)
 <LI><a href="#[9e]">ieee802_1x_rekey</a> from ieee802_1x.o(i.ieee802_1x_rekey) referenced from ieee802_1x.o(i.ieee802_1x_rekey)
 <LI><a href="#[a5]">ieee802_1x_set_port_authorized</a> from ieee802_1x.o(i.ieee802_1x_set_port_authorized) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[a3]">ieee802_1x_sta_entry_alive</a> from ieee802_1x.o(i.ieee802_1x_sta_entry_alive) referenced from ieee802_1x.o(i.ieee802_1x_init)
 <LI><a href="#[a9]">ieee802_1x_sta_key_available</a> from ieee802_1x.o(i.ieee802_1x_sta_key_available) referenced from ieee802_1x.o(i.ieee802_1x_rekey)
 <LI><a href="#[198]">inband_add_pmkid</a> from driver_inband.o(i.inband_add_pmkid) referenced from driver_inband.o(.constdata)
 <LI><a href="#[ad]">inband_default_rsp_handler</a> from inband_queue.o(i.inband_default_rsp_handler) referenced from inband_queue.o(i.inband_enqueue_cmd_config)
 <LI><a href="#[ad]">inband_default_rsp_handler</a> from inband_queue.o(i.inband_default_rsp_handler) referenced from inband_queue.o(i.inband_queue_exec)
 <LI><a href="#[ad]">inband_default_rsp_handler</a> from inband_queue.o(i.inband_default_rsp_handler) referenced from inband_queue.o(i.inband_queue_query)
 <LI><a href="#[193]">inband_driver_init</a> from driver_inband.o(i.inband_driver_init) referenced from driver_inband.o(.constdata)
 <LI><a href="#[19c]">inband_driver_send_eapol</a> from driver_inband.o(i.inband_driver_send_eapol) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a8]">inband_driver_send_ether</a> from driver_inband.o(i.inband_driver_send_ether) referenced from driver_inband.o(.constdata)
 <LI><a href="#[19a]">inband_flush_pmkid</a> from driver_inband.o(i.inband_flush_pmkid) referenced from driver_inband.o(.constdata)
 <LI><a href="#[88]">inband_handle_func</a> from ethernetif.o(i.inband_handle_func) referenced from ethernetif.o(i.ethernetif_init_callback)
 <LI><a href="#[ae]">inband_queue_task</a> from inband_queue.o(i.inband_queue_task) referenced from inband_queue.o(i.inband_queue_init)
 <LI><a href="#[199]">inband_remove_pmkid</a> from driver_inband.o(i.inband_remove_pmkid) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1af]">inband_send_frame</a> from driver_inband.o(i.inband_send_frame) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1b0]">inband_set_p2p_powersave</a> from driver_inband.o(i.inband_set_p2p_powersave) referenced from driver_inband.o(.constdata)
 <LI><a href="#[104]">ip4_input</a> from ip4.o(i.ip4_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[17a]">ip_reass_tmr</a> from ip4_frag.o(i.ip_reass_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[ca]">ipfrag_free_pbuf_custom</a> from ip4_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip4_frag.o(i.ip4_frag)
 <LI><a href="#[1ca]">isrC_main</a> from hal_nvic.o(.ramTEXT) referenced 96 times from startup_mt7687.o(.isr_vector)
 <LI><a href="#[2f]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[cb]">l2_packet_receive</a> from driver_inband.o(i.l2_packet_receive) referenced from l2_packet_freertos.o(i.l2_packet_init)
 <LI><a href="#[87]">low_level_output_scatter</a> from ethernetif.o(i.low_level_output_scatter) referenced from ethernetif.o(i.ethernetif_init1)
 <LI><a href="#[87]">low_level_output_scatter</a> from ethernetif.o(i.low_level_output_scatter) referenced from ethernetif.o(i.ethernetif_init2)
 <LI><a href="#[6e]">lp_connsys_get_own_enable_int</a> from connsys_driver.o(i.lp_connsys_get_own_enable_int) referenced from connsys_driver.o(i.connsys_open)
 <LI><a href="#[6f]">lp_connsys_give_n9_own</a> from connsys_driver.o(i.lp_connsys_give_n9_own) referenced from connsys_driver.o(i.connsys_open)
 <LI><a href="#[20]">lwip_advance_pkt_hdr</a> from ethernetif.o(i.lwip_advance_pkt_hdr) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[22]">lwip_deliver_tcpip</a> from ethernetif.o(i.lwip_deliver_tcpip) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[e2]">lwip_netconn_do_bind</a> from api_msg.o(i.lwip_netconn_do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[e3]">lwip_netconn_do_close</a> from api_msg.o(i.lwip_netconn_do_close) referenced from api_lib.o(i.netconn_close_shutdown)
 <LI><a href="#[e4]">lwip_netconn_do_connect</a> from api_msg.o(i.lwip_netconn_do_connect) referenced from api_lib.o(i.netconn_connect)
 <LI><a href="#[cf]">lwip_netconn_do_connected</a> from api_msg.o(i.lwip_netconn_do_connected) referenced from api_msg.o(i.lwip_netconn_do_connect)
 <LI><a href="#[e5]">lwip_netconn_do_delconn</a> from api_msg.o(i.lwip_netconn_do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[e6]">lwip_netconn_do_disconnect</a> from api_msg.o(i.lwip_netconn_do_disconnect) referenced from api_lib.o(i.netconn_disconnect)
 <LI><a href="#[d0]">lwip_netconn_do_dns_found</a> from api_msg.o(i.lwip_netconn_do_dns_found) referenced from api_msg.o(i.lwip_netconn_do_gethostbyname)
 <LI><a href="#[e7]">lwip_netconn_do_getaddr</a> from api_msg.o(i.lwip_netconn_do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[e8]">lwip_netconn_do_gethostbyname</a> from api_msg.o(i.lwip_netconn_do_gethostbyname) referenced from api_lib.o(i.netconn_gethostbyname)
 <LI><a href="#[e9]">lwip_netconn_do_newconn</a> from api_msg.o(i.lwip_netconn_do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[ea]">lwip_netconn_do_recv</a> from api_msg.o(i.lwip_netconn_do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[eb]">lwip_netconn_do_send</a> from api_msg.o(i.lwip_netconn_do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[ec]">lwip_netconn_do_write</a> from api_msg.o(i.lwip_netconn_do_write) referenced from api_lib.o(i.netconn_write_partly)
 <LI><a href="#[2b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[33]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(i.mbedtls_ctr_drbg_random) referenced from aws_pkcs11_mbedtls.o(i.C_GenerateKeyPair)
 <LI><a href="#[33]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(i.mbedtls_ctr_drbg_random) referenced from aws_pkcs11_mbedtls.o(i.C_Sign)
 <LI><a href="#[f9]">mbedtls_entropy_func</a> from entropy.o(i.mbedtls_entropy_func) referenced from aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
 <LI><a href="#[dd]">mbedtls_hardware_poll</a> from aws_pkcs11_pal.o(i.mbedtls_hardware_poll) referenced from entropy.o(i.mbedtls_entropy_init)
 <LI><a href="#[14b]">mbedtls_sha1_ret</a> from sha1.o(i.mbedtls_sha1_ret) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1d]">memset</a> from memseta.o(.text) referenced 2 times from platform_util.o(.data)
 <LI><a href="#[c2]">mtk_ap_get_sta</a> from driver_inband.o(i.mtk_ap_get_sta) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[1b1]">mtk_ap_start</a> from driver_inband.o(i.mtk_ap_start) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1b2]">mtk_ap_stop</a> from driver_inband.o(i.mtk_ap_stop) referenced from driver_inband.o(.constdata)
 <LI><a href="#[121]">mtk_ctrl_get_sta_qos_bit</a> from driver_inband.o(i.mtk_ctrl_get_sta_qos_bit) referenced from wpa_supplicant_entry.o(i.wpa_supplicant_entry_dual_iface)
 <LI><a href="#[121]">mtk_ctrl_get_sta_qos_bit</a> from driver_inband.o(i.mtk_ctrl_get_sta_qos_bit) referenced from wpa_supplicant_entry.o(i.wpa_supplicant_entry_iface_change)
 <LI><a href="#[121]">mtk_ctrl_get_sta_qos_bit</a> from driver_inband.o(i.mtk_ctrl_get_sta_qos_bit) referenced from wpa_supplicant_entry.o(i.wpa_supplicant_entry_op_mode_set)
 <LI><a href="#[1b3]">mtk_handle_beacon</a> from driver_inband.o(i.mtk_handle_beacon) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1b4]">mtk_ps_mode</a> from driver_inband.o(i.mtk_ps_mode) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1b5]">mtk_set_ptk_kck_kek</a> from driver_inband.o(i.mtk_set_ptk_kck_kek) referenced from driver_inband.o(.constdata)
 <LI><a href="#[b4]">mtk_supplicant_calculate_pmk</a> from driver_inband.o(i.mtk_supplicant_calculate_pmk) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[c1]">mtk_supplicant_check_wps_element_from_ap</a> from driver_inband.o(i.mtk_supplicant_check_wps_element_from_ap) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[c4]">mtk_supplicant_disable_trigger_scan</a> from driver_inband.o(i.mtk_supplicant_disable_trigger_scan) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[c5]">mtk_supplicant_enable_trigger_scan</a> from driver_inband.o(i.mtk_supplicant_enable_trigger_scan) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[c6]">mtk_supplicant_get_bssid</a> from driver_inband.o(i.mtk_supplicant_get_bssid) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[b3]">mtk_supplicant_get_pmk</a> from driver_inband.o(i.mtk_supplicant_get_pmk) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[b1]">mtk_supplicant_get_security</a> from driver_inband.o(i.mtk_supplicant_get_security) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[b8]">mtk_supplicant_get_ssid</a> from driver_inband.o(i.mtk_supplicant_get_ssid) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[bb]">mtk_supplicant_get_wep_key</a> from driver_inband.o(i.mtk_supplicant_get_wep_key) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[b6]">mtk_supplicant_get_wpa_psk_key</a> from driver_inband.o(i.mtk_supplicant_get_wpa_psk_key) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[c0]">mtk_supplicant_radio_onoff</a> from driver_inband.o(i.mtk_supplicant_radio_onoff) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[b9]">mtk_supplicant_set_bssid</a> from driver_inband.o(i.mtk_supplicant_set_bssid) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[b2]">mtk_supplicant_set_pmk</a> from driver_inband.o(i.mtk_supplicant_set_pmk) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[b0]">mtk_supplicant_set_security</a> from driver_inband.o(i.mtk_supplicant_set_security) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[b7]">mtk_supplicant_set_ssid</a> from driver_inband.o(i.mtk_supplicant_set_ssid) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[c7]">mtk_supplicant_set_ssid_bssid</a> from driver_inband.o(i.mtk_supplicant_set_ssid_bssid) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[ba]">mtk_supplicant_set_wep_key</a> from driver_inband.o(i.mtk_supplicant_set_wep_key) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[b5]">mtk_supplicant_set_wpa_psk_key</a> from driver_inband.o(i.mtk_supplicant_set_wpa_psk_key) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[c3]">mtk_supplicant_show_interfaces</a> from driver_inband.o(i.mtk_supplicant_show_interfaces) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[bf]">mtk_supplicant_start_scan</a> from driver_inband.o(i.mtk_supplicant_start_scan) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[be]">mtk_supplicant_stop_scan</a> from driver_inband.o(i.mtk_supplicant_stop_scan) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[ef]">netif_loop_output_ipv4</a> from netif.o(i.netif_loop_output_ipv4) referenced from netif.o(i.netif_loopif_init)
 <LI><a href="#[ed]">netif_loopif_init</a> from netif.o(i.netif_loopif_init) referenced from netif.o(i.netif_init)
 <LI><a href="#[ee]">netif_poll</a> from netif.o(i.netif_poll) referenced from netif.o(i.netif_loop_output)
 <LI><a href="#[1b7]">none_driver_deinit</a> from driver_none.o(i.none_driver_deinit) referenced from driver_none.o(.constdata)
 <LI><a href="#[1ba]">none_driver_hapd_deinit</a> from driver_none.o(i.none_driver_hapd_deinit) referenced from driver_none.o(.constdata)
 <LI><a href="#[1b9]">none_driver_hapd_init</a> from driver_none.o(i.none_driver_hapd_init) referenced from driver_none.o(.constdata)
 <LI><a href="#[1b6]">none_driver_init</a> from driver_none.o(i.none_driver_init) referenced from driver_none.o(.constdata)
 <LI><a href="#[1b8]">none_driver_send_eapol</a> from driver_none.o(i.none_driver_send_eapol) referenced from driver_none.o(.constdata)
 <LI><a href="#[1bb]">none_driver_send_ether</a> from driver_none.o(i.none_driver_send_ether) referenced from driver_none.o(.constdata)
 <LI><a href="#[f0]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[f3]">pmksa_cache_expire</a> from pmksa_cache_auth.o(i.pmksa_cache_expire) referenced from pmksa_cache_auth.o(i.pmksa_cache_auth_deinit)
 <LI><a href="#[f3]">pmksa_cache_expire</a> from pmksa_cache_auth.o(i.pmksa_cache_expire) referenced from pmksa_cache_auth.o(i.pmksa_cache_set_expiration)
 <LI><a href="#[cd]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[cd]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[aa]">process_global_event</a> from driver_inband.o(i.process_global_event) referenced from driver_inband.o(i.inband_driver_init)
 <LI><a href="#[aa]">process_global_event</a> from driver_inband.o(i.process_global_event) referenced from wpa_supplicant_entry.o(i.wpa_supplicant_entry_iface_change)
 <LI><a href="#[aa]">process_global_event</a> from driver_inband.o(i.process_global_event) referenced from wpa_supplicant_entry.o(i.wpa_supplicant_entry_op_mode_set)
 <LI><a href="#[8e]">prune_associations</a> from utils.o(i.prune_associations) referenced from utils.o(i.hostapd_prune_associations)
 <LI><a href="#[32]">prvCalloc</a> from aws_crypto.o(i.prvCalloc) referenced from aws_crypto.o(i.CRYPTO_ConfigureHeap)
 <LI><a href="#[45]">prvCheckCertificate</a> from aws_tls.o(i.prvCheckCertificate) referenced from aws_tls.o(i.TLS_Connect)
 <LI><a href="#[46]">prvGenerateRandomBytes</a> from aws_tls.o(i.prvGenerateRandomBytes) referenced from aws_tls.o(i.TLS_Connect)
 <LI><a href="#[105]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[137]">prvLoggingTask</a> from aws_logging_task_dynamic_buffers.o(i.prvLoggingTask) referenced from aws_logging_task_dynamic_buffers.o(i.xLoggingTaskInitialize)
 <LI><a href="#[42]">prvNetTask</a> from net_task.o(i.prvNetTask) referenced from net_task.o(i.NetTaskInit)
 <LI><a href="#[43]">prvNetworkRecv</a> from aws_secure_sockets.o(i.prvNetworkRecv) referenced from aws_secure_sockets.o(i.SOCKETS_Connect)
 <LI><a href="#[47]">prvNetworkRecv</a> from aws_tls.o(i.prvNetworkRecv) referenced from aws_tls.o(i.TLS_Connect)
 <LI><a href="#[44]">prvNetworkSend</a> from aws_secure_sockets.o(i.prvNetworkSend) referenced from aws_secure_sockets.o(i.SOCKETS_Connect)
 <LI><a href="#[48]">prvNetworkSend</a> from aws_tls.o(i.prvNetworkSend) referenced from aws_tls.o(i.TLS_Connect)
 <LI><a href="#[f4]">prvPrivateKeySigningCallback</a> from aws_tls.o(i.prvPrivateKeySigningCallback) referenced from aws_tls.o(i.prvInitializeClientCredential)
 <LI><a href="#[fb]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[37]">prvTimerCallback</a> from iot_clock_afr.o(i.prvTimerCallback) referenced from iot_clock_afr.o(i.IotClock_TimerCreate)
 <LI><a href="#[138]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[f1]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[fc]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[f2]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[161]">rsa_alloc_wrap</a> from pk_wrap.o(i.rsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[177]">rsa_alt_alloc_wrap</a> from pk_wrap.o(i.rsa_alt_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[173]">rsa_alt_can_do</a> from pk_wrap.o(i.rsa_alt_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[176]">rsa_alt_check_pair</a> from pk_wrap.o(i.rsa_alt_check_pair) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[175]">rsa_alt_decrypt_wrap</a> from pk_wrap.o(i.rsa_alt_decrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[178]">rsa_alt_free_wrap</a> from pk_wrap.o(i.rsa_alt_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[172]">rsa_alt_get_bitlen</a> from pk_wrap.o(i.rsa_alt_get_bitlen) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[174]">rsa_alt_sign_wrap</a> from pk_wrap.o(i.rsa_alt_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[15b]">rsa_can_do</a> from pk_wrap.o(i.rsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[160]">rsa_check_pair_wrap</a> from pk_wrap.o(i.rsa_check_pair_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[163]">rsa_debug</a> from pk_wrap.o(i.rsa_debug) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[15e]">rsa_decrypt_wrap</a> from pk_wrap.o(i.rsa_decrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[15f]">rsa_encrypt_wrap</a> from pk_wrap.o(i.rsa_encrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[162]">rsa_free_wrap</a> from pk_wrap.o(i.rsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[15a]">rsa_get_bitlen</a> from pk_wrap.o(i.rsa_get_bitlen) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[15d]">rsa_sign_wrap</a> from pk_wrap.o(i.rsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[15c]">rsa_verify_wrap</a> from pk_wrap.o(i.rsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[34]">runDemoTask</a> from iot_demo_afr.o(i.runDemoTask) referenced from iot_demo_runner.o(i.DEMO_RUNNER_RunDemos)
 <LI><a href="#[cc]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[cc]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[14e]">sha1_clone_wrap</a> from md_wrap.o(i.sha1_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14c]">sha1_ctx_alloc</a> from md_wrap.o(i.sha1_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14d]">sha1_ctx_free</a> from md_wrap.o(i.sha1_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14a]">sha1_finish_wrap</a> from md_wrap.o(i.sha1_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14f]">sha1_process_wrap</a> from md_wrap.o(i.sha1_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[148]">sha1_starts_wrap</a> from md_wrap.o(i.sha1_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[149]">sha1_update_wrap</a> from md_wrap.o(i.sha1_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[156]">sha224_clone_wrap</a> from md_wrap.o(i.sha224_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[154]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[155]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[152]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[157]">sha224_process_wrap</a> from md_wrap.o(i.sha224_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[150]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[151]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[153]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[158]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[159]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e0]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[df]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[e1]">ssl_update_checksum_sha256</a> from ssl_tls.o(i.ssl_update_checksum_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[ff]">ssl_update_checksum_start</a> from ssl_tls.o(i.ssl_update_checksum_start) referenced from ssl_tls.o(i.ssl_handshake_params_init)
 <LI><a href="#[100]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[179]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[83]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[83]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from netif.o(i.netif_init)
 <LI><a href="#[101]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[101]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcpip_tcp_timer)
 <LI><a href="#[102]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[1b]">threading_mutex_dummy</a> from threading.o(i.threading_mutex_dummy) referenced 4 times from threading.o(.data)
 <LI><a href="#[1c]">threading_mutex_fail</a> from threading.o(i.threading_mutex_fail) referenced 4 times from threading.o(.data)
 <LI><a href="#[de]">tls_prf_sha256</a> from ssl_tls.o(i.tls_prf_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[8b]">uart_dma_callback_handler</a> from hal_uart.o(i.uart_dma_callback_handler) referenced from hal_uart.o(i.hal_uart_register_callback)
 <LI><a href="#[8c]">uart_interrupt_handler</a> from uart.o(i.uart_interrupt_handler) referenced from hal_uart.o(i.hal_uart_register_callback)
 <LI><a href="#[d2]">vApplicationWrapperTask</a> from main.o(i.vApplicationWrapperTask) referenced from main.o(i.main)
 <LI><a href="#[31]">vPortFree</a> from wrap_heap.o(i.vPortFree) referenced from aws_crypto.o(i.CRYPTO_ConfigureHeap)
 <LI><a href="#[31]">vPortFree</a> from wrap_heap.o(i.vPortFree) referenced from iot_mqtt_subscription.o(i._IotMqtt_RemoveSubscriptionByPacket)
 <LI><a href="#[fa]">vTaskRxSelect</a> from aws_secure_sockets.o(i.vTaskRxSelect) referenced from aws_secure_sockets.o(i.prvRxSelectSet)
 <LI><a href="#[120]">wake_up_eloop_recv</a> from wpa_supplicant_entry.o(i.wake_up_eloop_recv) referenced from wpa_supplicant_entry.o(i.wpa_supplicant_entry)
 <LI><a href="#[187]">wifi_cf_credential_handler</a> from wifi_scan.o(i.wifi_cf_credential_handler) referenced from inband_queue.o(.constdata)
 <LI><a href="#[18d]">wifi_event_proxy_handler</a> from wifi_scan.o(i.wifi_event_proxy_handler) referenced 9 times from wifi_scan.o(.constdata)
 <LI><a href="#[107]">wifi_get_single_sku_from_nvdm</a> from wifi_init.o(i.wifi_get_single_sku_from_nvdm) referenced from wifi_init.o(i.wifi_init_register_callback)
 <LI><a href="#[108]">wifi_profile_auto_record_pmk_info</a> from wifi_init.o(i.wifi_profile_auto_record_pmk_info) referenced from wifi_init.o(i.wifi_init_register_callback)
 <LI><a href="#[188]">wifi_scan_ap_rescan</a> from wifi_scan.o(i.wifi_scan_ap_rescan) referenced from inband_queue.o(.constdata)
 <LI><a href="#[185]">wifi_scan_list_handler</a> from wifi_scan.o(i.wifi_scan_list_handler) referenced from inband_queue.o(.constdata)
 <LI><a href="#[18b]">wifi_wlan_evt_frame_handler</a> from wifi_scan.o(i.wifi_wlan_evt_frame_handler) referenced from inband_queue.o(.constdata)
 <LI><a href="#[189]">wifi_wlan_evt_handler</a> from wifi_scan.o(i.wifi_wlan_evt_handler) referenced 2 times from inband_queue.o(.constdata)
 <LI><a href="#[18a]">wifi_wlan_evt_n9_log_handler</a> from wifi_scan.o(i.wifi_wlan_evt_n9_log_handler) referenced from inband_queue.o(.constdata)
 <LI><a href="#[18c]">wifi_wlan_evt_reason_code</a> from wifi_scan.o(i.wifi_wlan_evt_reason_code) referenced from inband_queue.o(.constdata)
 <LI><a href="#[186]">wifi_wlan_probe_request_handler</a> from wifi_scan.o(i.wifi_wlan_probe_request_handler) referenced from inband_queue.o(.constdata)
 <LI><a href="#[9c]">wpa_auth_iface_iter</a> from wpa_auth_glue.o(i.wpa_auth_iface_iter) referenced from wpa_auth_glue.o(i.hostapd_wpa_auth_for_each_auth)
 <LI><a href="#[136]">wpa_auth_okc_iter</a> from wpa_auth_ie.o(i.wpa_auth_okc_iter) referenced from wpa_auth_ie.o(i.wpa_validate_wpa_ie)
 <LI><a href="#[109]">wpa_auth_pmksa_clear_cb</a> from wpa_auth.o(i.wpa_auth_pmksa_clear_cb) referenced from wpa_auth.o(i.wpa_auth_pmksa_free_cb)
 <LI><a href="#[10f]">wpa_auth_pmksa_free_cb</a> from wpa_auth.o(i.wpa_auth_pmksa_free_cb) referenced from wpa_auth.o(i.wpa_init)
 <LI><a href="#[10c]">wpa_bss_timeout</a> from bss.o(i.wpa_bss_timeout) referenced from bss.o(i.wpa_bss_deinit)
 <LI><a href="#[10c]">wpa_bss_timeout</a> from bss.o(i.wpa_bss_timeout) referenced from bss.o(i.wpa_bss_init)
 <LI><a href="#[10c]">wpa_bss_timeout</a> from bss.o(i.wpa_bss_timeout) referenced 2 times from bss.o(i.wpa_bss_timeout)
 <LI><a href="#[10c]">wpa_bss_timeout</a> from bss.o(i.wpa_bss_timeout) referenced from scan.o(i.wpa_supplicant_get_scan_results)
 <LI><a href="#[197]">wpa_driver_inband_associate</a> from driver_inband.o(i.wpa_driver_inband_associate) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1ad]">wpa_driver_inband_cancel_remain_on_channel</a> from driver_inband.o(i.wpa_driver_inband_cancel_remain_on_channel) referenced from driver_inband.o(.constdata)
 <LI><a href="#[195]">wpa_driver_inband_deauthenticate</a> from driver_inband.o(i.wpa_driver_inband_deauthenticate) referenced from driver_inband.o(.constdata)
 <LI><a href="#[194]">wpa_driver_inband_deinit</a> from driver_inband.o(i.wpa_driver_inband_deinit) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1ae]">wpa_driver_inband_deinit_ap</a> from driver_inband.o(i.wpa_driver_inband_deinit_ap) referenced from driver_inband.o(.constdata)
 <LI><a href="#[196]">wpa_driver_inband_disassociate</a> from driver_inband.o(i.wpa_driver_inband_disassociate) referenced from driver_inband.o(.constdata)
 <LI><a href="#[191]">wpa_driver_inband_driver_cmd</a> from driver_inband.o(i.wpa_driver_inband_driver_cmd) referenced from driver_inband.o(.constdata)
 <LI><a href="#[18e]">wpa_driver_inband_get_bssid</a> from driver_inband.o(i.wpa_driver_inband_get_bssid) referenced from driver_inband.o(.constdata)
 <LI><a href="#[19b]">wpa_driver_inband_get_mac_addr</a> from driver_inband.o(i.wpa_driver_inband_get_mac_addr) referenced from driver_inband.o(.constdata)
 <LI><a href="#[19e]">wpa_driver_inband_get_scan_results</a> from driver_inband.o(i.wpa_driver_inband_get_scan_results) referenced from driver_inband.o(.constdata)
 <LI><a href="#[192]">wpa_driver_inband_get_sock_recv</a> from driver_inband.o(i.wpa_driver_inband_get_sock_recv) referenced from driver_inband.o(.constdata)
 <LI><a href="#[18f]">wpa_driver_inband_get_ssid</a> from driver_inband.o(i.wpa_driver_inband_get_ssid) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a1]">wpa_driver_inband_hapd_send_eapol</a> from driver_inband.o(i.wpa_driver_inband_hapd_send_eapol) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a7]">wpa_driver_inband_if_add</a> from driver_inband.o(i.wpa_driver_inband_if_add) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1ac]">wpa_driver_inband_remain_on_channel</a> from driver_inband.o(i.wpa_driver_inband_remain_on_channel) referenced from driver_inband.o(.constdata)
 <LI><a href="#[19f]">wpa_driver_inband_scan</a> from driver_inband.o(i.wpa_driver_inband_scan) referenced from driver_inband.o(.constdata)
 <LI><a href="#[78]">wpa_driver_inband_scan_timeout</a> from driver_inband.o(i.wpa_driver_inband_scan_timeout) referenced from driver_inband.o(i.do_process_drv_event)
 <LI><a href="#[78]">wpa_driver_inband_scan_timeout</a> from driver_inband.o(i.wpa_driver_inband_scan_timeout) referenced from driver_inband.o(i.wpa_driver_inband_deinit)
 <LI><a href="#[78]">wpa_driver_inband_scan_timeout</a> from driver_inband.o(i.wpa_driver_inband_scan_timeout) referenced from driver_inband.o(i.wpa_driver_inband_scan)
 <LI><a href="#[1aa]">wpa_driver_inband_send_action</a> from driver_inband.o(i.wpa_driver_inband_send_action) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1ab]">wpa_driver_inband_send_action_cancel_wait</a> from driver_inband.o(i.wpa_driver_inband_send_action_cancel_wait) referenced from driver_inband.o(.constdata)
 <LI><a href="#[19d]">wpa_driver_inband_send_mlme</a> from driver_inband.o(i.wpa_driver_inband_send_mlme) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a0]">wpa_driver_inband_set_ap</a> from driver_inband.o(i.wpa_driver_inband_set_ap) referenced from driver_inband.o(.constdata)
 <LI><a href="#[190]">wpa_driver_inband_set_key</a> from driver_inband.o(i.wpa_driver_inband_set_key) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a9]">wpa_driver_inband_set_supp_port</a> from driver_inband.o(i.wpa_driver_inband_set_supp_port) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a5]">wpa_driver_inband_sta_add</a> from driver_inband.o(i.wpa_driver_inband_sta_add) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a2]">wpa_driver_inband_sta_deauth</a> from driver_inband.o(i.wpa_driver_inband_sta_deauth) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a3]">wpa_driver_inband_sta_disassoc</a> from driver_inband.o(i.wpa_driver_inband_sta_disassoc) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a4]">wpa_driver_inband_sta_remove</a> from driver_inband.o(i.wpa_driver_inband_sta_remove) referenced from driver_inband.o(.constdata)
 <LI><a href="#[1a6]">wpa_driver_inband_sta_set_flags</a> from driver_inband.o(i.wpa_driver_inband_sta_set_flags) referenced from driver_inband.o(.constdata)
 <LI><a href="#[10e]">wpa_group_update_sta</a> from wpa_auth.o(i.wpa_group_update_sta) referenced from wpa_auth.o(i.wpa_group_setkeys)
 <LI><a href="#[10d]">wpa_rekey_gmk</a> from wpa_auth.o(i.wpa_rekey_gmk) referenced from wpa_auth.o(i.wpa_deinit)
 <LI><a href="#[10d]">wpa_rekey_gmk</a> from wpa_auth.o(i.wpa_rekey_gmk) referenced from wpa_auth.o(i.wpa_init)
 <LI><a href="#[10d]">wpa_rekey_gmk</a> from wpa_auth.o(i.wpa_rekey_gmk) referenced from wpa_auth.o(i.wpa_rekey_gmk)
 <LI><a href="#[10b]">wpa_rekey_gtk</a> from wpa_auth.o(i.wpa_rekey_gtk) referenced from wpa_auth.o(i.wpa_auth_sta_deinit)
 <LI><a href="#[10b]">wpa_rekey_gtk</a> from wpa_auth.o(i.wpa_rekey_gtk) referenced from wpa_auth.o(i.wpa_deinit)
 <LI><a href="#[10b]">wpa_rekey_gtk</a> from wpa_auth.o(i.wpa_rekey_gtk) referenced from wpa_auth.o(i.wpa_init)
 <LI><a href="#[10b]">wpa_rekey_gtk</a> from wpa_auth.o(i.wpa_rekey_gtk) referenced from wpa_auth.o(i.wpa_receive)
 <LI><a href="#[10b]">wpa_rekey_gtk</a> from wpa_auth.o(i.wpa_rekey_gtk) referenced from wpa_auth.o(i.wpa_rekey_gtk)
 <LI><a href="#[fe]">wpa_rekey_ptk</a> from wpa_auth.o(i.wpa_rekey_ptk) referenced from wpa_auth.o(i.sm_WPA_PTK_PTKINITDONE_Enter)
 <LI><a href="#[fe]">wpa_rekey_ptk</a> from wpa_auth.o(i.wpa_rekey_ptk) referenced from wpa_auth.o(i.wpa_auth_sta_deinit)
 <LI><a href="#[fe]">wpa_rekey_ptk</a> from wpa_auth.o(i.wpa_rekey_ptk) referenced from wpa_auth.o(i.wpa_remove_ptk)
 <LI><a href="#[122]">wpa_scan_result_compar</a> from scan.o(i.wpa_scan_result_compar) referenced from scan.o(i.wpa_supplicant_get_scan_results)
 <LI><a href="#[fd]">wpa_send_eapol_timeout</a> from wpa_auth.o(i.wpa_send_eapol_timeout) referenced from wpa_auth.o(i.sm_WPA_PTK_PTKCALCNEGOTIATING_Enter)
 <LI><a href="#[fd]">wpa_send_eapol_timeout</a> from wpa_auth.o(i.wpa_send_eapol_timeout) referenced from wpa_auth.o(i.wpa_auth_sta_deinit)
 <LI><a href="#[fd]">wpa_send_eapol_timeout</a> from wpa_auth.o(i.wpa_send_eapol_timeout) referenced from wpa_auth.o(i.wpa_receive)
 <LI><a href="#[fd]">wpa_send_eapol_timeout</a> from wpa_auth.o(i.wpa_send_eapol_timeout) referenced from wpa_auth.o(i.wpa_send_eapol)
 <LI><a href="#[10a]">wpa_sm_call_step</a> from wpa_auth.o(i.wpa_sm_call_step) referenced from wpa_auth.o(i.wpa_auth_sm_notify)
 <LI><a href="#[10a]">wpa_sm_call_step</a> from wpa_auth.o(i.wpa_sm_call_step) referenced from wpa_auth.o(i.wpa_auth_sta_deinit)
 <LI><a href="#[112]">wpa_sm_pmksa_free_cb</a> from wpa.o(i.wpa_sm_pmksa_free_cb) referenced from wpa.o(i.wpa_sm_init)
 <LI><a href="#[111]">wpa_sm_rekey_ptk</a> from wpa.o(i.wpa_sm_rekey_ptk) referenced from wpa.o(i.wpa_sm_deinit)
 <LI><a href="#[111]">wpa_sm_rekey_ptk</a> from wpa.o(i.wpa_sm_rekey_ptk) referenced from wpa.o(i.wpa_supplicant_install_ptk)
 <LI><a href="#[110]">wpa_sm_start_preauth</a> from wpa.o(i.wpa_sm_start_preauth) referenced from wpa.o(i.wpa_sm_deinit)
 <LI><a href="#[110]">wpa_sm_start_preauth</a> from wpa.o(i.wpa_sm_start_preauth) referenced from wpa.o(i.wpa_supplicant_key_neg_complete)
 <LI><a href="#[12f]">wpa_supplicant_add_pmkid</a> from wpas_glue.o(i.wpa_supplicant_add_pmkid) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[11e]">wpa_supplicant_delayed_sched_scan_timeout</a> from scan.o(i.wpa_supplicant_delayed_sched_scan_timeout) referenced from scan.o(i.wpa_supplicant_delayed_sched_scan)
 <LI><a href="#[bd]">wpa_supplicant_entry_op_mode_get</a> from wpa_supplicant_entry.o(i.wpa_supplicant_entry_op_mode_get) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[bc]">wpa_supplicant_entry_op_mode_set</a> from wpa_supplicant_entry.o(i.wpa_supplicant_entry_op_mode_set) referenced from driver_inband.o(i.inband_register_supplicant_set_api)
 <LI><a href="#[12c]">wpa_supplicant_get_beacon_ie</a> from wpas_glue.o(i.wpa_supplicant_get_beacon_ie) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[12a]">wpa_supplicant_get_bssid</a> from wpas_glue.o(i.wpa_supplicant_get_bssid) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[132]">wpa_supplicant_get_config_blob</a> from wpas_glue.o(i.wpa_supplicant_get_config_blob) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[129]">wpa_supplicant_get_network_ctx</a> from wpas_glue.o(i.wpa_supplicant_get_network_ctx) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[133]">wpa_supplicant_mlme_setprotection</a> from wpas_glue.o(i.wpa_supplicant_mlme_setprotection) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[123]">wpa_supplicant_msg_ifname_cb</a> from wpa_supplicant.o(i.wpa_supplicant_msg_ifname_cb) referenced from wpa_supplicant.o(i.wpa_supplicant_init)
 <LI><a href="#[130]">wpa_supplicant_remove_pmkid</a> from wpas_glue.o(i.wpa_supplicant_remove_pmkid) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[11f]">wpa_supplicant_rx_eapol</a> from wpa_supplicant.o(i.wpa_supplicant_rx_eapol) referenced from wpa_supplicant.o(i.wpa_supplicant_driver_init)
 <LI><a href="#[11f]">wpa_supplicant_rx_eapol</a> from wpa_supplicant.o(i.wpa_supplicant_rx_eapol) referenced from wpa_supplicant.o(i.wpa_supplicant_update_mac_addr)
 <LI><a href="#[114]">wpa_supplicant_scan</a> from scan.o(i.wpa_supplicant_scan) referenced from scan.o(i.wpa_supplicant_cancel_scan)
 <LI><a href="#[114]">wpa_supplicant_scan</a> from scan.o(i.wpa_supplicant_scan) referenced from scan.o(i.wpa_supplicant_req_scan)
 <LI><a href="#[115]">wpa_supplicant_sched_scan_timeout</a> from scan.o(i.wpa_supplicant_sched_scan_timeout) referenced from scan.o(i.wpa_supplicant_cancel_sched_scan)
 <LI><a href="#[115]">wpa_supplicant_sched_scan_timeout</a> from scan.o(i.wpa_supplicant_sched_scan_timeout) referenced from scan.o(i.wpa_supplicant_req_sched_scan)
 <LI><a href="#[131]">wpa_supplicant_set_config_blob</a> from wpas_glue.o(i.wpa_supplicant_set_config_blob) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[128]">wpa_supplicant_set_key</a> from wpas_glue.o(i.wpa_supplicant_set_key) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[134]">wpa_supplicant_set_rekey_offload</a> from wpas_glue.o(i.wpa_supplicant_set_rekey_offload) referenced from wpas_glue.o(i.wpa_supplicant_init_wpa)
 <LI><a href="#[116]">wpa_supplicant_stop_countermeasures</a> from events.o(i.wpa_supplicant_stop_countermeasures) referenced from wpa_supplicant.o(i.wpa_supplicant_cleanup)
 <LI><a href="#[116]">wpa_supplicant_stop_countermeasures</a> from events.o(i.wpa_supplicant_stop_countermeasures) referenced from events.o(i.wpa_supplicant_event_michael_mic_failure)
 <LI><a href="#[135]">wpa_supplicant_task</a> from wpa_supplicant_task.o(i.wpa_supplicant_task) referenced from wpa_supplicant_task.o(i.wpa_supplicant_task_init)
 <LI><a href="#[113]">wpa_supplicant_timeout</a> from wpa_supplicant.o(i.wpa_supplicant_timeout) referenced from wpa_supplicant.o(i.wpa_supplicant_cancel_auth_timeout)
 <LI><a href="#[113]">wpa_supplicant_timeout</a> from wpa_supplicant.o(i.wpa_supplicant_timeout) referenced from wpa_supplicant.o(i.wpa_supplicant_clear_connection)
 <LI><a href="#[113]">wpa_supplicant_timeout</a> from wpa_supplicant.o(i.wpa_supplicant_timeout) referenced from wpa_supplicant.o(i.wpa_supplicant_req_auth_timeout)
 <LI><a href="#[113]">wpa_supplicant_timeout</a> from wpa_supplicant.o(i.wpa_supplicant_timeout) referenced from wpa_supplicant.o(i.wpas_connection_failed)
 <LI><a href="#[11d]">wpas_ap_configured_cb</a> from ap.o(i.wpas_ap_configured_cb) referenced from ap.o(i.wpa_supplicant_create_ap)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c6]"></a>SvcCall_Main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mt7687.o(.ramTEXT))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c8]"></a>PendSV_Main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mt7687.o(.ramTEXT))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c9]"></a>SysTick_Main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mt7687.o(.ramTEXT))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.ramTEXT))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1ca]"></a>isrC_main</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hal_nvic.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = isrC_main &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pending_irq (via Veneer)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_irq (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d4]"></a>gpt_get_current_time</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gpt_get_current_time &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config
</UL>

<P><STRONG><a name="[21a]"></a>SF_DAL_FLAG_BUSY_SET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[1ef]"></a>SF_DAL_FLAG_BUSY_CLR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[1ee]"></a>SF_DAL_FLAG_SUS_SET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
</UL>

<P><STRONG><a name="[1f5]"></a>SF_DAL_FLAG_SUS_CLR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[1d7]"></a>flash_sfc_config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = flash_sfc_config &rArr; flash_check_device &rArr; flash_read_jedec_id &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_register (via Veneer)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_current_time
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_pad_config (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_init (via Veneer)
</UL>

<P><STRONG><a name="[1db]"></a>hal_flash_direct_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_flash_direct_read &rArr; retrieve_sf_lock &rArr; get_sf_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_sf_lock (via Veneer)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
</UL>

<P><STRONG><a name="[1df]"></a>flash_sfc_read</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_read
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_sf_lock (via Veneer)
</UL>

<P><STRONG><a name="[1e2]"></a>flash_sfc_erase</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = flash_sfc_erase &rArr; flash_erase_sector_32k &rArr; flash_write_disable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_enable (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines (via Veneer)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_disable (via Veneer)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_sf_lock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase (via Veneer)
</UL>

<P><STRONG><a name="[1bc]"></a>Flash_ReturnReady</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_suspend_Winbond
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_SET
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_init (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.ramTEXT)
</UL>
<P><STRONG><a name="[1f1]"></a>SF_DAL_CheckDeviceReady</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SF_DAL_CheckDeviceReady &rArr; flash_resume_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_resume_Winbond
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_suspend_bit (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_CLR
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[1f6]"></a>SF_DAL_CheckReadyAndResume</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SF_DAL_CheckReadyAndResume &rArr; flash_resume_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_resume_Winbond
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_CLR
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[1eb]"></a>save_and_set_interrupt_mask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nvic.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines (via Veneer)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_start (via Veneer)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init (via Veneer)
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler (via Veneer)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma (via Veneer)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma (via Veneer)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback (via Veneer)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock (via Veneer)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock (via Veneer)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex (via Veneer)
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex (via Veneer)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock (via Veneer)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock (via Veneer)
</UL>

<P><STRONG><a name="[1f0]"></a>restore_interrupt_mask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nvic.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines (via Veneer)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_start (via Veneer)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init (via Veneer)
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler (via Veneer)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma (via Veneer)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma (via Veneer)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback (via Veneer)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock (via Veneer)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock (via Veneer)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex (via Veneer)
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex (via Veneer)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock (via Veneer)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock (via Veneer)
</UL>

<P><STRONG><a name="[1f8]"></a>sfc_GPT_return_current_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_get_systime
</UL>

<P><STRONG><a name="[1f7]"></a>sfc_get_systime</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sfc_get_systime
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_time
</UL>

<P><STRONG><a name="[1f9]"></a>sfc_delay_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sfc_delay_time &rArr; sfc_get_systime
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_get_systime
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>

<P><STRONG><a name="[1fa]"></a>sfc_delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sfc_delay_ms &rArr; sfc_delay_time &rArr; sfc_get_systime
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_time
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Init
</UL>

<P><STRONG><a name="[212]"></a>sfc_getMaxGPRamSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config
</UL>

<P><STRONG><a name="[1fb]"></a>sfc_Init</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[20d]"></a>sfc_GetDirectMode</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
</UL>

<P><STRONG><a name="[210]"></a>sfc_direct_read_setup</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode
</UL>

<P><STRONG><a name="[1ff]"></a>sfc_transfer</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacEnable
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacWaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sfc_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_security_write_crc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>

<P><STRONG><a name="[201]"></a>sfc_Command_List</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_suspend_Winbond
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_resume_Winbond
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
</UL>

<P><STRONG><a name="[aff]"></a>sfc_clear_gpram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[203]"></a>sfc_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_read
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_manu_id_quad
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_manu_id
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
</UL>

<P><STRONG><a name="[204]"></a>sfc_write</STRONG> (Thumb, 88 bytes, Stack size 192 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
</UL>

<P><STRONG><a name="[206]"></a>sfc_security_write_crc</STRONG> (Thumb, 50 bytes, Stack size 184 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
</UL>

<P><STRONG><a name="[207]"></a>__sfc_write</STRONG> (Thumb, 92 bytes, Stack size 192 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[1ed]"></a>flash_suspend_Winbond</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
</UL>

<P><STRONG><a name="[1f4]"></a>flash_resume_Winbond</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flash_resume_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[20c]"></a>flash_read_jedec_id</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_read_jedec_id &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config
</UL>

<P><STRONG><a name="[1da]"></a>flash_check_device</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flash_check_device &rArr; flash_read_jedec_id &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_GetDirectMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode
</UL>

<P><STRONG><a name="[20f]"></a>flash_switch_mode</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_register (via Veneer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_direct_read_setup
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[211]"></a>flash_config</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_getMaxGPRamSize
</UL>

<P><STRONG><a name="[213]"></a>flash_init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_getMaxGPRamSize
</UL>

<P><STRONG><a name="[1ec]"></a>flash_read_sr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
</UL>

<P><STRONG><a name="[202]"></a>flash_wait_ready</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>

<P><STRONG><a name="[214]"></a>flash_read_manu_id</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>

<P><STRONG><a name="[215]"></a>flash_read_manu_id_quad</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>

<P><STRONG><a name="[1e0]"></a>flash_read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read
</UL>

<P><STRONG><a name="[1e1]"></a>flash_fast_read</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read
</UL>

<P><STRONG><a name="[1f2]"></a>flash_read_sr2</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_read_sr2 &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_read_SR2_comand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[1e6]"></a>flash_unprotect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = flash_unprotect &rArr; flash_write_sr &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
</UL>

<P><STRONG><a name="[218]"></a>flash_protect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
</UL>

<P><STRONG><a name="[1e5]"></a>flash_write_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = flash_write_enable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
</UL>

<P><STRONG><a name="[219]"></a>flash_write_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = flash_write_disable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
</UL>

<P><STRONG><a name="[1ea]"></a>flash_erase_sector</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = flash_erase_sector &rArr; flash_write_disable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[1e9]"></a>flash_erase_sector_32k</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = flash_erase_sector_32k &rArr; flash_write_disable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[1e8]"></a>flash_erase_page</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = flash_erase_page &rArr; flash_write_disable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[21b]"></a>flash_erase_chip</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>

<P><STRONG><a name="[21c]"></a>flash_erase</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write
</UL>

<P><STRONG><a name="[21d]"></a>flash_write</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = flash_write &rArr; flash_write_enable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_GetDirectMode
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write
</UL>

<P><STRONG><a name="[21e]"></a>flash_erase_write_security_crc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_security_write_crc
</UL>

<P><STRONG><a name="[21f]"></a>flash_erase_write</STRONG> (Thumb, 246 bytes, Stack size 4200 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>

<P><STRONG><a name="[b00]"></a>query_spi_flash_status</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, spi_flash.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[b01]"></a>cmnSerialFlashClkConfToXtal</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, top.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[220]"></a>cmnSerialFlashClkConfTo64M</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, top.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmnSerialFlashClkConfTo64M &rArr; cmnPLL1ON
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnPLL1ON (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware (via Veneer)
</UL>

<P><STRONG><a name="[225]"></a>os_memcpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_strdup (via Veneer)
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task_init (via Veneer)
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_init (via Veneer)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_channel_list_init (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_profile_auto_record_pmk_info (via Veneer)
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac_addr_from_efuse (via Veneer)
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_config (via Veneer)
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_sta_config (via Veneer)
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_ap_config (via Veneer)
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random (via Veneer)
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_pwr_from_str (via Veneer)
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ip_from_str (via Veneer)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memmove (via Veneer)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fw_download_Tx_Scatter (via Veneer)
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_download_wifi_profile (via Veneer)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wlan_evt_handler (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler (via Veneer)
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_beacon_probe_rsp_parser (via Veneer)
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_set_bssid (via Veneer)
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan (via Veneer)
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_get_station_list (via Veneer)
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_disconnect (via Veneer)
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_bssid (via Veneer)
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_country_channel_list (via Veneer)
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_api_event_trigger (via Veneer)
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap (via Veneer)
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_wow (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_global_event (via Veneer)
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_add_scan_bssid (via Veneer)
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_scan_array_by_rssi (via Veneer)
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_list_by_rssi (via Veneer)
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data (via Veneer)
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_build_filter_ssids (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state (via Veneer)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_bss_data (via Veneer)
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_conf_ap (via Veneer)
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt (via Veneer)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi (via Veneer)
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update (via Veneer)
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_copy_res (via Veneer)
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add (via Veneer)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie (via Veneer)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie (via Veneer)
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_connect (via Veneer)
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_wpapsk (via Veneer)
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_prio_bssid (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_wep_key (via Veneer)
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_password_error (via Veneer)
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode (via Veneer)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_bssid (via Veneer)
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_ptk_kck_kek (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_key (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_scan (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_hapd_send_eapol (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_ssid (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_scan_results (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_bssid (via Veneer)
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_connect (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wep_key (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_ssid (via Veneer)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_pmk (via Veneer)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_bssid (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_wpa_psk_key (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_wep_key (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_ssid (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_pmk (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_check_wps_element_from_ap (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init (via Veneer)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_msg_recv (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_process_drv_event (via Veneer)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event (via Veneer)
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid_channel (via Veneer)
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid (via Veneer)
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_wep_key (via Veneer)
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk_from_pmksa (via Veneer)
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk (via Veneer)
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_own_addr (via Veneer)
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config (via Veneer)
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default (via Veneer)
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol (via Veneer)
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_new_conf (via Veneer)
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_add (via Veneer)
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_mac_addr (via Veneer)
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_wpa_none_key (via Veneer)
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate (via Veneer)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan (via Veneer)
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_rsn (via Veneer)
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk (via Veneer)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap (via Veneer)
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4 (via Veneer)
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4 (via Veneer)
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_update_replay_ctr (via Veneer)
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_assoc (via Veneer)
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request (via Veneer)
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic (via Veneer)
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2 (via Veneer)
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4 (via Veneer)
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa (via Veneer)
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn (via Veneer)
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk (via Veneer)
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk (via Veneer)
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data (via Veneer)
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data (via Veneer)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp (via Veneer)
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one (via Veneer)
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_send (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_get_eap_user (via Veneer)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete (via Veneer)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface (via Veneer)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss (via Veneer)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_time_zone (via Veneer)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_time_adv (via Veneer)
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data (via Veneer)
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults_bss (via Veneer)
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk (via Veneer)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_send (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_session_timer (via Veneer)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive (via Veneer)
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_to_eapol_data (via Veneer)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_alloc (via Veneer)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized (via Veneer)
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile (via Veneer)
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_store_wep_key (via Veneer)
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_user_wpa_psk_key (via Veneer)
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_user_ssid (via Veneer)
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_convert_user_wep_key (via Veneer)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc (via Veneer)
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc (via Veneer)
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc (via Veneer)
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wnm_action_rx (via Veneer)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results (via Veneer)
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf (via Veneer)
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid (via Veneer)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_alloc_eapol (via Veneer)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol (via Veneer)
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic (via Veneer)
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update (via Veneer)
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter (via Veneer)
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gmk_to_gtk (via Veneer)
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter (via Veneer)
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter (via Veneer)
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter (via Veneer)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITPSK_Enter (via Veneer)
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITPMK_Enter (via Veneer)
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter (via Veneer)
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add (via Veneer)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_add_okc (via Veneer)
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_from_eapol_data (via Veneer)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie (via Veneer)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init (via Veneer)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_data (via Veneer)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_init (via Veneer)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run (via Veneer)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_conf_clone (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_send_ether (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_get_msk (via Veneer)
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie (via Veneer)
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde (via Veneer)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap (via Veneer)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init (via Veneer)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update (via Veneer)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final (via Veneer)
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_rsn_ie (via Veneer)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector (via Veneer)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_process (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_buildReq (via Veneer)
</UL>

<P><STRONG><a name="[22c]"></a>os_memset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, os.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task_init (via Veneer)
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_pwr_from_str (via Veneer)
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ip_from_str (via Veneer)
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ch_table_from_str (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc (via Veneer)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fw_download_Tx_Scatter (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler (via Veneer)
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry (via Veneer)
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_beacon_probe_rsp_parser (via Veneer)
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan (via Veneer)
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_get_station_list (via Veneer)
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_eloop_recv (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg (via Veneer)
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_scan_array_by_rssi (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan (via Veneer)
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gen_assoc_event (via Veneer)
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt (via Veneer)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_init (via Veneer)
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init (via Veneer)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_wep_key (via Veneer)
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode (via Veneer)
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_ptk_kck_kek (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_key (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_scan (via Veneer)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_raw_receive (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_hapd_send_eapol (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_ssid (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_scan_results (via Veneer)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wpa_psk_key (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wep_key (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_ssid (via Veneer)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_pmk (via Veneer)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_bssid (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_wep_key (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init (via Veneer)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read (via Veneer)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event (via Veneer)
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid_channel (via Veneer)
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid (via Veneer)
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rsn_supp_set_config (via Veneer)
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc (via Veneer)
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk_from_pmksa (via Veneer)
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config (via Veneer)
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_new_conf (via Veneer)
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_empty (via Veneer)
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate (via Veneer)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan (via Veneer)
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa (via Veneer)
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn (via Veneer)
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies (via Veneer)
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_assoc (via Veneer)
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic (via Veneer)
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4 (via Veneer)
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2 (via Veneer)
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_pmksa_free_cb (via Veneer)
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_get_eap_user (via Veneer)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated (via Veneer)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event (via Veneer)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_init (via Veneer)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa (via Veneer)
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_validate_bssid_configuration (via Veneer)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations (via Veneer)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq (via Veneer)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_drv_ieee8021x (via Veneer)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon (via Veneer)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive (via Veneer)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_alloc (via Veneer)
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc (via Veneer)
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk (via Veneer)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_alloc_eapol (via Veneer)
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic (via Veneer)
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_gtk_init (via Veneer)
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter (via Veneer)
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter (via Veneer)
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION_Enter (via Veneer)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_canned_eap (via Veneer)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_conf (via Veneer)
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies (via Veneer)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final (via Veneer)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit (via Veneer)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector (via Veneer)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_deinit (via Veneer)
</UL>

<P><STRONG><a name="[227]"></a>pbkdf2_sha1</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, sha1-pbkdf2.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_calculate_pmk (via Veneer)
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_update_psk (via Veneer)
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites (via Veneer)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_derive_psk (via Veneer)
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk (via Veneer)
</UL>

<P><STRONG><a name="[22a]"></a>local_memcpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sha1.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
</UL>

<P><STRONG><a name="[229]"></a>local_memset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, sha1.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = local_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
</UL>

<P><STRONG><a name="[224]"></a>hmac_sha1_vector</STRONG> (Thumb, 234 bytes, Stack size 176 bytes, sha1.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_memset
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf (via Veneer)
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid (via Veneer)
</UL>

<P><STRONG><a name="[226]"></a>hmac_sha1</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, sha1.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
</UL>

<P><STRONG><a name="[22b]"></a>SHA1Transform</STRONG> (Thumb, 5602 bytes, Stack size 104 bytes, sha1-internal.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
</UL>

<P><STRONG><a name="[22d]"></a>SHA1Update</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sha1-internal.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[22e]"></a>SHA1Final</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sha1-internal.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[22f]"></a>SHA1Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha1-internal.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[228]"></a>sha1_vector</STRONG> (Thumb, 60 bytes, Stack size 120 bytes, sha1-internal.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
</UL>

<P><STRONG><a name="[1cb]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))

<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[b02]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[230]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[250]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b03]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b04]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b05]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b06]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b07]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[232]"></a>CommonFault_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, exception_handler.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1c2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HardFault_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c3]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MemManage_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c4]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BusFault_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c5]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UsageFault_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1bd]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.ramTEXT)
</UL>
<P><STRONG><a name="[af7]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[af6]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1be]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.ramTEXT)
</UL>
<P><STRONG><a name="[961]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[237]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump_ascii
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2f]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[238]"></a>qsort</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_array_sort_unique
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[499]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_nextId
</UL>

<P><STRONG><a name="[3a9]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_sys_random_init
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[239]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctime &rArr; asctime
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[b08]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializePublish
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsInit
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_encodeString
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_write_data
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_raw_pkt_sender
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_direct_read (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write (via Veneer)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sfc_write (via Veneer)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_security_write_crc (via Veneer)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write (via Veneer)
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortRealloc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reallocLoggingBuffer
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_default_rsp_handler
</UL>

<P><STRONG><a name="[363]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_establishMqttConnection
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckCertificate
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_add_iface
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_driver_cmd
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults_bss
</UL>

<P><STRONG><a name="[690]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_consume_current_message
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
</UL>

<P><STRONG><a name="[b09]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[b0a]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b0b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b0c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCalloc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_alloc_wrap
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publishAllMessages
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttSubscriptionCallback
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_modifySubscriptions
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_establishMqttConnection
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessCompletedOperation
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createMqttConnection
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostIP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Init
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_OpenSession
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_config_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_bootstrap
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_ready_callback
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_profile_auto_record_pmk_info
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fetchOrAllocateJob
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_malloc
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_ptk_kck_kek
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_key
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
</UL>

<P><STRONG><a name="[b0d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.data)
</UL>
<P><STRONG><a name="[486]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_pem_to_der
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckCertificate
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strstr
</UL>

<P><STRONG><a name="[358]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strncpy
</UL>

<P><STRONG><a name="[829]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strchr
</UL>

<P><STRONG><a name="[2bf]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_establishMqttConnection
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_find
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_alpn_protocols
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_ssid_bssid
</UL>

<P><STRONG><a name="[281]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_find
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLabelToFilenameHandle
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
</UL>

<P><STRONG><a name="[4bb]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_ee_locally_trusted
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_find_alloc_info_by_mac
</UL>

<P><STRONG><a name="[3a0]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_ready_callback
</UL>

<P><STRONG><a name="[3c7]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_topicMatch
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strncmp
</UL>

<P><STRONG><a name="[23e]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckCertificate
</UL>

<P><STRONG><a name="[240]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[251]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[242]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_pwr_from_str
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ip_from_str
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ch_triplet
</UL>

<P><STRONG><a name="[592]"></a>fgetc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fgetc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[b0e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[236]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[b0f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[b10]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>localtime</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[23b]"></a>asctime</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[83a]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[241]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[23f]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[2c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[246]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[244]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[b11]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[393]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[231]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b12]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b13]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[b14]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[b15]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[249]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b16]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b17]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>calloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wrap_heap.o(i.$Sub$$calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = calloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wrap_heap.o(i.$Sub$$free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[253]"></a>AtoH</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, wifi_scan.o(i.AtoH))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AtoH
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtoH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wep_key
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_convert_user_wep_key
</UL>

<P><STRONG><a name="[255]"></a>AwsIotNetworkManager_EnableNetwork</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, aws_iot_network_manager.o(i.AwsIotNetworkManager_EnableNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = AwsIotNetworkManager_EnableNetwork &rArr; _wifiEnable &rArr; WIFI_On &rArr; _mtk_wifi_bootstrap &rArr; _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifiEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
</UL>

<P><STRONG><a name="[257]"></a>AwsIotNetworkManager_GetConnectedNetworks</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, aws_iot_network_manager.o(i.AwsIotNetworkManager_GetConnectedNetworks))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AwsIotNetworkManager_GetConnectedNetworks &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getConnectedNetworkForDemo
</UL>

<P><STRONG><a name="[3c2]"></a>AwsIotNetworkManager_GetNetworkInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aws_iot_network_manager.o(i.AwsIotNetworkManager_GetNetworkInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AwsIotNetworkManager_GetNetworkInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runDemoTask
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
</UL>

<P><STRONG><a name="[25a]"></a>AwsIotNetworkManager_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, aws_iot_network_manager.o(i.AwsIotNetworkManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AwsIotNetworkManager_Init &rArr; IotMutex_Create &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Create
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_RegisterNetworkStateChangeEventCallback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertTail
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
</UL>

<P><STRONG><a name="[25f]"></a>AwsIotNetworkManager_RemoveSubscription</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, aws_iot_network_manager.o(i.AwsIotNetworkManager_RemoveSubscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AwsIotNetworkManager_RemoveSubscription &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cleanup
</UL>

<P><STRONG><a name="[261]"></a>AwsIotNetworkManager_SubscribeForStateChange</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, aws_iot_network_manager.o(i.AwsIotNetworkManager_SubscribeForStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AwsIotNetworkManager_SubscribeForStateChange &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
</UL>

<P><STRONG><a name="[264]"></a>BssCipherParse</STRONG> (Thumb, 782 bytes, Stack size 88 bytes, wifi_scan.o(i.BssCipherParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BssCipherParse &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
</UL>

<P><STRONG><a name="[254]"></a>BtoH</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, wifi_scan.o(i.BtoH))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtoH
</UL>

<P><STRONG><a name="[1cc]"></a>Bus_Fault_Handler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, exception_handler.o(i.Bus_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bus_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[269]"></a>CM4_GPT2Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpt.o(i.CM4_GPT2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CM4_GPT2Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvGPT2Init
</UL>

<P><STRONG><a name="[26b]"></a>CM4_GPT4Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpt.o(i.CM4_GPT4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[26c]"></a>CRYPTO_ConfigureHeap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aws_crypto.o(i.CRYPTO_ConfigureHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRYPTO_ConfigureHeap
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
</UL>

<P><STRONG><a name="[9]"></a>C_CloseSession</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(i.C_CloseSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = C_CloseSession &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>C_CreateObject</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, aws_pkcs11_mbedtls.o(i.C_CreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = C_CreateObject &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_SaveObject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>C_DestroyObject</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_pkcs11_mbedtls.o(i.C_DestroyObject))
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>C_DigestFinal</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(i.C_DigestFinal))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = C_DigestFinal &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>C_DigestInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(i.C_DigestInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = C_DigestInit &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>C_DigestUpdate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(i.C_DigestUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = C_DigestUpdate &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>C_Finalize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(i.C_Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = C_Finalize &rArr; mbedtls_entropy_free &rArr; mbedtls_sha256_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>C_FindObjects</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, aws_pkcs11_mbedtls.o(i.C_FindObjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = C_FindObjects &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_FindObject
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>C_FindObjectsFinal</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(i.C_FindObjectsFinal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C_FindObjectsFinal &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>C_FindObjectsInit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(i.C_FindObjectsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = C_FindObjectsInit &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>C_GenerateKeyPair</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, aws_pkcs11_mbedtls.o(i.C_GenerateKeyPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = C_GenerateKeyPair &rArr; mbedtls_ecp_gen_key &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_SaveObject
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>C_GenerateRandom</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(i.C_GenerateRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = C_GenerateRandom &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>C_GetAttributeValue</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, aws_pkcs11_mbedtls.o(i.C_GetAttributeValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424<LI>Call Chain = C_GetAttributeValue &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValueCleanup
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>C_GetFunctionList</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aws_pkcs11_mbedtls.o(i.C_GetFunctionList))
<BR><BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionDevice
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionCertificate
</UL>
<BR>[Address Reference Count : 3]<UL><LI> aws_dev_mode_key_provisioning.o(i.xInitializePkcsSession)
<LI> aws_tls.o(i.TLS_Init)
<LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>C_GetSlotList</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, aws_pkcs11_mbedtls.o(i.C_GetSlotList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C_GetSlotList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>C_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_pkcs11_mbedtls.o(i.C_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = C_Initialize &rArr; prvMbedTLS_Initialize &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>C_OpenSession</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, aws_pkcs11_mbedtls.o(i.C_OpenSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = C_OpenSession &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>C_Sign</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, aws_pkcs11_mbedtls.o(i.C_Sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = C_Sign &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPrivateKeySigningCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>C_SignInit</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, aws_pkcs11_mbedtls.o(i.C_SignInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = C_SignInit &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValueCleanup
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPrivateKeySigningCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>C_Verify</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, aws_pkcs11_mbedtls.o(i.C_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = C_Verify &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>C_VerifyInit</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, aws_pkcs11_mbedtls.o(i.C_VerifyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = C_VerifyInit &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValueCleanup
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>CachePreInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, system_mt7687.o(i.CachePreInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[290]"></a>DEMO_RUNNER_RunDemos</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iot_demo_runner.o(i.DEMO_RUNNER_RunDemos))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DEMO_RUNNER_RunDemos &rArr; Iot_CreateDetachedThread &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iot_CreateDetachedThread
</UL>
<BR>[Called By]<UL><LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
</UL>

<P><STRONG><a name="[298]"></a>DMA_Clock_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i.DMA_Clock_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LISR
</UL>

<P><STRONG><a name="[293]"></a>DMA_Clock_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i.DMA_Clock_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[24]"></a>DMA_ERROR_LISR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dma.o(i.DMA_ERROR_LISR))
<BR>[Address Reference Count : 2]<UL><LI> dma.o(i.DMA_UnRegister)
<LI> dma.o(.data)
</UL>
<P><STRONG><a name="[292]"></a>DMA_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Init &rArr; hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
</UL>

<P><STRONG><a name="[35]"></a>DMA_LISR</STRONG> (Thumb, 730 bytes, Stack size 16 bytes, dma.o(i.DMA_LISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_LISR
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Clock_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(i.DMA_Init)
</UL>
<P><STRONG><a name="[299]"></a>DMA_Register</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dma.o(i.DMA_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_Register &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
</UL>

<P><STRONG><a name="[297]"></a>DMA_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma.o(i.DMA_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LISR
</UL>

<P><STRONG><a name="[29a]"></a>DMA_UnRegister</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dma.o(i.DMA_UnRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_UnRegister &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_close
</UL>

<P><STRONG><a name="[36]"></a>GPT_INT_Handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpt.o(i.GPT_INT_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPT_INT_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_TMR_INT_status_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpt.o(i.GPT_init)
</UL>
<P><STRONG><a name="[26a]"></a>GPT_init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, gpt.o(i.GPT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
</UL>

<P><STRONG><a name="[29d]"></a>GPT_return_current_count</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gpt.o(i.GPT_return_current_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_gpt4_count
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
</UL>

<P><STRONG><a name="[1cd]"></a>Hard_Fault_Handler</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, exception_handler.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hard_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[2a0]"></a>IotClock_GetTimeMs</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, iot_clock_afr.o(i.IotClock_GetTimeMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IotClock_GetTimeMs &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_establishMqttConnection
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimestring
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rescheduleDeferredJobsTimer
</UL>

<P><STRONG><a name="[2a2]"></a>IotClock_GetTimestring</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, iot_clock_afr.o(i.IotClock_GetTimestring))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IotClock_GetTimestring &rArr; IotClock_GetTimeMs &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimeMs
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>

<P><STRONG><a name="[2a4]"></a>IotClock_SleepMs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, iot_clock_afr.o(i.IotClock_SleepMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IotClock_SleepMs &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifiConnectAccessPoint
</UL>

<P><STRONG><a name="[2a6]"></a>IotClock_TimerArm</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, iot_clock_afr.o(i.IotClock_TimerArm))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rescheduleDeferredJobsTimer
</UL>

<P><STRONG><a name="[2a8]"></a>IotClock_TimerCreate</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, iot_clock_afr.o(i.IotClock_TimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IotClock_TimerCreate &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
</UL>

<P><STRONG><a name="[2aa]"></a>IotClock_TimerDestroy</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, iot_clock_afr.o(i.IotClock_TimerDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IotClock_TimerDestroy &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyTaskPool
</UL>

<P><STRONG><a name="[263]"></a>IotLog_Generic</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, iot_logging.o(i.IotLog_Generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimestring
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reallocLoggingBuffer
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runDemoTask
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iot_CreateDetachedThread
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Wait
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSdk_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSdk_Cleanup
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_SubscribeForStateChange
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_TimedWait
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Post
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Destroy
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Create
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Publish
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Cleanup
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publishAllMessages
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_operationCompleteCallback
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttSubscriptionCallback
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_modifySubscriptions
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_establishMqttConnection
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_PublishSetDup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleNextRetry
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkRetryLimit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializePuback
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FindOperation
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DeserializeUnsuback
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DeserializeSuback
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DeserializePublish
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DeserializePuback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DeserializePingresp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DeserializeConnack
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPuback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getIncomingPacket
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidateSubscriptionList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidatePublish
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidateOperation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidateConnect
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeUnsubscribe
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeSubscribe
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializePublish
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeConnect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessKeepAlive
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_ReceiveCallback
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_IncrementConnectionReferences
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementConnectionReferences
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createMqttConnection
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createKeepAliveJob
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_SetReceiveCallback
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Receive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Close
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tlsSetup
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_networkReceiveTask
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyConnection
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerDestroy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerCreate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerArm
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dispatchNetworkStateChangeCB
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_RecycleJob
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateRecyclableJob
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trySafeExtraction
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tryCancelInternal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskPoolWorker
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleInternal
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rescheduleDeferredJobsTimer
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fetchOrAllocateJob
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createTaskPool
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prIotMutexTimedLock
</UL>

<P><STRONG><a name="[2c2]"></a>IotMqtt_Cleanup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iot_mqtt_api.o(i.IotMqtt_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = IotMqtt_Cleanup &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cleanupDemo
</UL>

<P><STRONG><a name="[2c3]"></a>IotMqtt_Connect</STRONG> (Thumb, 950 bytes, Stack size 72 bytes, iot_mqtt_api.o(i.IotMqtt_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = IotMqtt_Connect &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_strerror
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidateSubscriptionList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidatePublish
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidateConnect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createMqttConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_establishMqttConnection
</UL>

<P><STRONG><a name="[2d1]"></a>IotMqtt_Disconnect</STRONG> (Thumb, 726 bytes, Stack size 40 bytes, iot_mqtt_api.o(i.IotMqtt_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = IotMqtt_Disconnect &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_strerror
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementConnectionReferences
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_RemoveAll
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMqttDemo
</UL>

<P><STRONG><a name="[2d4]"></a>IotMqtt_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iot_mqtt_api.o(i.IotMqtt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IotMqtt_Init &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initializeDemo
</UL>

<P><STRONG><a name="[2d5]"></a>IotMqtt_IsSubscribed</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, iot_mqtt_subscription.o(i.IotMqtt_IsSubscribed))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = IotMqtt_IsSubscribed &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_FindFirstMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_modifySubscriptions
</UL>

<P><STRONG><a name="[2e0]"></a>IotMqtt_OperationType</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, iot_mqtt_api.o(i.IotMqtt_OperationType))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_operationCompleteCallback
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_modifySubscriptions
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FindOperation
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
</UL>

<P><STRONG><a name="[2d7]"></a>IotMqtt_Publish</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, iot_mqtt_api.o(i.IotMqtt_Publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = IotMqtt_Publish &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidatePublish
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publishAllMessages
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttSubscriptionCallback
</UL>

<P><STRONG><a name="[39]"></a>IotMqtt_ReceiveCallback</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, iot_mqtt_network.o(i.IotMqtt_ReceiveCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = IotMqtt_ReceiveCallback &rArr; _deserializeIncomingPacket &rArr; _IotMqtt_Notify &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getIncomingPacket
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i.IotMqtt_Connect)
</UL>
<P><STRONG><a name="[2da]"></a>IotMqtt_Subscribe</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, iot_mqtt_api.o(i.IotMqtt_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = IotMqtt_Subscribe &rArr; _subscriptionCommon &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_TimedSubscribe
</UL>

<P><STRONG><a name="[2dc]"></a>IotMqtt_TimedSubscribe</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, iot_mqtt_api.o(i.IotMqtt_TimedSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = IotMqtt_TimedSubscribe &rArr; IotMqtt_Subscribe &rArr; _subscriptionCommon &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_modifySubscriptions
</UL>

<P><STRONG><a name="[2dd]"></a>IotMqtt_TimedUnsubscribe</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, iot_mqtt_api.o(i.IotMqtt_TimedUnsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = IotMqtt_TimedUnsubscribe &rArr; IotMqtt_Unsubscribe &rArr; _subscriptionCommon &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Unsubscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_modifySubscriptions
</UL>

<P><STRONG><a name="[2de]"></a>IotMqtt_Unsubscribe</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, iot_mqtt_api.o(i.IotMqtt_Unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = IotMqtt_Unsubscribe &rArr; _subscriptionCommon &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_TimedUnsubscribe
</UL>

<P><STRONG><a name="[2cb]"></a>IotMqtt_Wait</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, iot_mqtt_api.o(i.IotMqtt_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = IotMqtt_Wait &rArr; _IotMqtt_DecrementOperationReferences &rArr; IotTaskPool_TryCancel &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_TimedWait
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_strerror
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidateOperation
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByPacket
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_TimedUnsubscribe
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_TimedSubscribe
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
</UL>

<P><STRONG><a name="[2ce]"></a>IotMqtt_strerror</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, iot_mqtt_api.o(i.IotMqtt_strerror))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publishAllMessages
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_operationCompleteCallback
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_establishMqttConnection
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
</UL>

<P><STRONG><a name="[25b]"></a>IotMutex_Create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, iot_threads_afr.o(i.IotMutex_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IotMutex_Create &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createMqttConnection
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
</UL>

<P><STRONG><a name="[2e5]"></a>IotMutex_Destroy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, iot_threads_afr.o(i.IotMutex_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IotMutex_Destroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createMqttConnection
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyTaskPool
</UL>

<P><STRONG><a name="[258]"></a>IotMutex_Lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iot_threads_afr.o(i.IotMutex_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prIotMutexTimedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_SubscribeForStateChange
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_RemoveSubscription
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_GetConnectedNetworks
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_IsSubscribed
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_InvokeSubscriptionCallback
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleNextRetry
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FindOperation
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByTopicFilter
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByPacket
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessKeepAlive
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_TryCancel
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_IncrementConnectionReferences
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementConnectionReferences
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dispatchNetworkStateChangeCB
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Schedule
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_RecycleJob
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateRecyclableJob
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskPoolWorker
</UL>

<P><STRONG><a name="[259]"></a>IotMutex_Unlock</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, iot_threads_afr.o(i.IotMutex_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IotMutex_Unlock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_SubscribeForStateChange
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_RemoveSubscription
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_GetConnectedNetworks
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_IsSubscribed
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_InvokeSubscriptionCallback
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleNextRetry
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FindOperation
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByTopicFilter
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByPacket
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessKeepAlive
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_TryCancel
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_IncrementConnectionReferences
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementConnectionReferences
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dispatchNetworkStateChangeCB
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Schedule
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_RecycleJob
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateRecyclableJob
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskPoolWorker
</UL>

<P><STRONG><a name="[183]"></a>IotNetworkAfr_Close</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, iot_network_afr.o(i.IotNetworkAfr_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = IotNetworkAfr_Close &rArr; SOCKETS_Shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Shutdown
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_network_afr.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>IotNetworkAfr_Create</STRONG> (Thumb, 536 bytes, Stack size 80 bytes, iot_network_afr.o(i.IotNetworkAfr_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672<LI>Call Chain = IotNetworkAfr_Create &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; prvInitializeClientCredential &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tlsSetup
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_network_afr.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>IotNetworkAfr_Destroy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, iot_network_afr.o(i.IotNetworkAfr_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = IotNetworkAfr_Destroy &rArr; _destroyConnection &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyConnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_network_afr.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>IotNetworkAfr_Receive</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, iot_network_afr.o(i.IotNetworkAfr_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = IotNetworkAfr_Receive &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_network_afr.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>IotNetworkAfr_Send</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, iot_network_afr.o(i.IotNetworkAfr_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584<LI>Call Chain = IotNetworkAfr_Send &rArr; SOCKETS_Send &rArr; TLS_Send &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_network_afr.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>IotNetworkAfr_SetReceiveCallback</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, iot_network_afr.o(i.IotNetworkAfr_SetReceiveCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IotNetworkAfr_SetReceiveCallback &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_network_afr.o(.constdata)
</UL>
<P><STRONG><a name="[2f8]"></a>IotSdk_Cleanup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, iot_init.o(i.IotSdk_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = IotSdk_Cleanup &rArr; IotTaskPool_Destroy &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cleanup
</UL>

<P><STRONG><a name="[2fa]"></a>IotSdk_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, iot_init.o(i.IotSdk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = IotSdk_Init &rArr; IotTaskPool_CreateSystemTaskPool &rArr; _createTaskPool &rArr; _initTaskPoolControlStructures &rArr; IotSemaphore_Create &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateSystemTaskPool
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
</UL>

<P><STRONG><a name="[2fc]"></a>IotSemaphore_Create</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, iot_threads_afr.o(i.IotSemaphore_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IotSemaphore_Create &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMqttDemo
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
</UL>

<P><STRONG><a name="[2fe]"></a>IotSemaphore_Destroy</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, iot_threads_afr.o(i.IotSemaphore_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IotSemaphore_Destroy &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMqttDemo
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cleanup
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyTaskPool
</UL>

<P><STRONG><a name="[2ff]"></a>IotSemaphore_Post</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, iot_threads_afr.o(i.IotSemaphore_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IotSemaphore_Post &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttSubscriptionCallback
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskPoolWorker
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signalShutdown
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleInternal
</UL>

<P><STRONG><a name="[2e1]"></a>IotSemaphore_TimedWait</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, iot_threads_afr.o(i.IotSemaphore_TimedWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IotSemaphore_TimedWait &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publishAllMessages
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskPoolWorker
</UL>

<P><STRONG><a name="[300]"></a>IotSemaphore_Wait</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, iot_threads_afr.o(i.IotSemaphore_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IotSemaphore_Wait &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_waitForDemoNetworkConnection
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleInternal
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createTaskPool
</UL>

<P><STRONG><a name="[301]"></a>IotTaskPool_CreateJob</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, iot_taskpool.o(i.IotTaskPool_CreateJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IotTaskPool_CreateJob &rArr; _initializeJob
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initializeJob
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessKeepAlive
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createKeepAliveJob
</UL>

<P><STRONG><a name="[303]"></a>IotTaskPool_CreateRecyclableJob</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, iot_taskpool.o(i.IotTaskPool_CreateRecyclableJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = IotTaskPool_CreateRecyclableJob &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initializeJob
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fetchOrAllocateJob
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsShutdownStarted
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
</UL>

<P><STRONG><a name="[2fb]"></a>IotTaskPool_CreateSystemTaskPool</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, iot_taskpool.o(i.IotTaskPool_CreateSystemTaskPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = IotTaskPool_CreateSystemTaskPool &rArr; _createTaskPool &rArr; _initTaskPoolControlStructures &rArr; IotSemaphore_Create &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_performTaskPoolParameterValidation
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createTaskPool
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSdk_Init
</UL>

<P><STRONG><a name="[2f9]"></a>IotTaskPool_Destroy</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, iot_taskpool.o(i.IotTaskPool_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = IotTaskPool_Destroy &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Wait
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimeMs
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signalShutdown
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyTaskPool
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyJob
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_RemoveHead
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_PeekHead
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotDeQueue_DequeueHead
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSdk_Cleanup
</UL>

<P><STRONG><a name="[364]"></a>IotTaskPool_GetJobStorageFromHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iot_taskpool.o(i.IotTaskPool_GetJobStorageFromHandle))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessKeepAlive
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
</UL>

<P><STRONG><a name="[2cc]"></a>IotTaskPool_GetSystemTaskPool</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iot_taskpool.o(i.IotTaskPool_GetSystemTaskPool))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSdk_Cleanup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessCompletedOperation
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FindOperation
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessKeepAlive
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttOperation_tryDestroy
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
</UL>

<P><STRONG><a name="[30b]"></a>IotTaskPool_RecycleJob</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, iot_taskpool.o(i.IotTaskPool_RecycleJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = IotTaskPool_RecycleJob &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trySafeExtraction
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recycleJob
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsShutdownStarted
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dispatchNetworkStateChangeCB
</UL>

<P><STRONG><a name="[30e]"></a>IotTaskPool_Schedule</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, iot_taskpool.o(i.IotTaskPool_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trySafeExtraction
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleInternal
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsShutdownStarted
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dispatchNetworkStateChangeCB
</UL>

<P><STRONG><a name="[2cd]"></a>IotTaskPool_ScheduleDeferred</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, iot_taskpool.o(i.IotTaskPool_ScheduleDeferred))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimeMs
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Schedule
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trySafeExtraction
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rescheduleDeferredJobsTimer
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsShutdownStarted
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_PeekHead
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertSorted
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessKeepAlive
</UL>

<P><STRONG><a name="[311]"></a>IotTaskPool_TryCancel</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, iot_taskpool.o(i.IotTaskPool_TryCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = IotTaskPool_TryCancel &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tryCancelInternal
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsShutdownStarted
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FindOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttOperation_tryDestroy
</UL>

<P><STRONG><a name="[365]"></a>IotTaskPool_strerror</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, iot_taskpool.o(i.IotTaskPool_strerror))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessKeepAlive
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trySafeExtraction
</UL>

<P><STRONG><a name="[291]"></a>Iot_CreateDetachedThread</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, iot_threads_afr.o(i.Iot_CreateDetachedThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Iot_CreateDetachedThread &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_RUNNER_RunDemos
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleInternal
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createTaskPool
</UL>

<P><STRONG><a name="[313]"></a>MD5Final</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, md5-internal.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MD5Final &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[7e9]"></a>MD5Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, md5-internal.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[315]"></a>MD5Update</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, md5-internal.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[1ce]"></a>MemManage_Fault_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, exception_handler.o(i.MemManage_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MemManage_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[1c1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exception_handler.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[316]"></a>NetJobAddFromISR</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, net_task.o(i.NetJobAddFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NetJobAddFromISR &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_send_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_bottom_half_from_isr
</UL>

<P><STRONG><a name="[318]"></a>NetTaskInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_task.o(i.NetTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NetTaskInit &rArr; wifi_os_task_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_create
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[27f]"></a>PKCS11_PAL_FindObject</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aws_pkcs11_pal.o(i.PKCS11_PAL_FindObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PKCS11_PAL_FindObject &rArr; prvLabelToFilenameHandle &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_find
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLabelToFilenameHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjects
</UL>

<P><STRONG><a name="[286]"></a>PKCS11_PAL_GetObjectValue</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, aws_pkcs11_pal.o(i.PKCS11_PAL_GetObjectValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PKCS11_PAL_GetObjectValue &rArr; hal_file_read &rArr; hal_flash_read &rArr; hal_flash_direct_read &rArr; retrieve_sf_lock &rArr; get_sf_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_read
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleToFilenamePrivate
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
</UL>

<P><STRONG><a name="[288]"></a>PKCS11_PAL_GetObjectValueCleanup</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aws_pkcs11_pal.o(i.PKCS11_PAL_GetObjectValueCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PKCS11_PAL_GetObjectValueCleanup &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
</UL>

<P><STRONG><a name="[275]"></a>PKCS11_PAL_SaveObject</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aws_pkcs11_pal.o(i.PKCS11_PAL_SaveObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PKCS11_PAL_SaveObject &rArr; hal_file_write &rArr; hal_flash_write &rArr; flash_sfc_write &rArr; flash_write &rArr; flash_write_enable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_write
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLabelToFilenameHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
</UL>

<P><STRONG><a name="[3]"></a>RunMqttDemo</STRONG> (Thumb, 176 bytes, Stack size 144 bytes, iot_demo_mqtt.o(i.RunMqttDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = RunMqttDemo &rArr; _modifySubscriptions &rArr; IotMqtt_TimedUnsubscribe &rArr; IotMqtt_Unsubscribe &rArr; _subscriptionCommon &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Destroy
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publishAllMessages
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_modifySubscriptions
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initializeDemo
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_establishMqttConnection
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cleanupDemo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_demo_runner.o(.data)
</UL>
<P><STRONG><a name="[2ef]"></a>SOCKETS_Close</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, aws_secure_sockets.o(i.SOCKETS_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyConnection
</UL>

<P><STRONG><a name="[2ed]"></a>SOCKETS_Connect</STRONG> (Thumb, 254 bytes, Stack size 80 bytes, aws_secure_sockets.o(i.SOCKETS_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = SOCKETS_Connect &rArr; TLS_Connect &rArr; prvInitializeClientCredential &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
</UL>

<P><STRONG><a name="[2ec]"></a>SOCKETS_GetHostByName</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, aws_secure_sockets.o(i.SOCKETS_GetHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SOCKETS_GetHostByName &rArr; WIFI_GetHostIP &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostIP
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
</UL>

<P><STRONG><a name="[334]"></a>SOCKETS_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aws_secure_sockets.o(i.SOCKETS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[2f4]"></a>SOCKETS_Recv</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, aws_secure_sockets.o(i.SOCKETS_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552<LI>Call Chain = SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Recv
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Receive
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_networkReceiveTask
</UL>

<P><STRONG><a name="[2f5]"></a>SOCKETS_Send</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, aws_secure_sockets.o(i.SOCKETS_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552<LI>Call Chain = SOCKETS_Send &rArr; TLS_Send &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Send
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Send
</UL>

<P><STRONG><a name="[2ee]"></a>SOCKETS_SetSockOpt</STRONG> (Thumb, 570 bytes, Stack size 56 bytes, aws_secure_sockets.o(i.SOCKETS_SetSockOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SOCKETS_SetSockOpt &rArr; prvRxSelectSet &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRxSelectSet
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRxSelectClear
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tlsSetup
</UL>

<P><STRONG><a name="[2e8]"></a>SOCKETS_Shutdown</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, aws_secure_sockets.o(i.SOCKETS_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SOCKETS_Shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Close
</UL>

<P><STRONG><a name="[2ea]"></a>SOCKETS_Socket</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, aws_secure_sockets.o(i.SOCKETS_Socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SOCKETS_Socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
</UL>

<P><STRONG><a name="[333]"></a>SYSTEM_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aws_system_init.o(i.SYSTEM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTEM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
</UL>

<P><STRONG><a name="[5a8]"></a>SYSefuse_Read16Bytes</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, hal_efuse.o(i.SYSefuse_Read16Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSefuse_Read16Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_read
</UL>

<P><STRONG><a name="[1bf]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.ramTEXT)
</UL>
<P><STRONG><a name="[43a]"></a>SysTick_Set</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system_mt7687.o(i.SysTick_Set))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo192M
</UL>

<P><STRONG><a name="[338]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_mt7687.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo192M
</UL>

<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_mt7687.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[325]"></a>TLS_Cleanup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aws_tls.o(i.TLS_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>

<P><STRONG><a name="[329]"></a>TLS_Connect</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, aws_tls.o(i.TLS_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512<LI>Call Chain = TLS_Connect &rArr; prvInitializeClientCredential &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_ConfigureHeap
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_verify
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_alpn_protocols
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>

<P><STRONG><a name="[328]"></a>TLS_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, aws_tls.o(i.TLS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TLS_Init &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>

<P><STRONG><a name="[32b]"></a>TLS_Recv</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, aws_tls.o(i.TLS_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>

<P><STRONG><a name="[32c]"></a>TLS_Send</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, aws_tls.o(i.TLS_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = TLS_Send &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>

<P><STRONG><a name="[1cf]"></a>Usage_Fault_Handler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, exception_handler.o(i.Usage_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Usage_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[89]"></a>WDT_LISR</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, low_hal_wdt.o(i.WDT_LISR))
<BR><BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTSoftwareReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_hal_wdt.o(i.halWDTConfig)
</UL>
<P><STRONG><a name="[34a]"></a>WIFI_ConnectAP</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, aws_wifi.o(i.WIFI_ConnectAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = WIFI_ConnectAP &rArr; _mtk_sta_ip_down &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_mode_switch_wrapper
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_up
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_is_ready
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_down
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_ap_ip_down
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_reload_setting
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifiConnectAccessPoint
</UL>

<P><STRONG><a name="[32a]"></a>WIFI_GetHostIP</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, aws_wifi.o(i.WIFI_GetHostIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = WIFI_GetHostIP &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
</UL>

<P><STRONG><a name="[355]"></a>WIFI_On</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, aws_wifi.o(i.WIFI_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = WIFI_On &rArr; _mtk_wifi_bootstrap &rArr; _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_bootstrap
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_radio
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifiEnable
</UL>

<P><STRONG><a name="[25e]"></a>WIFI_RegisterNetworkStateChangeEventCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_wifi.o(i.WIFI_RegisterNetworkStateChangeEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_Init
</UL>

<P><STRONG><a name="[2c9]"></a>_IotMqtt_AddSubscriptions</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, iot_mqtt_subscription.o(i._IotMqtt_AddSubscriptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _IotMqtt_AddSubscriptions &rArr; _IotMqtt_RemoveSubscriptionByTopicFilter &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByTopicFilter
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertHead
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_FindFirstMatch
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
</UL>

<P><STRONG><a name="[2d2]"></a>_IotMqtt_CloseNetworkConnection</STRONG> (Thumb, 472 bytes, Stack size 80 bytes, iot_mqtt_network.o(i._IotMqtt_CloseNetworkConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _IotMqtt_CloseNetworkConnection &rArr; IotTaskPool_TryCancel &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FreePacket
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_TryCancel
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessKeepAlive
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_ReceiveCallback
</UL>

<P><STRONG><a name="[2c8]"></a>_IotMqtt_CreateOperation</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, iot_mqtt_operation.o(i._IotMqtt_CreateOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _IotMqtt_CreateOperation &rArr; _IotMqtt_DecrementConnectionReferences &rArr; _destroyMqttConnection &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Create
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertHead
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_IncrementConnectionReferences
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementConnectionReferences
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Publish
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
</UL>

<P><STRONG><a name="[2d3]"></a>_IotMqtt_DecrementConnectionReferences</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, iot_mqtt_api.o(i._IotMqtt_DecrementConnectionReferences))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _IotMqtt_DecrementConnectionReferences &rArr; _destroyMqttConnection &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_InvokeSubscriptionCallback
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
</UL>

<P><STRONG><a name="[2e2]"></a>_IotMqtt_DecrementOperationReferences</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, iot_mqtt_operation.o(i._IotMqtt_DecrementOperationReferences))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _IotMqtt_DecrementOperationReferences &rArr; IotTaskPool_TryCancel &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_TryCancel
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessCompletedOperation
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttOperation_tryDestroy
</UL>

<P><STRONG><a name="[55]"></a>_IotMqtt_DeserializeConnack</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, iot_mqtt_serialize.o(i._IotMqtt_DeserializeConnack))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _IotMqtt_DeserializeConnack &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_network.o(i._deserializeIncomingPacket)
</UL>
<P><STRONG><a name="[5a]"></a>_IotMqtt_DeserializePingresp</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, iot_mqtt_serialize.o(i._IotMqtt_DeserializePingresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _IotMqtt_DeserializePingresp &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_network.o(i._deserializeIncomingPacket)
</UL>
<P><STRONG><a name="[57]"></a>_IotMqtt_DeserializePuback</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, iot_mqtt_serialize.o(i._IotMqtt_DeserializePuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _IotMqtt_DeserializePuback &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_network.o(i._deserializeIncomingPacket)
</UL>
<P><STRONG><a name="[56]"></a>_IotMqtt_DeserializePublish</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, iot_mqtt_serialize.o(i._IotMqtt_DeserializePublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _IotMqtt_DeserializePublish &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_network.o(i._deserializeIncomingPacket)
</UL>
<P><STRONG><a name="[58]"></a>_IotMqtt_DeserializeSuback</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, iot_mqtt_serialize.o(i._IotMqtt_DeserializeSuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _IotMqtt_DeserializeSuback &rArr; _IotMqtt_RemoveSubscriptionByPacket &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_network.o(i._deserializeIncomingPacket)
</UL>
<P><STRONG><a name="[59]"></a>_IotMqtt_DeserializeUnsuback</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, iot_mqtt_serialize.o(i._IotMqtt_DeserializeUnsuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _IotMqtt_DeserializeUnsuback &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_network.o(i._deserializeIncomingPacket)
</UL>
<P><STRONG><a name="[2cf]"></a>_IotMqtt_DestroyOperation</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, iot_mqtt_operation.o(i._IotMqtt_DestroyOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _IotMqtt_DestroyOperation &rArr; _IotMqtt_DecrementConnectionReferences &rArr; _destroyMqttConnection &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Destroy
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementConnectionReferences
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Publish
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessCompletedOperation
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttOperation_tryDestroy
</UL>

<P><STRONG><a name="[35d]"></a>_IotMqtt_FindOperation</STRONG> (Thumb, 446 bytes, Stack size 80 bytes, iot_mqtt_operation.o(i._IotMqtt_FindOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _IotMqtt_FindOperation &rArr; IotTaskPool_TryCancel &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_FindFirstMatch
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_TryCancel
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
</UL>

<P><STRONG><a name="[49]"></a>_IotMqtt_FreePacket</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, iot_mqtt_serialize.o(i._IotMqtt_FreePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _IotMqtt_FreePacket &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iot_mqtt_operation.o(i._IotMqtt_DestroyOperation)
<LI> iot_mqtt_network.o(i._sendPuback)
</UL>
<P><STRONG><a name="[35f]"></a>_IotMqtt_GetNextByte</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, iot_mqtt_network.o(i._IotMqtt_GetNextByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _IotMqtt_GetNextByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_GetRemainingLength
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_GetPacketType
</UL>

<P><STRONG><a name="[5d]"></a>_IotMqtt_GetPacketType</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, iot_mqtt_serialize.o(i._IotMqtt_GetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _IotMqtt_GetPacketType &rArr; _IotMqtt_GetNextByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_GetNextByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_network.o(i._getIncomingPacket)
</UL>
<P><STRONG><a name="[5e]"></a>_IotMqtt_GetRemainingLength</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, iot_mqtt_serialize.o(i._IotMqtt_GetRemainingLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _IotMqtt_GetRemainingLength &rArr; _IotMqtt_GetNextByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_GetNextByte
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remainingLengthEncodedSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_network.o(i._getIncomingPacket)
</UL>
<P><STRONG><a name="[35b]"></a>_IotMqtt_IncrementConnectionReferences</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, iot_mqtt_api.o(i._IotMqtt_IncrementConnectionReferences))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _IotMqtt_IncrementConnectionReferences &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
</UL>

<P><STRONG><a name="[361]"></a>_IotMqtt_InvokeSubscriptionCallback</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, iot_mqtt_subscription.o(i._IotMqtt_InvokeSubscriptionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _IotMqtt_InvokeSubscriptionCallback &rArr; _IotMqtt_DecrementConnectionReferences &rArr; _destroyMqttConnection &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementConnectionReferences
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_FindFirstMatch
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
</UL>

<P><STRONG><a name="[362]"></a>_IotMqtt_Notify</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, iot_mqtt_operation.o(i._IotMqtt_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = _IotMqtt_Notify &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Post
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertHead
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByPacket
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
</UL>

<P><STRONG><a name="[4b]"></a>_IotMqtt_ProcessCompletedOperation</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, iot_mqtt_operation.o(i._IotMqtt_ProcessCompletedOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _IotMqtt_ProcessCompletedOperation &rArr; _IotMqtt_DecrementOperationReferences &rArr; IotTaskPool_TryCancel &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iot_mqtt_operation.o(i._IotMqtt_Notify)
<LI> iot_mqtt_operation.o(i._IotMqtt_ScheduleOperation)
</UL>
<P><STRONG><a name="[4d]"></a>_IotMqtt_ProcessIncomingPublish</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, iot_mqtt_operation.o(i._IotMqtt_ProcessIncomingPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _IotMqtt_ProcessIncomingPublish &rArr; _IotMqtt_InvokeSubscriptionCallback &rArr; _IotMqtt_DecrementConnectionReferences &rArr; _destroyMqttConnection &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_InvokeSubscriptionCallback
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttOperation_tryDestroy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iot_mqtt_network.o(i._deserializeIncomingPacket)
<LI> iot_mqtt_operation.o(i._IotMqtt_ScheduleOperation)
</UL>
<P><STRONG><a name="[53]"></a>_IotMqtt_ProcessKeepAlive</STRONG> (Thumb, 696 bytes, Stack size 56 bytes, iot_mqtt_operation.o(i._IotMqtt_ProcessKeepAlive))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _IotMqtt_ProcessKeepAlive &rArr; _IotMqtt_CloseNetworkConnection &rArr; IotTaskPool_TryCancel &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_strerror
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetJobStorageFromHandle
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CloseNetworkConnection
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateJob
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iot_mqtt_api.o(i._createKeepAliveJob)
<LI> iot_mqtt_operation.o(i._IotMqtt_ProcessKeepAlive)
</UL>
<P><STRONG><a name="[3a]"></a>_IotMqtt_ProcessSend</STRONG> (Thumb, 696 bytes, Stack size 64 bytes, iot_mqtt_operation.o(i._IotMqtt_ProcessSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = _IotMqtt_ProcessSend &rArr; _scheduleNextRetry &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleNextRetry
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkRetryLimit
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertHead
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>
<BR>[Address Reference Count : 6]<UL><LI> iot_mqtt_api.o(i.IotMqtt_Connect)
<LI> iot_mqtt_api.o(i.IotMqtt_Disconnect)
<LI> iot_mqtt_api.o(i.IotMqtt_Publish)
<LI> iot_mqtt_api.o(i._subscriptionCommon)
<LI> iot_mqtt_operation.o(i._IotMqtt_ScheduleOperation)
<LI> iot_mqtt_operation.o(i._scheduleNextRetry)
</UL>
<P><STRONG><a name="[51]"></a>_IotMqtt_PublishSetDup</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, iot_mqtt_serialize.o(i._IotMqtt_PublishSetDup))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _IotMqtt_PublishSetDup &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nextPacketIdentifier
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_operation.o(i._checkRetryLimit)
</UL>
<P><STRONG><a name="[2e3]"></a>_IotMqtt_RemoveSubscriptionByPacket</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, iot_mqtt_subscription.o(i._IotMqtt_RemoveSubscriptionByPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _IotMqtt_RemoveSubscriptionByPacket &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_FindFirstMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DeserializeSuback
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
</UL>

<P><STRONG><a name="[35a]"></a>_IotMqtt_RemoveSubscriptionByTopicFilter</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, iot_mqtt_subscription.o(i._IotMqtt_RemoveSubscriptionByTopicFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _IotMqtt_RemoveSubscriptionByTopicFilter &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_FindFirstMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
</UL>

<P><STRONG><a name="[2ca]"></a>_IotMqtt_ScheduleOperation</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, iot_mqtt_operation.o(i._IotMqtt_ScheduleOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_strerror
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateJob
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Publish
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleNextRetry
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
</UL>

<P><STRONG><a name="[38]"></a>_IotMqtt_SerializeConnect</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, iot_mqtt_serialize.o(i._IotMqtt_SerializeConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _IotMqtt_SerializeConnect &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_encodeString
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_encodeRemainingLength
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_connectPacketSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i.IotMqtt_Connect)
</UL>
<P><STRONG><a name="[3b]"></a>_IotMqtt_SerializeDisconnect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iot_mqtt_serialize.o(i._IotMqtt_SerializeDisconnect))
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i.IotMqtt_Disconnect)
</UL>
<P><STRONG><a name="[52]"></a>_IotMqtt_SerializePingreq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iot_mqtt_serialize.o(i._IotMqtt_SerializePingreq))
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i._createKeepAliveJob)
</UL>
<P><STRONG><a name="[65]"></a>_IotMqtt_SerializePuback</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, iot_mqtt_serialize.o(i._IotMqtt_SerializePuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _IotMqtt_SerializePuback &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_network.o(i._sendPuback)
</UL>
<P><STRONG><a name="[3e]"></a>_IotMqtt_SerializePublish</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, iot_mqtt_serialize.o(i._IotMqtt_SerializePublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _IotMqtt_SerializePublish &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publishPacketSize
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nextPacketIdentifier
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_encodeString
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_encodeRemainingLength
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i.IotMqtt_Publish)
</UL>
<P><STRONG><a name="[66]"></a>_IotMqtt_SerializeSubscribe</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, iot_mqtt_serialize.o(i._IotMqtt_SerializeSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _IotMqtt_SerializeSubscribe &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionPacketSize
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nextPacketIdentifier
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_encodeString
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_encodeRemainingLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i._subscriptionCommon)
</UL>
<P><STRONG><a name="[67]"></a>_IotMqtt_SerializeUnsubscribe</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, iot_mqtt_serialize.o(i._IotMqtt_SerializeUnsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _IotMqtt_SerializeUnsubscribe &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionPacketSize
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nextPacketIdentifier
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_encodeString
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_encodeRemainingLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i._subscriptionCommon)
</UL>
<P><STRONG><a name="[2c4]"></a>_IotMqtt_ValidateConnect</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, iot_mqtt_validate.o(i._IotMqtt_ValidateConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _IotMqtt_ValidateConnect &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
</UL>

<P><STRONG><a name="[2df]"></a>_IotMqtt_ValidateOperation</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iot_mqtt_validate.o(i._IotMqtt_ValidateOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _IotMqtt_ValidateOperation &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Wait
</UL>

<P><STRONG><a name="[2c5]"></a>_IotMqtt_ValidatePublish</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, iot_mqtt_validate.o(i._IotMqtt_ValidatePublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _IotMqtt_ValidatePublish &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Publish
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
</UL>

<P><STRONG><a name="[2c6]"></a>_IotMqtt_ValidateSubscriptionList</STRONG> (Thumb, 574 bytes, Stack size 48 bytes, iot_mqtt_validate.o(i._IotMqtt_ValidateSubscriptionList))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _IotMqtt_ValidateSubscriptionList &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionCommon
</UL>

<P><STRONG><a name="[36e]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b18]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[205]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLoggingTask
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_sys_random_init
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_write_data
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UnRegister
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Register
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode (via Veneer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode (via Veneer)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sfc_write (via Veneer)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write (via Veneer)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port_pio
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_intr_enhance_mode_receive_one_data
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_dispatch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_give_n9_own
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_debug_print_timestamp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_show_interfaces
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey_broadcast
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_eap_response
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_eap
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_buildReq
</UL>

<P><STRONG><a name="[b19]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b1a]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[370]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1b]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2a3]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publishAllMessages
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttSubscriptionCallback
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_establishMqttConnection
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimestring
</UL>

<P><STRONG><a name="[b1c]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[b1d]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[371]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1e]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3d4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump_ascii
</UL>

<P><STRONG><a name="[b1f]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b20]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[372]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b21]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[b22]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[b23]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2c0]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg_ctrl
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_vlogger
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_assert</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, exception_handler.o(i.__aeabi_assert))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_configure
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_hander
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady (via Veneer)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_current_time (via Veneer)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_event_proxy_handler
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[b24]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[b25]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b26]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b27]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[373]"></a>__wpa_send_eapol</STRONG> (Thumb, 922 bytes, Stack size 112 bytes, wpa_auth.o(i.__wpa_send_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_use_aes_cmac
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
</UL>
<BR>[Called By]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
</UL>

<P><STRONG><a name="[497]"></a>abort</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, exception_handler.o(i.abort))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init2
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init1
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_split_64k
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[3f3]"></a>aes_decrypt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aes-internal-dec.o(i.aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aes_decrypt &rArr; rijndaelDecrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
</UL>

<P><STRONG><a name="[3f5]"></a>aes_decrypt_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes-internal-dec.o(i.aes_decrypt_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aes_decrypt_deinit &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
</UL>

<P><STRONG><a name="[3f6]"></a>aes_decrypt_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, aes-internal-dec.o(i.aes_decrypt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aes_decrypt_init &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupDec
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
</UL>

<P><STRONG><a name="[3f9]"></a>aes_encrypt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aes-internal-enc.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aes_encrypt &rArr; rijndaelEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
</UL>

<P><STRONG><a name="[3fb]"></a>aes_encrypt_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes-internal-enc.o(i.aes_encrypt_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aes_encrypt_deinit &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
</UL>

<P><STRONG><a name="[3fc]"></a>aes_encrypt_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, aes-internal-enc.o(i.aes_encrypt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aes_encrypt_init &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
</UL>

<P><STRONG><a name="[400]"></a>aes_unwrap</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, aes-unwrap.o(i.aes_unwrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = aes_unwrap &rArr; aes_decrypt_init &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_deinit
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
</UL>

<P><STRONG><a name="[379]"></a>aes_wrap</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, aes-wrap.o(i.aes_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aes_wrap &rArr; aes_encrypt_init &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[a90]"></a>ap_client_poll_ok</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap.o(i.ap_client_poll_ok))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a8f]"></a>ap_eapol_tx_status</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, ap.o(i.ap_eapol_tx_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ap_eapol_tx_status
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[660]"></a>ap_for_each_sta</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sta_info.o(i.ap_for_each_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ap_for_each_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey
</UL>

<P><STRONG><a name="[404]"></a>ap_free_sta</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, sta_info.o(i.ap_free_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacons
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_wds_sta
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_list_del
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_hash_del
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_free_station
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_session_timer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_disassoc
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[40f]"></a>ap_get_sta</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sta_info.o(i.ap_get_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ap_get_sta &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_ctrl_get_sta_qos_bit
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_ap_get_sta
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_sta_entry_alive
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prune_associations
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove_in_other_bss
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_disassoc
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_sta_low_ack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_set_eapol
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_send_eapol
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_get_psk
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_get_msk
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_get_eapol
</UL>

<P><STRONG><a name="[69]"></a>ap_handle_timer</STRONG> (Thumb, 802 bytes, Stack size 64 bytes, sta_info.o(i.ap_handle_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ap_handle_timer &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_notify_port_enabled
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_free_station
</UL>
<BR>[Address Reference Count : 5]<UL><LI> sta_info.o(i.ap_free_sta)
<LI> sta_info.o(i.ap_handle_timer)
<LI> sta_info.o(i.ap_sta_add)
<LI> sta_info.o(i.ap_sta_disassociate)
<LI> sta_info.o(i.ap_sta_disconnect)
</UL>
<P><STRONG><a name="[a92]"></a>ap_mgmt_rx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap.o(i.ap_mgmt_rx))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a8d]"></a>ap_mgmt_tx_cb</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, ap.o(i.ap_mgmt_tx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ap_mgmt_tx_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a91]"></a>ap_rx_from_unknown_sta</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap.o(i.ap_rx_from_unknown_sta))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[417]"></a>ap_sta_add</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, sta_info.o(i.ap_sta_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = ap_sta_add &rArr; ap_sta_remove_in_other_bss &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_hash_add
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove_in_other_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[65b]"></a>ap_sta_bind_vlan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sta_info.o(i.ap_sta_bind_vlan))
<BR><BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
</UL>

<P><STRONG><a name="[41c]"></a>ap_sta_disassociate</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, sta_info.o(i.ap_sta_disassociate))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ap_sta_disassociate &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_free_station
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prune_associations
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_sta_low_ack
</UL>

<P><STRONG><a name="[41d]"></a>ap_sta_disconnect</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sta_info.o(i.ap_sta_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_deauth_cb_timeout
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_notify_port_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove_in_other_bss
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_abort_auth
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_disconnect
</UL>

<P><STRONG><a name="[418]"></a>ap_sta_hash_add</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sta_info.o(i.ap_sta_hash_add))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
</UL>

<P><STRONG><a name="[405]"></a>ap_sta_set_authorized</STRONG> (Thumb, 610 bytes, Stack size 80 bytes, sta_info.o(i.ap_sta_set_authorized))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ap_sta_set_authorized &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassociate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_disassoc
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>

<P><STRONG><a name="[a8e]"></a>ap_tx_status</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, ap.o(i.ap_tx_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ap_tx_status
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[5f2]"></a>authsrv_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, authsrv.o(i.authsrv_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup
</UL>

<P><STRONG><a name="[62b]"></a>authsrv_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, authsrv.o(i.authsrv_init))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[f7]"></a>aws_mbedtls_mutex_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aws_pkcs11_mbedtls.o(i.aws_mbedtls_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aws_mbedtls_mutex_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
</UL>
<P><STRONG><a name="[f8]"></a>aws_mbedtls_mutex_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aws_pkcs11_mbedtls.o(i.aws_mbedtls_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aws_mbedtls_mutex_init &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
</UL>
<P><STRONG><a name="[f6]"></a>aws_mbedtls_mutex_lock</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(i.aws_mbedtls_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = aws_mbedtls_mutex_lock &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
</UL>
<P><STRONG><a name="[f5]"></a>aws_mbedtls_mutex_unlock</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(i.aws_mbedtls_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = aws_mbedtls_mutex_unlock &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
</UL>
<P><STRONG><a name="[429]"></a>bsp_ept_gpio_setting_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_gpio_ept_config.o(i.bsp_ept_gpio_setting_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_ept_gpio_setting_init &rArr; gpio_mode_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_up_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_down_init
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_oe_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ies_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMiscInitialization
</UL>

<P><STRONG><a name="[436]"></a>check_raw_pkt_rssi_threshold</STRONG> (Thumb, 84 bytes, Stack size 28 bytes, connsys_util.o(i.check_raw_pkt_rssi_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = check_raw_pkt_rssi_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_dispatch
</UL>

<P><STRONG><a name="[a53]"></a>cipher_suite2driver</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wpa_supplicant.o(i.cipher_suite2driver))
<BR><BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[29b]"></a>clear_TMR_INT_status_bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(i.clear_TMR_INT_status_bit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_INT_Handler
</UL>

<P><STRONG><a name="[438]"></a>cmnCpuClkConfigureTo192M</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, top.o(i.cmnCpuClkConfigureTo192M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmnCpuClkConfigureTo192M &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnPLL1ON_PLL2ON
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[221]"></a>cmnPLL1ON</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, top.o(i.cmnPLL1ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmnPLL1ON
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnSerialFlashClkConfTo64M (via Veneer)
</UL>

<P><STRONG><a name="[439]"></a>cmnPLL1ON_PLL2ON</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, top.o(i.cmnPLL1ON_PLL2ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmnPLL1ON_PLL2ON
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo192M
</UL>

<P><STRONG><a name="[43b]"></a>connsys_abnormal_interrupt_check</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, connsys_driver.o(i.connsys_abnormal_interrupt_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = connsys_abnormal_interrupt_check &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
</UL>

<P><STRONG><a name="[43d]"></a>connsys_bus_disable_func</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, connsys_bus.o(i.connsys_bus_disable_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = connsys_bus_disable_func &rArr; connsys_bus_fn0_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_write_byte
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_close
</UL>

<P><STRONG><a name="[440]"></a>connsys_bus_enable_func</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, connsys_bus.o(i.connsys_bus_enable_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = connsys_bus_enable_func &rArr; connsys_bus_fn0_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_write_byte
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
</UL>

<P><STRONG><a name="[43e]"></a>connsys_bus_fn0_read_byte</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, connsys_bus.o(i.connsys_bus_fn0_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = connsys_bus_fn0_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_release_irq
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_get_irq
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_enable_func
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_disable_func
</UL>

<P><STRONG><a name="[43f]"></a>connsys_bus_fn0_write_byte</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, connsys_bus.o(i.connsys_bus_fn0_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = connsys_bus_fn0_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_set_block_size
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_release_irq
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_get_irq
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_enable_func
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_disable_func
</UL>

<P><STRONG><a name="[452]"></a>connsys_bus_get_bus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, connsys_bus.o(i.connsys_bus_get_bus))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_close
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>

<P><STRONG><a name="[443]"></a>connsys_bus_get_irq</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, connsys_bus.o(i.connsys_bus_get_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = connsys_bus_get_irq &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_write_byte
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
</UL>

<P><STRONG><a name="[444]"></a>connsys_bus_read_port</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, connsys_bus.o(i.connsys_bus_read_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = connsys_bus_read_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_pio
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_garbage
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_read
</UL>

<P><STRONG><a name="[446]"></a>connsys_bus_read_port_dma</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, connsys_bus.o(i.connsys_bus_read_port_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = connsys_bus_read_port_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port
</UL>

<P><STRONG><a name="[445]"></a>connsys_bus_read_port_garbage</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, connsys_bus.o(i.connsys_bus_read_port_garbage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = connsys_bus_read_port_garbage &rArr; connsys_bus_read_port_pio_garbage
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_pio_garbage
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_intr_enhance_mode_receive_one_data
</UL>

<P><STRONG><a name="[447]"></a>connsys_bus_read_port_pio</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, connsys_bus.o(i.connsys_bus_read_port_pio))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = connsys_bus_read_port_pio
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port
</UL>

<P><STRONG><a name="[448]"></a>connsys_bus_read_port_pio_garbage</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, connsys_bus.o(i.connsys_bus_read_port_pio_garbage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = connsys_bus_read_port_pio_garbage
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_garbage
</UL>

<P><STRONG><a name="[449]"></a>connsys_bus_readl</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, connsys_bus.o(i.connsys_bus_readl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = connsys_bus_readl
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>

<P><STRONG><a name="[453]"></a>connsys_bus_release_bus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, connsys_bus.o(i.connsys_bus_release_bus))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_close
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>

<P><STRONG><a name="[44a]"></a>connsys_bus_release_irq</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, connsys_bus.o(i.connsys_bus_release_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = connsys_bus_release_irq &rArr; connsys_bus_fn0_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_write_byte
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_close
</UL>

<P><STRONG><a name="[44b]"></a>connsys_bus_set_block_size</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, connsys_bus.o(i.connsys_bus_set_block_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = connsys_bus_set_block_size &rArr; connsys_bus_fn0_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
</UL>

<P><STRONG><a name="[44c]"></a>connsys_bus_write_port</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, connsys_bus.o(i.connsys_bus_write_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port_pio
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port_dma
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_write
</UL>

<P><STRONG><a name="[450]"></a>connsys_bus_writel</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, connsys_bus.o(i.connsys_bus_writel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
</UL>

<P><STRONG><a name="[451]"></a>connsys_close</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, connsys_driver.o(i.connsys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = connsys_close &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UnRegister
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_release_irq
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_release_bus
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_get_bus
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_disable_func
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
</UL>

<P><STRONG><a name="[43c]"></a>connsys_cr_read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, connsys_driver.o(i.connsys_cr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = connsys_cr_read &rArr; connsys_bus_readl
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_release_bus
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_readl
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_get_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_give_n9_own
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_get_own_enable_int
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_update_free_page_cnt
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_giveup_ownership
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_ownership
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_tx_int
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_rx_int
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_whier_dump_n9_int
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_enhance_mode
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_trx_int
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_dump_n9_int
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_abnormal_interrupt_check
</UL>

<P><STRONG><a name="[454]"></a>connsys_cr_write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, connsys_driver.o(i.connsys_cr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = connsys_cr_write &rArr; connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_writel
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_release_bus
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_get_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_give_n9_own
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_get_own_enable_int
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_giveup_ownership
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_ownership
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_tx_int
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_rx_int
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_whier_dump_n9_int
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_interrupt
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_enhance_mode
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_trx_int
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_dump_n9_int
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_interrupt
</UL>

<P><STRONG><a name="[469]"></a>connsys_create_inband_fw_scatter_txd_rom</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, connsys_util.o(i.connsys_create_inband_fw_scatter_txd_rom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = connsys_create_inband_fw_scatter_txd_rom
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fw_download_Tx_Scatter
</UL>

<P><STRONG><a name="[23]"></a>connsys_deliver_inband</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, inband_queue.o(i.connsys_deliver_inband))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = connsys_deliver_inband &rArr; inband_queue_evt_handler &rArr; inband_job_add &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[456]"></a>connsys_disable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, connsys_driver.o(i.connsys_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = connsys_disable_interrupt &rArr; connsys_cr_write &rArr; connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_irq_handler
</UL>

<P><STRONG><a name="[457]"></a>connsys_disable_whier_dump_n9_int</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connsys_driver.o(i.connsys_disable_whier_dump_n9_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = connsys_disable_whier_dump_n9_int &rArr; connsys_cr_write &rArr; connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_irq_handler
</UL>

<P><STRONG><a name="[45a]"></a>connsys_disable_whier_trx_int</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connsys_driver.o(i.connsys_disable_whier_trx_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = connsys_disable_whier_trx_int &rArr; connsys_cr_write &rArr; connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_irq_handler
</UL>

<P><STRONG><a name="[45b]"></a>connsys_dispatch</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, connsys_util.o(i.connsys_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = connsys_dispatch &rArr; check_raw_pkt_rssi_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_util_get_inf_number
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_raw_pkt_rssi_threshold
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_intr_enhance_mode_receive_one_data
</UL>

<P><STRONG><a name="[71]"></a>connsys_dma_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connsys_driver.o(i.connsys_dma_callback))
<BR>[Address Reference Count : 1]<UL><LI> connsys_driver.o(i.connsys_open)
</UL>
<P><STRONG><a name="[72]"></a>connsys_driver_interrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, connsys_driver.o(i.connsys_driver_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = connsys_driver_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connsys_driver.o(i.connsys_open)
</UL>
<P><STRONG><a name="[44f]"></a>connsys_dump_cmd53_info</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, connsys_bus.o(i.connsys_dump_cmd53_info))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_write_data
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port_pio
</UL>

<P><STRONG><a name="[6b1]"></a>connsys_dump_tx_scatter_info</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, connsys_bus.o(i.connsys_dump_tx_scatter_info))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
</UL>

<P><STRONG><a name="[45f]"></a>connsys_enable_enhance_mode</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, connsys_driver.o(i.connsys_enable_enhance_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = connsys_enable_enhance_mode &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
</UL>

<P><STRONG><a name="[460]"></a>connsys_enable_interrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, connsys_driver.o(i.connsys_enable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = connsys_enable_interrupt &rArr; connsys_cr_write &rArr; connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
</UL>

<P><STRONG><a name="[461]"></a>connsys_enable_whier_dump_n9_int</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connsys_driver.o(i.connsys_enable_whier_dump_n9_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = connsys_enable_whier_dump_n9_int &rArr; connsys_cr_write &rArr; connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
</UL>

<P><STRONG><a name="[462]"></a>connsys_enalbe_whier_rx_int</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connsys_driver.o(i.connsys_enalbe_whier_rx_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = connsys_enalbe_whier_rx_int &rArr; connsys_cr_write &rArr; connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
</UL>

<P><STRONG><a name="[463]"></a>connsys_enalbe_whier_tx_int</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connsys_driver.o(i.connsys_enalbe_whier_tx_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = connsys_enalbe_whier_tx_int &rArr; connsys_cr_write &rArr; connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
</UL>

<P><STRONG><a name="[464]"></a>connsys_fifo_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, connsys_driver.o(i.connsys_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = connsys_fifo_read &rArr; connsys_bus_read_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_intr_enhance_mode_receive_one_data
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
</UL>

<P><STRONG><a name="[465]"></a>connsys_fifo_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, connsys_driver.o(i.connsys_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_tx_data
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fw_download_Tx_Scatter
</UL>

<P><STRONG><a name="[466]"></a>connsys_fw_download_CmdAddressLenReq</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, connsys_util.o(i.connsys_fw_download_CmdAddressLenReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = connsys_fw_download_CmdAddressLenReq &rArr; connsys_util_create_inband_cmd_txd_rom
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_create_inband_cmd_txd_rom
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
</UL>

<P><STRONG><a name="[468]"></a>connsys_fw_download_Tx_Scatter</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, connsys_util.o(i.connsys_fw_download_Tx_Scatter))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = connsys_fw_download_Tx_Scatter &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_create_inband_fw_scatter_txd_rom
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_pda_download
</UL>

<P><STRONG><a name="[6b2]"></a>connsys_get_headroom_offset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, connsys_driver.o(i.connsys_get_headroom_offset))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
</UL>

<P><STRONG><a name="[481]"></a>connsys_get_ilm_image_info_from_flash</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, connsys_util.o(i.connsys_get_ilm_image_info_from_flash))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_direct_download
</UL>

<P><STRONG><a name="[70]"></a>connsys_get_ownership</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, connsys_driver.o(i.connsys_get_ownership))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = connsys_get_ownership &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_direct_download
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_download_body
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_give_n9_own
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_get_own_enable_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connsys_driver.o(i.connsys_open)
</UL>
<P><STRONG><a name="[46a]"></a>connsys_get_patch_semaphore</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, connsys_util.o(i.connsys_get_patch_semaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = connsys_get_patch_semaphore &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_patch_download_get_semaphore_event_check
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_create_inband_cmd_txd_rom
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_write
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_read
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_abnormal_interrupt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_download_body
</UL>

<P><STRONG><a name="[46c]"></a>connsys_giveup_ownership</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, connsys_driver.o(i.connsys_giveup_ownership))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = connsys_giveup_ownership &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
</UL>

<P><STRONG><a name="[46d]"></a>connsys_img_direct_download</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, connsys_util.o(i.connsys_img_direct_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = connsys_img_direct_download &rArr; connsys_pda_config &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_direct_download
</UL>

<P><STRONG><a name="[46f]"></a>connsys_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, connsys_driver.o(i.connsys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = connsys_init &rArr; connsys_util_firmware_download &rArr; connsys_util_patch_download &rArr; connsys_patch_download_body &rArr; connsys_download_wifi_profile &rArr; connsys_util_pda_download &rArr; connsys_pda_config &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_get_wic_wakeup
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_close
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_get_wic_status
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_firmware_download
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_set_wifi_profile
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_set_reserve_page_by_cr
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_set_headroom_offset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[476]"></a>connsys_intr_enhance_mode_receive_one_data</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, connsys_util.o(i.connsys_intr_enhance_mode_receive_one_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = connsys_intr_enhance_mode_receive_one_data &rArr; connsys_fifo_read &rArr; connsys_bus_read_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_garbage
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_dispatch
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_read
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
</UL>

<P><STRONG><a name="[73]"></a>connsys_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, connsys_driver.o(i.connsys_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = connsys_irq_handler &rArr; connsys_disable_whier_trx_int &rArr; connsys_cr_write &rArr; connsys_bus_writel
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_trx_int
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_dump_n9_int
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connsys_driver.o(i.connsys_open)
</UL>
<P><STRONG><a name="[471]"></a>connsys_open</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, connsys_driver.o(i.connsys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = connsys_open &rArr; connsys_bus_get_irq &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Register
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_set_block_size
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_release_bus
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_get_irq
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_get_bus
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_enable_func
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_init
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_giveup_ownership
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_ownership
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_enhance_mode
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
</UL>

<P><STRONG><a name="[478]"></a>connsys_patch_download_body</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, connsys_util.o(i.connsys_patch_download_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = connsys_patch_download_body &rArr; connsys_download_wifi_profile &rArr; connsys_util_pda_download &rArr; connsys_pda_config &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_pda_download
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_download_wifi_profile
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_ownership
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_patch_download
</UL>

<P><STRONG><a name="[479]"></a>connsys_patch_finish</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, connsys_util.o(i.connsys_patch_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = connsys_patch_finish &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_CmdAddressLenReq_event_check
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_create_inband_cmd_txd_rom
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_write
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_read
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_abnormal_interrupt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_download_body
</UL>

<P><STRONG><a name="[46e]"></a>connsys_pda_config</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, connsys_util.o(i.connsys_pda_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = connsys_pda_config &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_CmdAddressLenReq_event_check
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fw_download_CmdAddressLenReq
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_write
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_read
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_abnormal_interrupt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_pda_download
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_img_direct_download
</UL>

<P><STRONG><a name="[472]"></a>connsys_set_headroom_offset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, connsys_driver.o(i.connsys_set_headroom_offset))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
</UL>

<P><STRONG><a name="[473]"></a>connsys_set_wifi_profile</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connsys_util.o(i.connsys_set_wifi_profile))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
</UL>

<P><STRONG><a name="[47b]"></a>connsys_tx_flow_control_check_and_update_tx</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, connsys_driver.o(i.connsys_tx_flow_control_check_and_update_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = connsys_tx_flow_control_check_and_update_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
</UL>

<P><STRONG><a name="[477]"></a>connsys_tx_flow_control_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, connsys_driver.o(i.connsys_tx_flow_control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = connsys_tx_flow_control_init
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
</UL>

<P><STRONG><a name="[475]"></a>connsys_tx_flow_control_set_reserve_page_by_cr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, connsys_driver.o(i.connsys_tx_flow_control_set_reserve_page_by_cr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = connsys_tx_flow_control_set_reserve_page_by_cr
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_pse_get_p0_min_resv
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
</UL>

<P><STRONG><a name="[47d]"></a>connsys_tx_flow_control_update_free_page_cnt</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, connsys_driver.o(i.connsys_tx_flow_control_update_free_page_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = connsys_tx_flow_control_update_free_page_cnt &rArr; connsys_cr_read &rArr; connsys_bus_readl
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
</UL>

<P><STRONG><a name="[47e]"></a>connsys_tx_query_whisr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, connsys_util.o(i.connsys_tx_query_whisr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = connsys_tx_query_whisr &rArr; connsys_tx_flow_control_update_free_page_cnt &rArr; connsys_cr_read &rArr; connsys_bus_readl
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_update_free_page_cnt
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_tx_int
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_rx_int
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_whier_dump_n9_int
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_interrupt
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_trx_int
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_dump_n9_int
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_interrupt
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
</UL>

<P><STRONG><a name="[467]"></a>connsys_util_create_inband_cmd_txd_rom</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, connsys_util.o(i.connsys_util_create_inband_cmd_txd_rom))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = connsys_util_create_inband_cmd_txd_rom
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fw_download_CmdAddressLenReq
</UL>

<P><STRONG><a name="[474]"></a>connsys_util_firmware_download</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, connsys_util.o(i.connsys_util_firmware_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = connsys_util_firmware_download &rArr; connsys_util_patch_download &rArr; connsys_patch_download_body &rArr; connsys_download_wifi_profile &rArr; connsys_util_pda_download &rArr; connsys_pda_config &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_patch_download
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_direct_download
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
</UL>

<P><STRONG><a name="[480]"></a>connsys_util_fw_direct_download</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, connsys_util.o(i.connsys_util_fw_direct_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = connsys_util_fw_direct_download &rArr; connsys_img_direct_download &rArr; connsys_pda_config &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_pda_download
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_img_direct_download
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_ilm_image_info_from_flash
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_ownership
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_firmware_download
</UL>

<P><STRONG><a name="[47a]"></a>connsys_util_fw_download_CmdAddressLenReq_event_check</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, connsys_util.o(i.connsys_util_fw_download_CmdAddressLenReq_event_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = connsys_util_fw_download_CmdAddressLenReq_event_check &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
</UL>

<P><STRONG><a name="[482]"></a>connsys_util_fw_download_done</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, connsys_util.o(i.connsys_util_fw_download_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = connsys_util_fw_download_done &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_CmdAddressLenReq_event_check
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_create_inband_cmd_txd_rom
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_write
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_read
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_abnormal_interrupt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_direct_download
</UL>

<P><STRONG><a name="[6d]"></a>connsys_util_intr_enhance_mode_receive_data</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, connsys_util.o(i.connsys_util_intr_enhance_mode_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = connsys_util_intr_enhance_mode_receive_data &rArr; connsys_intr_enhance_mode_receive_one_data &rArr; connsys_fifo_read &rArr; connsys_bus_read_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_intr_enhance_mode_receive_one_data
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_update_free_page_cnt
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_tx_int
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_rx_int
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_whier_dump_n9_int
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_interrupt
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_trx_int
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_dump_n9_int
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_interrupt
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connsys_driver.o(i.connsys_driver_interrupt)
</UL>
<P><STRONG><a name="[47f]"></a>connsys_util_patch_download</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, connsys_util.o(i.connsys_util_patch_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = connsys_util_patch_download &rArr; connsys_patch_download_body &rArr; connsys_download_wifi_profile &rArr; connsys_util_pda_download &rArr; connsys_pda_config &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_download_body
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_firmware_download
</UL>

<P><STRONG><a name="[46b]"></a>connsys_util_patch_download_get_semaphore_event_check</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, connsys_util.o(i.connsys_util_patch_download_get_semaphore_event_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = connsys_util_patch_download_get_semaphore_event_check &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
</UL>

<P><STRONG><a name="[45e]"></a>connsys_util_pda_download</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, connsys_util.o(i.connsys_util_pda_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = connsys_util_pda_download &rArr; connsys_pda_config &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fw_download_Tx_Scatter
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_direct_download
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_download_body
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_download_wifi_profile
</UL>

<P><STRONG><a name="[47c]"></a>connsys_util_pse_get_p0_min_resv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, connsys_util.o(i.connsys_util_pse_get_p0_min_resv))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_set_reserve_page_by_cr
</UL>

<P><STRONG><a name="[483]"></a>connsys_util_tx_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, connsys_util.o(i.connsys_util_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
</UL>

<P><STRONG><a name="[484]"></a>connsys_write_data</STRONG> (Thumb, 778 bytes, Stack size 72 bytes, connsys_bus.o(i.connsys_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = connsys_write_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_dump_cmd53_info
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
</UL>

<P><STRONG><a name="[485]"></a>convert_pem_to_der</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, aws_dev_mode_key_provisioning.o(i.convert_pem_to_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = convert_pem_to_der &rArr; mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionDevice
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionCertificate
</UL>

<P><STRONG><a name="[217]"></a>customer_flash_read_SR2_comand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_flash_read_SR2_comand))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2 (via Veneer)
</UL>

<P><STRONG><a name="[1d9]"></a>customer_flash_register</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_flash_register))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config (via Veneer)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode (via Veneer)
</UL>

<P><STRONG><a name="[1f3]"></a>customer_flash_suspend_bit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_flash_suspend_bit))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady (via Veneer)
</UL>

<P><STRONG><a name="[20a]"></a>customer_switch_spi_mode_command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_switch_spi_mode_command), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode (via Veneer)
</UL>

<P><STRONG><a name="[20b]"></a>customer_switch_spiq_mode_command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_switch_spiq_mode_command), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode (via Veneer)
</UL>

<P><STRONG><a name="[48a]"></a>delay_time</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.delay_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTCRWrite
</UL>

<P><STRONG><a name="[17c]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>dhcp_fine_tmr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[4b0]"></a>dhcp_network_changed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[3ad]"></a>dhcp_release</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_down
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[4b8]"></a>dhcp_renew</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[3b2]"></a>dhcp_start</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_up
</UL>

<P><STRONG><a name="[3ae]"></a>dhcp_stop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dhcp_stop &rArr; dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_down
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[4b7]"></a>dhcp_supplied_address</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_supplied_address))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[4ba]"></a>dhcpd_find_alloc_info_by_mac</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dhcpd.o(i.dhcpd_find_alloc_info_by_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcpd_find_alloc_info_by_mac &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_wifi_api_rx_event_handler
</UL>

<P><STRONG><a name="[4c4]"></a>dhcpd_insert_alloc_info_into_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dhcpd.o(i.dhcpd_insert_alloc_info_into_list))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_wifi_api_rx_event_handler
</UL>

<P><STRONG><a name="[4bf]"></a>dhcpd_release_alloc_info_lists</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dhcpd.o(i.dhcpd_release_alloc_info_lists))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dhcpd_release_alloc_info_lists &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_stop
</UL>

<P><STRONG><a name="[4c3]"></a>dhcpd_remove_alloc_info_from_list</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dhcpd.o(i.dhcpd_remove_alloc_info_from_list))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_wifi_api_rx_event_handler
</UL>

<P><STRONG><a name="[3aa]"></a>dhcpd_stop</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dhcpd.o(i.dhcpd_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcpd_stop &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_unregister_event_notifier
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_release_alloc_info_lists
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_mutex_unlock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_mutex_lock
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_ap_ip_down
</UL>

<P><STRONG><a name="[96d]"></a>dma_enable_clock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_pdma_internal.o(i.dma_enable_clock))
<BR><BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
</UL>

<P><STRONG><a name="[106]"></a>dma_interrupt_hander</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, hal_pdma_internal.o(i.dma_interrupt_hander))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dma_interrupt_hander
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pdma_internal.o(i.vdma_init)
</UL>
<P><STRONG><a name="[4d5]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, dns.o(i.dns_gethostbyname_addrtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[6c1]"></a>dns_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dns.o(i.dns_init))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4a7]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[17e]"></a>dns_tmr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[4e7]"></a>drvGPT2Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(i.drvGPT2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drvGPT2Init &rArr; CM4_GPT2Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTCRWrite
</UL>

<P><STRONG><a name="[4eb]"></a>eap_get_id</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eap_common.o(i.eap_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eap_get_id
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_req
</UL>

<P><STRONG><a name="[511]"></a>eap_get_interface</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eap_server.o(i.eap_get_interface))
<BR><BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_alloc
</UL>

<P><STRONG><a name="[4ee]"></a>eap_get_type</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eap_common.o(i.eap_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eap_get_type
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_req
</UL>

<P><STRONG><a name="[4ef]"></a>eap_hdr_validate</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, eap_common.o(i.eap_hdr_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eap_hdr_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_process
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_check
</UL>

<P><STRONG><a name="[4f0]"></a>eap_msg_alloc</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, eap_common.o(i.eap_msg_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = eap_msg_alloc &rArr; wpabuf_put_u8 &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_buildReq
</UL>

<P><STRONG><a name="[4f5]"></a>eap_register_methods</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eap_register.o(i.eap_register_methods))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eap_register_methods &rArr; eap_server_identity_register &rArr; eap_server_method_alloc &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_identity_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[4f7]"></a>eap_server_clear_identity</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eap_server.o(i.eap_server_clear_identity))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eap_server_clear_identity &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
</UL>

<P><STRONG><a name="[8ab]"></a>eap_server_get_eap_method</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, eap_server_methods.o(i.eap_server_get_eap_method))
<BR><BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_PROPOSE_METHOD_Enter
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_PICK_UP_METHOD_Enter
</UL>

<P><STRONG><a name="[5d6]"></a>eap_server_get_name</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, eap_server_methods.o(i.eap_server_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_eap_response
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_HELD_Enter
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_AUTHENTICATED_Enter
</UL>

<P><STRONG><a name="[4f6]"></a>eap_server_identity_register</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, eap_server_identity.o(i.eap_server_identity_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eap_server_identity_register &rArr; eap_server_method_alloc &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_method_register
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_method_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_method_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_register_methods
</UL>

<P><STRONG><a name="[4f8]"></a>eap_server_method_alloc</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, eap_server_methods.o(i.eap_server_method_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = eap_server_method_alloc &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_identity_register
</UL>

<P><STRONG><a name="[4fa]"></a>eap_server_method_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eap_server_methods.o(i.eap_server_method_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eap_server_method_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_unregister_methods
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_identity_register
</UL>

<P><STRONG><a name="[4f9]"></a>eap_server_method_register</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, eap_server_methods.o(i.eap_server_method_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eap_server_method_register &rArr; os_strcmp &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_identity_register
</UL>

<P><STRONG><a name="[4fc]"></a>eap_server_sm_deinit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, eap_server.o(i.eap_server_sm_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eap_server_sm_deinit &rArr; wpabuf_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_user_free
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_free
</UL>

<P><STRONG><a name="[4fe]"></a>eap_server_sm_init</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, eap_server.o(i.eap_server_sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = eap_server_sm_init &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_strdup
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_alloc
</UL>

<P><STRONG><a name="[500]"></a>eap_server_sm_step</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eap_server.o(i.eap_server_sm_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = eap_server_sm_step &rArr; sm_EAP_Step &rArr; sm_EAP_SUCCESS2_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>

<P><STRONG><a name="[502]"></a>eap_server_unregister_methods</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eap_server_methods.o(i.eap_server_unregister_methods))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eap_server_unregister_methods &rArr; eap_server_method_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_method_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
</UL>

<P><STRONG><a name="[659]"></a>eap_sm_notify_cached</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eap_server.o(i.eap_sm_notify_cached))
<BR><BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
</UL>

<P><STRONG><a name="[506]"></a>eap_sm_process_nak</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, eap_server.o(i.eap_sm_process_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = eap_sm_process_nak &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memmove
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_Policy_update
</UL>

<P><STRONG><a name="[504]"></a>eap_user_get</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, eap_server.o(i.eap_user_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eap_user_get &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_user_free
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_Policy_getDecision
</UL>

<P><STRONG><a name="[50f]"></a>eapol_auth_alloc</STRONG> (Thumb, 342 bytes, Stack size 120 bytes, eapol_auth_sm.o(i.eapol_auth_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = eapol_auth_alloc &rArr; eapol_auth_initialize &rArr; eapol_sm_step_run &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_free
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_init
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_interface
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_alloc_eapol_sm
</UL>

<P><STRONG><a name="[515]"></a>eapol_auth_deinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eapol_auth_sm.o(i.eapol_auth_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eapol_auth_deinit &rArr; eapol_auth_conf_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_conf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_deinit
</UL>

<P><STRONG><a name="[510]"></a>eapol_auth_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eapol_auth_sm.o(i.eapol_auth_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eapol_auth_free &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_alloc
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_free_station
</UL>

<P><STRONG><a name="[516]"></a>eapol_auth_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.eapol_auth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eapol_auth_init &rArr; eapol_auth_conf_clone &rArr; os_mem_strdup &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_conf_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_init
</UL>

<P><STRONG><a name="[518]"></a>eapol_auth_step</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.eapol_auth_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_sta_key_available
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_notify_port_valid
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_notify_port_enabled
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>

<P><STRONG><a name="[40b]"></a>eloop_cancel_timeout</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, eloop.o(i.eloop_cancel_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_timeout
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_deinit
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_sched_scan
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_scan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_deinit
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_process_drv_event
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deinit
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_connection_failed
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassociate
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_free
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_deinit
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_deinit
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_set_expiration
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_initialize
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_deinit
</UL>

<P><STRONG><a name="[55a]"></a>eloop_destroy</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, eloop.o(i.eloop_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eloop_destroy &rArr; eloop_sock_table_destroy &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_sock_table_destroy
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
</UL>

<P><STRONG><a name="[55d]"></a>eloop_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eloop.o(i.eloop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eloop_init &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[ac5]"></a>eloop_is_timeout_registered</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eloop.o(i.eloop_is_timeout_registered))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eloop_is_timeout_registered
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
</UL>

<P><STRONG><a name="[55e]"></a>eloop_register_read_sock</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, eloop.o(i.eloop_register_read_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = eloop_register_read_sock &rArr; eloop_register_sock &rArr; eloop_sock_table_add_sock &rArr; os_mem_realloc &rArr; pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_sock
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
</UL>

<P><STRONG><a name="[55f]"></a>eloop_register_sock</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, eloop.o(i.eloop_register_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = eloop_register_sock &rArr; eloop_sock_table_add_sock &rArr; os_mem_realloc &rArr; pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_sock_table_add_sock
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_get_sock_table
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_read_sock
</UL>

<P><STRONG><a name="[413]"></a>eloop_register_timeout</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, eloop.o(i.eloop_register_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_timeout
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_scan
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_delayed_sched_scan
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassociate
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_notify
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_step
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gmk
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_set_expiration
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_port_timers_tick
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_initialize
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[564]"></a>eloop_run</STRONG> (Thumb, 470 bytes, Stack size 64 bytes, eloop.o(i.eloop_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = eloop_run &rArr; lwip_select &rArr; lwip_selscan &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_sock_table_set_fds
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_sock_table_dispatch
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_process_pending_signals
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_run
</UL>

<P><STRONG><a name="[633]"></a>eloop_terminate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eloop.o(i.eloop_terminate))
<BR><BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
</UL>

<P><STRONG><a name="[56d]"></a>eloop_unregister_read_sock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eloop.o(i.eloop_unregister_read_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eloop_unregister_read_sock &rArr; eloop_unregister_sock &rArr; eloop_sock_table_remove_sock &rArr; os_memmove &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_unregister_sock
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_deinit
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_deinit
</UL>

<P><STRONG><a name="[56e]"></a>eloop_unregister_sock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, eloop.o(i.eloop_unregister_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eloop_unregister_sock &rArr; eloop_sock_table_remove_sock &rArr; os_memmove &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_sock_table_remove_sock
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_get_sock_table
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_unregister_read_sock
</UL>

<P><STRONG><a name="[21]"></a>enqueue_bottom_half_from_isr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ethernetif.o(i.enqueue_bottom_half_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = enqueue_bottom_half_from_isr &rArr; NetJobAddFromISR &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetJobAddFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[6b3]"></a>err_to_errno</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, err.o(i.err_to_errno))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[577]"></a>etharp_input</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = etharp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[86]"></a>etharp_output</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ethernetif.o(i.ethernetif_init1)
<LI> ethernetif.o(i.ethernetif_init2)
</UL>
<P><STRONG><a name="[57c]"></a>etharp_query</STRONG> (Thumb, 628 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[57e]"></a>etharp_request</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[17b]"></a>etharp_tmr</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>ethernet_input</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[57d]"></a>ethernet_output</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ethernet_output &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[585]"></a>ethernet_raw_pkt_sender</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ethernetif.o(i.ethernet_raw_pkt_sender))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ethernet_raw_pkt_sender &rArr; low_level_output_scatter &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_hapd_send_eapol
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_send
</UL>

<P><STRONG><a name="[1f]"></a>ethernetif_free_pkt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_free_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ethernetif_free_pkt &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[586]"></a>ethernetif_init</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_mac_address
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_set_mac_addr
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init_callback
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tcpip_init
</UL>

<P><STRONG><a name="[85]"></a>ethernetif_init1</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ethernetif_init1 &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[84]"></a>ethernetif_init2</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_init2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ethernetif_init2 &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[587]"></a>ethernetif_init_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethernetif_init_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[1e]"></a>ethernetif_intr_enhance_mode_allocate_pkt_callback</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ethernetif.o(i.ethernetif_intr_enhance_mode_allocate_pkt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ethernetif_intr_enhance_mode_allocate_pkt_callback &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[58f]"></a>ethernetif_intr_enhance_mode_dispatch</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, ethernetif.o(i.ethernetif_intr_enhance_mode_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ethernetif_intr_enhance_mode_dispatch &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_deliver_tcpip
</UL>

<P><STRONG><a name="[a84]"></a>event_to_string</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, driver_common.o(i.event_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[1d0]"></a>exception_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, exception_handler.o(i.exception_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>

<P><STRONG><a name="[591]"></a>fgets</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fgets.o(i.fgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fgets
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk
</UL>

<P><STRONG><a name="[593]"></a>flash_sfc_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, flash_sfc.o(i.flash_sfc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = flash_sfc_write &rArr; flash_write &rArr; flash_write_enable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_enable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_disable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_sf_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</UL>

<P><STRONG><a name="[4e]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, io_def.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fputc &rArr; io_def_uart_putchar &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[595]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fputs &rArr; fputc &rArr; io_def_uart_putchar &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[597]"></a>free_sf_lock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, flash_sfc.o(i.free_sf_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free_sf_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_sf_lock
</UL>

<P><STRONG><a name="[9af]"></a>get_cent_ch_by_htinfo</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, wifi_scan.o(i.get_cent_ch_by_htinfo))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
</UL>

<P><STRONG><a name="[48b]"></a>get_current_count</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.get_current_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[5a2]"></a>get_current_gpt4_count</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.get_current_gpt4_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_current_gpt4_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[437]"></a>get_rx_vector</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, connsys_util.o(i.get_rx_vector))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_raw_pkt_rssi_threshold
</UL>

<P><STRONG><a name="[5a3]"></a>get_sf_lock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flash_sfc.o(i.get_sf_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sf_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock
</UL>

<P><STRONG><a name="[42c]"></a>gpio_ies_init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_ies_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_ies_init
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[42a]"></a>gpio_mode_init</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, bsp_gpio_ept_config.o(i.gpio_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_mode_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[42b]"></a>gpio_oe_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_oe_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_oe_init
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[42f]"></a>gpio_output_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_output_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[42e]"></a>gpio_pull_down_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_pull_down_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pull_down_init
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[42d]"></a>gpio_pull_up_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_pull_up_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pull_up_init
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[9b1]"></a>guery_config_ssid</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, wifi_scan.o(i.guery_config_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = guery_config_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
</UL>

<P><STRONG><a name="[5a4]"></a>halWDTCRWrite</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, low_hal_wdt.o(i.halWDTCRWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = halWDTCRWrite &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvGPT2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTSoftwareReset
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTConfig
</UL>

<P><STRONG><a name="[5a5]"></a>halWDTConfig</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, low_hal_wdt.o(i.halWDTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = halWDTConfig &rArr; halWDTCRWrite &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_read
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTCRWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sys_reboot
</UL>

<P><STRONG><a name="[5a7]"></a>halWDTSoftwareReset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, low_hal_wdt.o(i.halWDTSoftwareReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = halWDTSoftwareReset &rArr; halWDTCRWrite &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_read
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTCRWrite
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_LISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sys_reboot
</UL>

<P><STRONG><a name="[981]"></a>hal_cache_deinit</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cf_credential_handler
</UL>

<P><STRONG><a name="[1e4]"></a>hal_cache_disable</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_disable))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cf_credential_handler
</UL>

<P><STRONG><a name="[1e7]"></a>hal_cache_enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_enable))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
</UL>

<P><STRONG><a name="[431]"></a>hal_cache_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hal_cache.o(i.hal_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_cache_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
</UL>

<P><STRONG><a name="[1e3]"></a>hal_cache_invalidate_all_cache_lines</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_cache.o(i.hal_cache_invalidate_all_cache_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_cache_invalidate_all_cache_lines
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
</UL>

<P><STRONG><a name="[433]"></a>hal_cache_region_config</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, hal_cache.o(i.hal_cache_region_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_cache_region_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
</UL>

<P><STRONG><a name="[435]"></a>hal_cache_region_disable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_region_disable))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
</UL>

<P><STRONG><a name="[434]"></a>hal_cache_region_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_region_enable))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
</UL>

<P><STRONG><a name="[432]"></a>hal_cache_set_size</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
</UL>

<P><STRONG><a name="[5a6]"></a>hal_efuse_read</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, hal_efuse.o(i.hal_efuse_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hal_efuse_read &rArr; SYSefuse_Read16Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSefuse_Read16Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTSoftwareReset
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTConfig
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac_addr_from_efuse
</UL>

<P><STRONG><a name="[31c]"></a>hal_file_find</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hal_file.o(i.hal_file_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_file_find &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_write
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_read
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_FindObject
</UL>

<P><STRONG><a name="[5a9]"></a>hal_file_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_file.o(i.hal_file_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_file_init &rArr; hal_flash_read &rArr; hal_flash_direct_read &rArr; retrieve_sf_lock &rArr; get_sf_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[31e]"></a>hal_file_read</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hal_file.o(i.hal_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_file_read &rArr; hal_flash_read &rArr; hal_flash_direct_read &rArr; retrieve_sf_lock &rArr; get_sf_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_find
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
</UL>

<P><STRONG><a name="[31f]"></a>hal_file_write</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, hal_file.o(i.hal_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = hal_file_write &rArr; hal_flash_write &rArr; flash_sfc_write &rArr; flash_write &rArr; flash_write_enable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_find
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_SaveObject
</UL>

<P><STRONG><a name="[5ab]"></a>hal_flash_erase</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hal_flash.o(i.hal_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = hal_flash_erase &rArr; flash_sfc_erase &rArr; flash_erase_sector_32k &rArr; flash_write_disable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_write
</UL>

<P><STRONG><a name="[5ad]"></a>hal_flash_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_flash.o(i.hal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_flash_init &rArr; flash_sfc_config &rArr; flash_check_device &rArr; flash_read_jedec_id &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[5aa]"></a>hal_flash_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hal_flash.o(i.hal_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_flash_read &rArr; hal_flash_direct_read &rArr; retrieve_sf_lock &rArr; get_sf_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_direct_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_read
</UL>

<P><STRONG><a name="[5ac]"></a>hal_flash_write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hal_flash.o(i.hal_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = hal_flash_write &rArr; flash_sfc_write &rArr; flash_write &rArr; flash_write_enable &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_write
</UL>

<P><STRONG><a name="[1d5]"></a>hal_gpt_get_free_run_count</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, hal_gpt.o(i.hal_gpt_get_free_run_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_gpt4_count
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_current_time (via Veneer)
</UL>

<P><STRONG><a name="[27]"></a>hal_lp_get_wic_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_lp.o(i.hal_lp_get_wic_status))
<BR><BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[470]"></a>hal_lp_get_wic_wakeup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_lp.o(i.hal_lp_get_wic_wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
</UL>

<P><STRONG><a name="[5ae]"></a>hal_lp_handle_intr</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hal_lp.o(i.hal_lp_handle_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_lp_handle_intr &rArr; hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[867]"></a>hal_lp_set_gpio_sleep_mode</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, hal_lp.o(i.hal_lp_set_gpio_sleep_mode))
<BR><BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMiscInitialization
</UL>

<P><STRONG><a name="[294]"></a>hal_nvic_register_isr_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_nvic.o(i.hal_nvic_register_isr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_handle_intr
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTConfig
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>

<P><STRONG><a name="[5af]"></a>hal_sleep_manager_get_lock_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_sleep_manager.o(i.hal_sleep_manager_get_lock_status))
<BR><BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_lock_index
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sleep_manager_get_lock_status
</UL>

<P><STRONG><a name="[5b1]"></a>hal_sleep_manager_lock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_lock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_lock_sleep
</UL>

<P><STRONG><a name="[5b3]"></a>hal_sleep_manager_release_sleep_handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_release_sleep_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_sleep_manager_release_sleep_handle &rArr; sleepdrv_release_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_handle
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_lock_index
</UL>
<BR>[Called By]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_release_sleep_handle
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
</UL>

<P><STRONG><a name="[5b5]"></a>hal_sleep_manager_set_sleep_handle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_set_sleep_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task_init
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_sleep_handle
</UL>

<P><STRONG><a name="[5b7]"></a>hal_sleep_manager_unlock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_unlock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_unlock_sleep_all
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_unlock_sleep
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
</UL>

<P><STRONG><a name="[5b9]"></a>hal_sys_reboot</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_sys.o(i.hal_sys_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_sys_reboot &rArr; halWDTConfig &rArr; halWDTCRWrite &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTSoftwareReset
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWDTConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cf_credential_handler
</UL>

<P><STRONG><a name="[3a8]"></a>hal_trng_get_generated_random_number</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hal_trng.o(i.hal_trng_get_generated_random_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_trng_get_generated_random_number &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_sys_random_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>

<P><STRONG><a name="[3a7]"></a>hal_trng_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_trng.o(i.hal_trng_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_sys_random_init
</UL>

<P><STRONG><a name="[5ba]"></a>hal_uart_init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, hal_uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hal_uart_init &rArr; uart_set_baudrate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_sleep_mode
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_format
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_fifo
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset_default_value
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_is_valid
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_init
</UL>

<P><STRONG><a name="[5c2]"></a>hal_uart_register_callback</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, hal_uart.o(i.hal_uart_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_uart_register_callback &rArr; uart_start_dma_transmission &rArr; vdma_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_register_callback
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_register_timeout_callback
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_channel_to_callback_data
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_init
</UL>

<P><STRONG><a name="[5c8]"></a>hal_uart_send_dma</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, hal_uart.o(i.hal_uart_send_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_enable_interrupt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_push_data
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_send_space
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_putchar
</UL>

<P><STRONG><a name="[5cc]"></a>hal_uart_set_dma</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, hal_uart.o(i.hal_uart_set_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_uart_set_dma &rArr; vdma_init &rArr; hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_threshold
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_configure
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_alert_length
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma_timeout
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_init
</UL>

<P><STRONG><a name="[5d0]"></a>hal_uart_set_dma_timeout</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, hal_uart.o(i.hal_uart_set_dma_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_uart_set_dma_timeout &rArr; vdma_set_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_timeout
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_translate_timeout
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[34f]"></a>handshake_clear</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, aws_wifi.o(i.handshake_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = handshake_clear &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[39c]"></a>handshake_create</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, aws_wifi.o(i.handshake_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = handshake_create &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_bootstrap
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_init
</UL>

<P><STRONG><a name="[3a5]"></a>handshake_give</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, aws_wifi.o(i.handshake_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = handshake_give &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_portfail_cbk
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_port_secure_cbk
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_init_done_cbk
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_disconnect_cbk
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_ready_callback
</UL>

<P><STRONG><a name="[3af]"></a>handshake_take</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, aws_wifi.o(i.handshake_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = handshake_take &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_is_ready
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_take_and_free
</UL>

<P><STRONG><a name="[3bc]"></a>handshake_take_and_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aws_wifi.o(i.handshake_take_and_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = handshake_take_and_free &rArr; handshake_take &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_take
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_bootstrap
</UL>

<P><STRONG><a name="[5d8]"></a>hex2byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, common.o(i.hex2byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hex2byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2num
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
</UL>

<P><STRONG><a name="[5da]"></a>hexstr2bin</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, common.o(i.hexstr2bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hexstr2bin &rArr; hex2byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_wpapsk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_calculate_pmk
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk
</UL>

<P><STRONG><a name="[5db]"></a>hmac_md5</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, md5.o(i.hmac_md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = hmac_md5 &rArr; hmac_md5_vector &rArr; md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
</UL>

<P><STRONG><a name="[5dc]"></a>hmac_md5_vector</STRONG> (Thumb, 232 bytes, Stack size 168 bytes, md5.o(i.hmac_md5_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = hmac_md5_vector &rArr; md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>

<P><STRONG><a name="[5de]"></a>hostapd_acl_deinit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ieee802_11_auth.o(i.hostapd_acl_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hostapd_acl_deinit &rArr; hostapd_acl_query_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_acl_query_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup
</UL>

<P><STRONG><a name="[62a]"></a>hostapd_acl_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802_11_auth.o(i.hostapd_acl_init))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[5e0]"></a>hostapd_alloc_bss_data</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, hostapd.o(i.hostapd_alloc_bss_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hostapd_alloc_bss_data &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
</UL>

<P><STRONG><a name="[5e6]"></a>hostapd_build_ap_extra_ies</STRONG> (Thumb, 358 bytes, Stack size 240 bytes, ap_drv_ops.o(i.hostapd_build_ap_extra_ies))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_time_zone
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_time_adv
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_roaming_consortium
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_interworking
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ext_capab
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_adv_proto
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[5f6]"></a>hostapd_config_defaults</STRONG> (Thumb, 342 bytes, Stack size 168 bytes, ap_config.o(i.hostapd_config_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = hostapd_config_defaults &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults_bss
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
</UL>

<P><STRONG><a name="[5f7]"></a>hostapd_config_defaults_bss</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ap_config.o(i.hostapd_config_defaults_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hostapd_config_defaults_bss &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
</UL>

<P><STRONG><a name="[5f5]"></a>hostapd_config_free</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ap_config.o(i.hostapd_config_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hostapd_config_free &rArr; hostapd_config_free_bss &rArr; hostapd_config_free_wep &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup_iface
</UL>

<P><STRONG><a name="[5f1]"></a>hostapd_deinit_wpa</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, wpa_auth_glue.o(i.hostapd_deinit_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hostapd_deinit_wpa &rArr; wpa_deinit &rArr; pmksa_cache_auth_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_privacy
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_generic_elem
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_deinit
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup
</UL>

<P><STRONG><a name="[637]"></a>hostapd_driver_commit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ap_drv_ops.o(i.hostapd_driver_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hostapd_driver_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
</UL>

<P><STRONG><a name="[606]"></a>hostapd_drv_none</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ap_drv_ops.o(i.hostapd_drv_none))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hostapd_drv_none &rArr; os_strcmp &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_validate_bssid_configuration
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>

<P><STRONG><a name="[5e2]"></a>hostapd_drv_set_key</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, ap_drv_ops.o(i.hostapd_drv_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hostapd_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_init
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_encryption
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_broadcast_wep_set
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_broadcast_key_clear_iface
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_set_key
</UL>

<P><STRONG><a name="[412]"></a>hostapd_drv_sta_deauth</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ap_drv_ops.o(i.hostapd_drv_sta_deauth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hostapd_drv_sta_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_session_timer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>

<P><STRONG><a name="[414]"></a>hostapd_drv_sta_disassoc</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ap_drv_ops.o(i.hostapd_drv_sta_disassoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hostapd_drv_sta_disassoc
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_sta_low_ack
</UL>

<P><STRONG><a name="[5ed]"></a>hostapd_eid_adv_proto</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802_11_shared.o(i.hostapd_eid_adv_proto))
<BR><BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>

<P><STRONG><a name="[5eb]"></a>hostapd_eid_ext_capab</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, ieee802_11_shared.o(i.hostapd_eid_ext_capab))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hostapd_eid_ext_capab
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>

<P><STRONG><a name="[5ec]"></a>hostapd_eid_interworking</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802_11_shared.o(i.hostapd_eid_interworking))
<BR><BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>

<P><STRONG><a name="[5ee]"></a>hostapd_eid_roaming_consortium</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802_11_shared.o(i.hostapd_eid_roaming_consortium))
<BR><BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>

<P><STRONG><a name="[5e7]"></a>hostapd_eid_time_adv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ieee802_11_shared.o(i.hostapd_eid_time_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_update_time_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>

<P><STRONG><a name="[5ea]"></a>hostapd_eid_time_zone</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ieee802_11_shared.o(i.hostapd_eid_time_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hostapd_eid_time_zone &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>

<P><STRONG><a name="[608]"></a>hostapd_event_sta_low_ack</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, drv_callbacks.o(i.hostapd_event_sta_low_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hostapd_event_sta_low_ack &rArr; ap_sta_disassociate &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassociate
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[60a]"></a>hostapd_flush</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ap_drv_ops.o(i.hostapd_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hostapd_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>

<P><STRONG><a name="[60c]"></a>hostapd_free_ap_extra_ies</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ap_drv_ops.o(i.hostapd_free_ap_extra_ies))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hostapd_free_ap_extra_ies &rArr; wpabuf_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[60b]"></a>hostapd_free_stas</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sta_info.o(i.hostapd_free_stas))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>

<P><STRONG><a name="[60d]"></a>hostapd_get_eap_user</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ap_config.o(i.hostapd_get_eap_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hostapd_get_eap_user &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_get_eap_user
</UL>

<P><STRONG><a name="[60e]"></a>hostapd_get_psk</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ap_config.o(i.hostapd_get_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hostapd_get_psk &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_get_psk
</UL>

<P><STRONG><a name="[63f]"></a>hostapd_get_seqnum</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ap_drv_ops.o(i.hostapd_get_seqnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hostapd_get_seqnum
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_get_seqnum
</UL>

<P><STRONG><a name="[627]"></a>hostapd_get_ssid</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ap_drv_ops.o(i.hostapd_get_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_get_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[5e5]"></a>hostapd_get_vlan_id_ifname</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ap_config.o(i.hostapd_get_vlan_id_ifname))
<BR><BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_broadcast_wep_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_set_key
</UL>

<P><STRONG><a name="[625]"></a>hostapd_if_add</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, ap_drv_ops.o(i.hostapd_if_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hostapd_if_add
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[5f3]"></a>hostapd_if_remove</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ap_drv_ops.o(i.hostapd_if_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_if_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup
</UL>

<P><STRONG><a name="[60f]"></a>hostapd_interface_deinit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hostapd.o(i.hostapd_interface_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup_iface_pre
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ap_deinit
</UL>

<P><STRONG><a name="[611]"></a>hostapd_interface_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hostapd.o(i.hostapd_interface_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hostapd_interface_free &rArr; hostapd_cleanup_iface &rArr; hostapd_config_free &rArr; hostapd_config_free_bss &rArr; hostapd_config_free_wep &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ap_deinit
</UL>

<P><STRONG><a name="[411]"></a>hostapd_logger</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, wpa_debug.o(i.hostapd_logger))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hostapd_logger &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_logger
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_finished
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_eap_response
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_session_timer
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_abort_auth
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_disassoc
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_sta_low_ack
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_michaelmicfailure_indication
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_stop
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_logger
</UL>

<P><STRONG><a name="[612]"></a>hostapd_mac_comp</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ap_config.o(i.hostapd_mac_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hostapd_mac_comp &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_in_conf
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[613]"></a>hostapd_mac_comp_empty</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ap_config.o(i.hostapd_mac_comp_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hostapd_mac_comp_empty &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_validate_bssid_configuration
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[8d]"></a>hostapd_new_assoc_sta</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hostapd.o(i.hostapd_new_assoc_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = hostapd_new_assoc_sta &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_prune_associations
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostapd.o(i.hostapd_alloc_bss_data)
</UL>
<P><STRONG><a name="[617]"></a>hostapd_notif_assoc</STRONG> (Thumb, 604 bytes, Stack size 192 bytes, drv_callbacks.o(i.hostapd_notif_assoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = hostapd_notif_assoc &rArr; ap_sta_add &rArr; ap_sta_remove_in_other_bss &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_notify_port_enabled
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[61b]"></a>hostapd_notif_disassoc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, drv_callbacks.o(i.hostapd_notif_disassoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = hostapd_notif_disassoc &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_notify_port_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a93]"></a>hostapd_probe_req_rx</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, drv_callbacks.o(i.hostapd_probe_req_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hostapd_probe_req_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[614]"></a>hostapd_prune_associations</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, utils.o(i.hostapd_prune_associations))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hostapd_prune_associations
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
</UL>

<P><STRONG><a name="[61c]"></a>hostapd_register_probereq_cb</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, utils.o(i.hostapd_register_probereq_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hostapd_register_probereq_cb &rArr; os_mem_realloc &rArr; pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
</UL>

<P><STRONG><a name="[61d]"></a>hostapd_set_authorized</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ap_drv_ops.o(i.hostapd_set_authorized))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hostapd_set_authorized &rArr; hostapd_sta_set_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_sta_set_flags
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_sta_flags_to_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
</UL>

<P><STRONG><a name="[882]"></a>hostapd_set_country</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ap_drv_ops.o(i.hostapd_set_country))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_set_country
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface
</UL>

<P><STRONG><a name="[620]"></a>hostapd_set_drv_ieee8021x</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, ap_drv_ops.o(i.hostapd_set_drv_ieee8021x))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hostapd_set_drv_ieee8021x &rArr; hostapd_set_ieee8021x
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_ieee8021x
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_init
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_deinit
</UL>

<P><STRONG><a name="[635]"></a>hostapd_set_frag</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ap_drv_ops.o(i.hostapd_set_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_set_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
</UL>

<P><STRONG><a name="[622]"></a>hostapd_set_freq</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ap_drv_ops.o(i.hostapd_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hostapd_set_freq &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
</UL>

<P><STRONG><a name="[602]"></a>hostapd_set_generic_elem</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ap_drv_ops.o(i.hostapd_set_generic_elem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_set_generic_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
</UL>

<P><STRONG><a name="[621]"></a>hostapd_set_ieee8021x</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ap_drv_ops.o(i.hostapd_set_ieee8021x))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_set_ieee8021x
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_drv_ieee8021x
</UL>

<P><STRONG><a name="[601]"></a>hostapd_set_privacy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ap_drv_ops.o(i.hostapd_set_privacy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_set_privacy
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_encryption
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[634]"></a>hostapd_set_rts</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ap_drv_ops.o(i.hostapd_set_rts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_set_rts
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
</UL>

<P><STRONG><a name="[629]"></a>hostapd_set_ssid</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ap_drv_ops.o(i.hostapd_set_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_set_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[63b]"></a>hostapd_set_tx_queue_params</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ap_drv_ops.o(i.hostapd_set_tx_queue_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hostapd_set_tx_queue_params
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_tx_queue_params
</UL>

<P><STRONG><a name="[406]"></a>hostapd_set_wds_sta</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ap_drv_ops.o(i.hostapd_set_wds_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hostapd_set_wds_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[630]"></a>hostapd_setup_interface</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hostapd.o(i.hostapd_setup_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
</UL>

<P><STRONG><a name="[632]"></a>hostapd_setup_interface_complete</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, hostapd.o(i.hostapd_setup_interface_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_terminate
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_tx_queue_params
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_rts
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_frag
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_driver_commit
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mac_comp_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface
</UL>

<P><STRONG><a name="[62d]"></a>hostapd_setup_wpa</STRONG> (Thumb, 276 bytes, Stack size 144 bytes, wpa_auth_glue.o(i.hostapd_setup_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_wpa_ie
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_privacy
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_generic_elem
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_conf
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[628]"></a>hostapd_setup_wpa_psk</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ap_config.o(i.hostapd_setup_wpa_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = hostapd_setup_wpa_psk &rArr; hostapd_config_read_wpa_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_derive_psk
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[61e]"></a>hostapd_sta_flags_to_drv</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ap_drv_ops.o(i.hostapd_sta_flags_to_drv))
<BR><BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_authorized
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_send_eapol
</UL>

<P><STRONG><a name="[61f]"></a>hostapd_sta_set_flags</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ap_drv_ops.o(i.hostapd_sta_set_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hostapd_sta_set_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_authorized
</UL>

<P><STRONG><a name="[607]"></a>hostapd_update_time_adv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, ieee802_11_shared.o(i.hostapd_update_time_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_gmtime
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_time_adv
</UL>

<P><STRONG><a name="[5fe]"></a>hwaddr_aton</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, common.o(i.hwaddr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hwaddr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2num
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk
</UL>

<P><STRONG><a name="[644]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[646]"></a>icmp_input</STRONG> (Thumb, 580 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[64b]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[5ff]"></a>ieee80211_tkip_countermeasures_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tkip_countermeasures.o(i.ieee80211_tkip_countermeasures_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ieee80211_tkip_countermeasures_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
</UL>

<P><STRONG><a name="[618]"></a>ieee802_11_parse_elems</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, ieee802_11_common.o(i.ieee802_11_parse_elems))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ieee802_11_parse_elems &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_vendor_specific
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_ctrl_get_sta_qos_bit
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_beacon
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[62e]"></a>ieee802_11_set_beacon</STRONG> (Thumb, 436 bytes, Stack size 168 bytes, beacon.o(i.ieee802_11_set_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_ap_extra_ies
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacons
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[40a]"></a>ieee802_11_set_beacons</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, beacon.o(i.ieee802_11_set_beacons))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[395]"></a>ieee802_1x_abort_auth</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ieee802_1x.o(i.ieee802_1x_abort_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = ieee802_1x_abort_auth &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ieee802_1x_abort_auth
</UL>

<P><STRONG><a name="[603]"></a>ieee802_1x_deinit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ieee802_1x.o(i.ieee802_1x_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ieee802_1x_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_drv_ieee8021x
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
</UL>

<P><STRONG><a name="[40c]"></a>ieee802_1x_free_station</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ieee802_1x.o(i.ieee802_1x_free_station))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ieee802_1x_free_station &rArr; eapol_auth_free &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sleep
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_free
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassociate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[63e]"></a>ieee802_1x_get_key</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ieee802_1x.o(i.ieee802_1x_get_key))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_finished
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_get_msk
</UL>

<P><STRONG><a name="[62c]"></a>ieee802_1x_init</STRONG> (Thumb, 366 bytes, Stack size 168 bytes, ieee802_1x.o(i.ieee802_1x_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ieee802_1x_init &rArr; ieee802_1x_rekey &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_drv_ieee8021x
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_init
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[615]"></a>ieee802_1x_new_station</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, ieee802_1x.o(i.ieee802_1x_new_station))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ieee802_1x_new_station &rArr; ieee802_1x_alloc_eapol_sm &rArr; eapol_auth_alloc &rArr; eapol_auth_initialize &rArr; eapol_sm_step_run &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_alloc_eapol_sm
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_key_mgmt
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_get_pmksa
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_to_eapol_data
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_step
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_notify_cached
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_bind_vlan
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
</UL>

<P><STRONG><a name="[415]"></a>ieee802_1x_notify_port_enabled</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ieee802_1x.o(i.ieee802_1x_notify_port_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ieee802_1x_notify_port_enabled &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_step
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_disassoc
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_set_eapol
</UL>

<P><STRONG><a name="[642]"></a>ieee802_1x_notify_port_valid</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ieee802_1x.o(i.ieee802_1x_notify_port_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ieee802_1x_notify_port_valid &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_step
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_set_eapol
</UL>

<P><STRONG><a name="[65c]"></a>ieee802_1x_receive</STRONG> (Thumb, 706 bytes, Stack size 64 bytes, ieee802_1x.o(i.ieee802_1x_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = ieee802_1x_receive &rArr; wpa_receive &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_alloc_eapol_sm
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_eap
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_key_mgmt
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_get_pmksa
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_clear_pmksa
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_step
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_clear_identity
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ap_rx_eapol
</UL>

<P><STRONG><a name="[643]"></a>ieee802_1x_set_sta_authorized</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, ieee802_1x.o(i.ieee802_1x_set_sta_authorized))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ieee802_1x_set_sta_authorized &rArr; ap_sta_set_authorized &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_authorized
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_port_authorized
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_set_eapol
</UL>

<P><STRONG><a name="[397]"></a>ieee802_1x_tx_key</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, ieee802_1x.o(i.ieee802_1x_tx_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = ieee802_1x_tx_key &rArr; ieee802_1x_tx_key_one &rArr; hmac_md5 &rArr; hmac_md5_vector &rArr; md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ieee802_1x_tx_key
</UL>

<P><STRONG><a name="[679]"></a>inband_get_mq_spaces</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inband_queue.o(i.inband_get_mq_spaces))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inband_get_mq_spaces &rArr; wifi_os_queue_get_space &rArr; uxQueueSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_get_space
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[88]"></a>inband_handle_func</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ethernetif.o(i.inband_handle_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inband_handle_func &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init_callback)
</UL>
<P><STRONG><a name="[455]"></a>inband_queue_evt_handler</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, inband_queue.o(i.inband_queue_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inband_queue_evt_handler &rArr; inband_job_add &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_exit_critical
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_enter_critical
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_give
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_context
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_init
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_show_wifi_event_format
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_job_add
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_evt_get_handler
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlListDel
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_deliver_inband
</UL>

<P><STRONG><a name="[387]"></a>inband_queue_exec</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, inband_queue.o(i.inband_queue_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_opmode
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_wifi_privilege
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_wireless_mode
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_stop_scan
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_is_ap_ip_ready
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_is_ap_connected
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_ap_stop
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_ap_start
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_radio_on
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_disconnect
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_channel
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_bssid
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_isr
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_ptk_kck_kek
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_key
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid_channel
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_wep_key
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_ps_mode
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_encryption
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_auth_mode
</UL>

<P><STRONG><a name="[67e]"></a>inband_queue_handler</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, inband_queue.o(i.inband_queue_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inband_queue_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_util_get_inf_number
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_evt_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_handle_func
</UL>

<P><STRONG><a name="[688]"></a>inband_queue_init</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, inband_queue.o(i.inband_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inband_queue_init &rArr; wifi_os_task_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_create
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_create_mutex
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_create
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_zalloc
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_register_n9log_handler
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlListInit
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlListAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[68d]"></a>inband_queue_query</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, inband_queue.o(i.inband_queue_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_opmode
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_wireless_mode
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_radio_on
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_get_station_list
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_get_link_status
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_channel
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_bssid
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid_channel
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid
</UL>

<P><STRONG><a name="[58e]"></a>inband_queue_register_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inband_queue.o(i.inband_queue_register_callback))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init_callback
</UL>

<P><STRONG><a name="[376]"></a>inc_byte_array</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, common.o(i.inc_byte_array))
<BR><BR>[Called By]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
</UL>

<P><STRONG><a name="[648]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[647]"></a>inet_chksum_pbuf</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[694]"></a>inet_chksum_pseudo</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[696]"></a>insert_list_by_rssi</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, wifi_scan.o(i.insert_list_by_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = insert_list_by_rssi &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
</UL>

<P><STRONG><a name="[69a]"></a>io_def_uart_init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, io_def.o(i.io_def_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = io_def_uart_init &rArr; hal_uart_init &rArr; uart_set_baudrate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[594]"></a>io_def_uart_putchar</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, io_def.o(i.io_def_uart_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = io_def_uart_putchar &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_blocking_is_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[57a]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[69b]"></a>ip4_frag</STRONG> (Thumb, 516 bytes, Stack size 96 bytes, ip4_frag.o(i.ip4_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[104]"></a>ip4_input</STRONG> (Thumb, 692 bytes, Stack size 40 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[649]"></a>ip4_output_if</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[6a5]"></a>ip4_output_if_src</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[6a0]"></a>ip4_reass</STRONG> (Thumb, 542 bytes, Stack size 48 bytes, ip4_frag.o(i.ip4_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ip4_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[64a]"></a>ip4_route</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[4d6]"></a>ip4addr_aton</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, ip4_addr.o(i.ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ip4addr_aton &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[39f]"></a>ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip4_addr.o(i.ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_ready_callback
</UL>

<P><STRONG><a name="[6ac]"></a>ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip4_addr.o(i.ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>

<P><STRONG><a name="[6ad]"></a>ip_chksum_pseudo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, inet_chksum.o(i.ip_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[17a]"></a>ip_reass_tmr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[a55]"></a>key_mgmt2driver</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, wpa_supplicant.o(i.key_mgmt2driver))
<BR><BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[6af]"></a>l2_packet_deinit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, l2_packet_freertos.o(i.l2_packet_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = l2_packet_deinit &rArr; eloop_unregister_read_sock &rArr; eloop_unregister_sock &rArr; eloop_sock_table_remove_sock &rArr; os_memmove &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_unregister_read_sock
</UL>
<BR>[Called By]<UL><LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_mac_addr
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_interface_status
</UL>

<P><STRONG><a name="[66e]"></a>l2_packet_init</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, l2_packet_freertos.o(i.l2_packet_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = l2_packet_init &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strstr
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlcpy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_read_sock
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_mac_addr
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
</UL>

<P><STRONG><a name="[a9c]"></a>l2_packet_notify_auth_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2_packet_freertos.o(i.l2_packet_notify_auth_start))
<BR><BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[cb]"></a>l2_packet_receive</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, driver_inband.o(i.l2_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = l2_packet_receive &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2_packet_freertos.o(i.l2_packet_init)
</UL>
<P><STRONG><a name="[641]"></a>l2_packet_send</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, l2_packet_freertos.o(i.l2_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = l2_packet_send &rArr; ethernet_raw_pkt_sender &rArr; low_level_output_scatter &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_raw_pkt_sender
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ether_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_send_ether
</UL>

<P><STRONG><a name="[1d2]"></a>log_hal_error_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_log.o(i.log_hal_error_internal))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
</UL>

<P><STRONG><a name="[20e]"></a>log_hal_info_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_log.o(i.log_hal_info_internal))
<BR><BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2 (via Veneer)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device (via Veneer)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init (via Veneer)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config (via Veneer)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
</UL>

<P><STRONG><a name="[58a]"></a>low_level_set_mac_addr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ethernetif.o(i.low_level_set_mac_addr))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[6e]"></a>lp_connsys_get_own_enable_int</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, connsys_driver.o(i.lp_connsys_get_own_enable_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lp_connsys_get_own_enable_int &rArr; connsys_get_ownership &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_ownership
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connsys_driver.o(i.connsys_open)
</UL>
<P><STRONG><a name="[6f]"></a>lp_connsys_give_n9_own</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, connsys_driver.o(i.lp_connsys_give_n9_own))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lp_connsys_give_n9_own &rArr; connsys_get_ownership &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_ownership
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_write
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_cr_read
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connsys_driver.o(i.connsys_open)
</UL>
<P><STRONG><a name="[20]"></a>lwip_advance_pkt_hdr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ethernetif.o(i.lwip_advance_pkt_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lwip_advance_pkt_hdr &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[66d]"></a>lwip_bind</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, sockets.o(i.lwip_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
</UL>

<P><STRONG><a name="[326]"></a>lwip_close</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_stop
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_eapol_rx_socket_dual_intf
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>

<P><STRONG><a name="[327]"></a>lwip_connect</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, sockets.o(i.lwip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>

<P><STRONG><a name="[22]"></a>lwip_deliver_tcpip</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ethernetif.o(i.lwip_deliver_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lwip_deliver_tcpip &rArr; ethernetif_intr_enhance_mode_dispatch &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_intr_enhance_mode_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[354]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, netdb.o(i.lwip_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostIP
</UL>

<P><STRONG><a name="[811]"></a>lwip_get_netif_name</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, ethernetif.o(i.lwip_get_netif_name))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find_by_type
</UL>

<P><STRONG><a name="[353]"></a>lwip_getaddrinfo</STRONG> (Thumb, 390 bytes, Stack size 72 bytes, netdb.o(i.lwip_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostIP
</UL>

<P><STRONG><a name="[49a]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_intr_enhance_mode_dispatch
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_global_event
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
</UL>

<P><STRONG><a name="[4d8]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_intr_enhance_mode_dispatch
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
</UL>

<P><STRONG><a name="[6b9]"></a>lwip_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[32e]"></a>lwip_ioctl</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sockets.o(i.lwip_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
</UL>

<P><STRONG><a name="[e2]"></a>lwip_netconn_do_bind</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[e3]"></a>lwip_netconn_do_close</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[e4]"></a>lwip_netconn_do_connect</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_connect)
</UL>
<P><STRONG><a name="[e5]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[e6]"></a>lwip_netconn_do_disconnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_netconn_do_disconnect &rArr; sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_disconnect)
</UL>
<P><STRONG><a name="[e7]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lwip_netconn_do_getaddr &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[e8]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_gethostbyname)
</UL>
<P><STRONG><a name="[e9]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[ea]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_recv_data)
</UL>
<P><STRONG><a name="[eb]"></a>lwip_netconn_do_send</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[ec]"></a>lwip_netconn_do_write</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[6e1]"></a>lwip_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, sockets.o(i.lwip_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkRecv
</UL>

<P><STRONG><a name="[4e6]"></a>lwip_recvfrom</STRONG> (Thumb, 662 bytes, Stack size 96 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_eloop_recv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_receive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_msg_recv
</UL>

<P><STRONG><a name="[567]"></a>lwip_select</STRONG> (Thumb, 1008 bytes, Stack size 120 bytes, sockets.o(i.lwip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lwip_select &rArr; lwip_selscan &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRxSelect
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
</UL>

<P><STRONG><a name="[6e9]"></a>lwip_send</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkSend
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[563]"></a>lwip_sendto</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + In Cycle
<LI>Call Chain = lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_intr_enhance_mode_dispatch
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_global_event
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>

<P><STRONG><a name="[32d]"></a>lwip_setsockopt</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lwip_setsockopt &rArr; sys_mutex_unlock &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
</UL>

<P><STRONG><a name="[331]"></a>lwip_shutdown</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, sockets.o(i.lwip_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Shutdown
</UL>

<P><STRONG><a name="[332]"></a>lwip_socket</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>

<P><STRONG><a name="[693]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>

<P><STRONG><a name="[4d4]"></a>lwip_strnicmp</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, def.o(i.lwip_strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[39e]"></a>lwip_tcpip_init</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, ethernetif.o(i.lwip_tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_init
</UL>

<P><STRONG><a name="[2b]"></a>main</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; prvMiscInitialization &rArr; system_init &rArr; prvSetupHardware &rArr; connsys_open &rArr; connsys_bus_get_irq &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLoggingTaskInitialize
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMiscInitialization
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3eb]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, aes.o(i.mbedtls_aes_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
</UL>

<P><STRONG><a name="[3ec]"></a>mbedtls_aes_crypt_cfb128</STRONG> (Thumb, 134 bytes, Stack size 52 bytes, aes.o(i.mbedtls_aes_crypt_cfb128))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_aes_crypt_cfb128 &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cfb128_wrap
</UL>

<P><STRONG><a name="[3ed]"></a>mbedtls_aes_crypt_ctr</STRONG> (Thumb, 118 bytes, Stack size 52 bytes, aes.o(i.mbedtls_aes_crypt_ctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_aes_crypt_ctr &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ctr_wrap
</UL>

<P><STRONG><a name="[3ee]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[3f1]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[3f0]"></a>mbedtls_aes_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[3fe]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 204 bytes, Stack size 320 bytes, aes.o(i.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[3ff]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 496 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[6f7]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, asn1parse.o(i.mbedtls_asn1_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>

<P><STRONG><a name="[6fa]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
</UL>

<P><STRONG><a name="[6fb]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
</UL>

<P><STRONG><a name="[6fc]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[6fd]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[6f9]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1parse.o(i.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[6fe]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>

<P><STRONG><a name="[6ff]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, asn1parse.o(i.mbedtls_asn1_get_sequence_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
</UL>

<P><STRONG><a name="[6f8]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[700]"></a>mbedtls_asn1_write_int</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, asn1write.o(i.mbedtls_asn1_write_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_asn1_write_int &rArr; mbedtls_asn1_write_len
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[52a]"></a>mbedtls_asn1_write_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1write.o(i.mbedtls_asn1_write_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[529]"></a>mbedtls_asn1_write_mpi</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, asn1write.o(i.mbedtls_asn1_write_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[703]"></a>mbedtls_asn1_write_oid</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(i.mbedtls_asn1_write_oid))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_asn1_write_oid &rArr; mbedtls_asn1_write_raw_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
</UL>

<P><STRONG><a name="[704]"></a>mbedtls_asn1_write_raw_buffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, asn1write.o(i.mbedtls_asn1_write_raw_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_asn1_write_raw_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
</UL>

<P><STRONG><a name="[52b]"></a>mbedtls_asn1_write_tag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, asn1write.o(i.mbedtls_asn1_write_tag))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[487]"></a>mbedtls_base64_decode</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, base64.o(i.mbedtls_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_pem_to_der
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[3ef]"></a>mbedtls_calloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, platform.o(i.mbedtls_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_alloc_wrap
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[705]"></a>mbedtls_cipher_auth_decrypt</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, cipher.o(i.mbedtls_cipher_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[707]"></a>mbedtls_cipher_auth_encrypt</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, cipher.o(i.mbedtls_cipher_auth_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[709]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, cipher.o(i.mbedtls_cipher_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[70c]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[70e]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[79f]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[73c]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_info_from_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[70f]"></a>mbedtls_cipher_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
</UL>

<P><STRONG><a name="[70b]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_reset))
<BR><BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[70a]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, cipher.o(i.mbedtls_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[711]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_set_padding_mode))
<BR><BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[73d]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cipher.o(i.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[710]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[59e]"></a>mbedtls_cipher_update</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, cipher.o(i.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>

<P><STRONG><a name="[27e]"></a>mbedtls_ctr_drbg_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ctr_drbg_free &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Finalize
</UL>

<P><STRONG><a name="[713]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ctr_drbg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
</UL>

<P><STRONG><a name="[33]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateRandom
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aws_pkcs11_mbedtls.o(i.C_GenerateKeyPair)
<LI> aws_pkcs11_mbedtls.o(i.C_Sign)
</UL>
<P><STRONG><a name="[714]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 244 bytes, Stack size 112 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[715]"></a>mbedtls_ctr_drbg_reseed</STRONG> (Thumb, 142 bytes, Stack size 408 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[716]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
</UL>

<P><STRONG><a name="[717]"></a>mbedtls_ctr_drbg_seed_entropy_len</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_seed_entropy_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
</UL>

<P><STRONG><a name="[718]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ecdh.o(i.mbedtls_ecdh_calc_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[719]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, ecdh.o(i.mbedtls_ecdh_compute_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[71d]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ecdh.o(i.mbedtls_ecdh_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[71f]"></a>mbedtls_ecdh_gen_public</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ecdh.o(i.mbedtls_ecdh_gen_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[721]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ecdh.o(i.mbedtls_ecdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecdh_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[722]"></a>mbedtls_ecdh_make_public</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ecdh.o(i.mbedtls_ecdh_make_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[724]"></a>mbedtls_ecdh_read_params</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ecdh.o(i.mbedtls_ecdh_read_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[526]"></a>mbedtls_ecdsa_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(i.mbedtls_ecdsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
</UL>

<P><STRONG><a name="[530]"></a>mbedtls_ecdsa_from_keypair</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ecdsa.o(i.mbedtls_ecdsa_from_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>

<P><STRONG><a name="[525]"></a>mbedtls_ecdsa_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(i.mbedtls_ecdsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
</UL>

<P><STRONG><a name="[52c]"></a>mbedtls_ecdsa_read_signature</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, ecdsa.o(i.mbedtls_ecdsa_read_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>

<P><STRONG><a name="[729]"></a>mbedtls_ecdsa_sign</STRONG> (Thumb, 502 bytes, Stack size 128 bytes, ecdsa.o(i.mbedtls_ecdsa_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[728]"></a>mbedtls_ecdsa_verify</STRONG> (Thumb, 376 bytes, Stack size 128 bytes, ecdsa.o(i.mbedtls_ecdsa_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[527]"></a>mbedtls_ecdsa_write_signature</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, ecdsa.o(i.mbedtls_ecdsa_write_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>

<P><STRONG><a name="[72b]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[52e]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 178 bytes, Stack size 184 bytes, ecp.o(i.mbedtls_ecp_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[71a]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[533]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[72e]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_grp_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[730]"></a>mbedtls_ecp_curve_info_from_tls_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_tls_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_tls_id
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>

<P><STRONG><a name="[72f]"></a>mbedtls_ecp_curve_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_curve_list))
<BR><BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>

<P><STRONG><a name="[284]"></a>mbedtls_ecp_gen_key</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_gen_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = mbedtls_ecp_gen_key &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
</UL>

<P><STRONG><a name="[720]"></a>mbedtls_ecp_gen_keypair</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_gen_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[732]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, ecp.o(i.mbedtls_ecp_gen_keypair_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[727]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_group_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>

<P><STRONG><a name="[71e]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>

<P><STRONG><a name="[72d]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>

<P><STRONG><a name="[731]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, ecp_curves.o(i.mbedtls_ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[733]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_grp_id_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_grp_id_list
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[71c]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_is_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[52f]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
</UL>

<P><STRONG><a name="[52d]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
</UL>

<P><STRONG><a name="[71b]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[72a]"></a>mbedtls_ecp_muladd</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, ecp.o(i.mbedtls_ecp_muladd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[550]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>

<P><STRONG><a name="[551]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>

<P><STRONG><a name="[735]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_point_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[736]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_point_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
</UL>

<P><STRONG><a name="[539]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_set_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>

<P><STRONG><a name="[725]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_tls_read_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[726]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_tls_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[723]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_tls_write_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[738]"></a>mbedtls_entropy_add_source</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, entropy.o(i.mbedtls_entropy_add_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_entropy_add_source
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
</UL>

<P><STRONG><a name="[27d]"></a>mbedtls_entropy_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, entropy.o(i.mbedtls_entropy_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_entropy_free &rArr; mbedtls_sha256_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Finalize
</UL>

<P><STRONG><a name="[f9]"></a>mbedtls_entropy_func</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, entropy.o(i.mbedtls_entropy_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize)
</UL>
<P><STRONG><a name="[737]"></a>mbedtls_entropy_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, entropy.o(i.mbedtls_entropy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_entropy_init &rArr; mbedtls_entropy_add_source
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
</UL>

<P><STRONG><a name="[3f2]"></a>mbedtls_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, platform.o(i.mbedtls_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_free_wrap
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[706]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, gcm.o(i.mbedtls_gcm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</UL>

<P><STRONG><a name="[708]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, gcm.o(i.mbedtls_gcm_crypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
</UL>

<P><STRONG><a name="[73a]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, gcm.o(i.mbedtls_gcm_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_gcm_finish &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[59c]"></a>mbedtls_gcm_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(i.mbedtls_gcm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
</UL>

<P><STRONG><a name="[59b]"></a>mbedtls_gcm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gcm.o(i.mbedtls_gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
</UL>

<P><STRONG><a name="[59a]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gcm.o(i.mbedtls_gcm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[739]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, gcm.o(i.mbedtls_gcm_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[712]"></a>mbedtls_gcm_update</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, gcm.o(i.mbedtls_gcm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[dd]"></a>mbedtls_hardware_poll</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, aws_pkcs11_pal.o(i.mbedtls_hardware_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_hardware_poll &rArr; hal_trng_get_generated_random_number &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entropy.o(i.mbedtls_entropy_init)
</UL>
<P><STRONG><a name="[6f6]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 1262 bytes, Stack size 52 bytes, aes.o(i.mbedtls_internal_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[6f5]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 1262 bytes, Stack size 52 bytes, aes.o(i.mbedtls_internal_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[78a]"></a>mbedtls_internal_sha1_process</STRONG> (Thumb, 5578 bytes, Stack size 92 bytes, sha1.o(i.mbedtls_internal_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_internal_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[790]"></a>mbedtls_internal_sha256_process</STRONG> (Thumb, 3534 bytes, Stack size 312 bytes, sha256.o(i.mbedtls_internal_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_internal_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[ae0]"></a>mbedtls_md</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, md.o(i.mbedtls_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
</UL>

<P><STRONG><a name="[7ad]"></a>mbedtls_md_finish</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[73f]"></a>mbedtls_md_free</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[7a1]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
</UL>

<P><STRONG><a name="[8ea]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, md.o(i.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[8eb]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[740]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, md.o(i.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[8e9]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[7a0]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
</UL>

<P><STRONG><a name="[7aa]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[8ed]"></a>mbedtls_md_process</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_process
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[741]"></a>mbedtls_md_setup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_md_setup &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[7ab]"></a>mbedtls_md_starts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[7ac]"></a>mbedtls_md_update</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[742]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, bignum.o(i.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[743]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_add_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[537]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[545]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[744]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[532]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, bignum.o(i.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_crt
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[48f]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[53c]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_crt
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[746]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 980 bytes, Stack size 104 bytes, bignum.o(i.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[747]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1380 bytes, Stack size 1664 bytes, bignum.o(i.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[558]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 92 bytes, Stack size 1048 bytes, bignum.o(i.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[53d]"></a>mbedtls_mpi_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[74c]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, bignum.o(i.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[541]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[546]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[534]"></a>mbedtls_mpi_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[555]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 816 bytes, Stack size 128 bytes, bignum.o(i.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
</UL>

<P><STRONG><a name="[74e]"></a>mbedtls_mpi_is_prime</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_is_prime))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
</UL>

<P><STRONG><a name="[74d]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[553]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[7ef]"></a>mbedtls_mpi_mod_int</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, bignum.o(i.mbedtls_mpi_mod_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_mpi_mod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
</UL>

<P><STRONG><a name="[549]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[53a]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[535]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[48d]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[54c]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_safe_cond_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[542]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[48e]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[557]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shrink &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
</UL>

<P><STRONG><a name="[701]"></a>mbedtls_mpi_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[53b]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[53f]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[490]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[702]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[753]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_ec_grp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[83c]"></a>mbedtls_oid_get_oid_by_ec_grp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_oid_by_ec_grp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
</UL>

<P><STRONG><a name="[880]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_oid_by_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>

<P><STRONG><a name="[755]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[757]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oid.o(i.mbedtls_oid_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[759]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_x509_ext_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[75b]"></a>mbedtls_pem_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pem.o(i.mbedtls_pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_pem_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[75d]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(i.mbedtls_pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[75c]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, pem.o(i.mbedtls_pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_pem_read_buffer &rArr; mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[768]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_can_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[26f]"></a>mbedtls_pk_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_pk_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CloseSession
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[af2]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_get_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
</UL>

<P><STRONG><a name="[287]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[282]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[276]"></a>mbedtls_pk_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_init))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
</UL>

<P><STRONG><a name="[277]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, pkparse.o(i.mbedtls_pk_parse_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
</UL>

<P><STRONG><a name="[278]"></a>mbedtls_pk_parse_public_key</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, pkparse.o(i.mbedtls_pk_parse_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320<LI>Call Chain = mbedtls_pk_parse_public_key &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
</UL>

<P><STRONG><a name="[762]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, pkparse.o(i.mbedtls_pk_parse_subpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[283]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[28d]"></a>mbedtls_pk_sign</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Sign
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[28f]"></a>mbedtls_pk_verify</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(i.mbedtls_pk_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Verify
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[767]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, pk.o(i.mbedtls_pk_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
</UL>

<P><STRONG><a name="[285]"></a>mbedtls_pk_write_key_der</STRONG> (Thumb, 814 bytes, Stack size 64 bytes, pkwrite.o(i.mbedtls_pk_write_key_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mbedtls_pk_write_key_der &rArr; pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_crt
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
</UL>

<P><STRONG><a name="[26d]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform.o(i.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_ConfigureHeap
</UL>

<P><STRONG><a name="[428]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, platform_util.o(i.mbedtls_platform_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_free_wrap
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[76d]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rsa.o(i.mbedtls_rsa_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[772]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[76e]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[773]"></a>mbedtls_rsa_complete</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, rsa.o(i.mbedtls_rsa_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[776]"></a>mbedtls_rsa_deduce_crt</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, rsa_internal.o(i.mbedtls_rsa_deduce_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mbedtls_rsa_deduce_crt &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[774]"></a>mbedtls_rsa_deduce_primes</STRONG> (Thumb, 530 bytes, Stack size 128 bytes, rsa_internal.o(i.mbedtls_rsa_deduce_primes))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080<LI>Call Chain = mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[775]"></a>mbedtls_rsa_deduce_private_exponent</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, rsa_internal.o(i.mbedtls_rsa_deduce_private_exponent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mbedtls_rsa_deduce_private_exponent &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[76a]"></a>mbedtls_rsa_export</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_export))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_rsa_export &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[769]"></a>mbedtls_rsa_export_crt</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, rsa.o(i.mbedtls_rsa_export_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_rsa_export_crt &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[777]"></a>mbedtls_rsa_free</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[87f]"></a>mbedtls_rsa_get_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa.o(i.mbedtls_rsa_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_get_bitlen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[778]"></a>mbedtls_rsa_import_raw</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_import_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_rsa_import_raw &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[779]"></a>mbedtls_rsa_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[77b]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_pkcs1_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[77d]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, rsa.o(i.mbedtls_rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[77f]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_pkcs1_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[781]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[783]"></a>mbedtls_rsa_private</STRONG> (Thumb, 820 bytes, Stack size 168 bytes, rsa.o(i.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</UL>

<P><STRONG><a name="[785]"></a>mbedtls_rsa_public</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</UL>

<P><STRONG><a name="[77c]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 354 bytes, Stack size 1088 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[77e]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[780]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_safer_memcmp
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[782]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_safer_memcmp
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[77a]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rsa.o(i.mbedtls_rsa_set_padding))
<BR><BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[771]"></a>mbedtls_rsa_validate_crt</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, rsa_internal.o(i.mbedtls_rsa_validate_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_rsa_validate_crt &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[770]"></a>mbedtls_rsa_validate_params</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, rsa_internal.o(i.mbedtls_rsa_validate_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[788]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha1.o(i.mbedtls_sha1_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[789]"></a>mbedtls_sha1_finish_ret</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, sha1.o(i.mbedtls_sha1_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_sha1_finish_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[78b]"></a>mbedtls_sha1_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha1.o(i.mbedtls_sha1_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha1_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[78c]"></a>mbedtls_sha1_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha1.o(i.mbedtls_sha1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[14b]"></a>mbedtls_sha1_ret</STRONG> (Thumb, 72 bytes, Stack size 112 bytes, sha1.o(i.mbedtls_sha1_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mbedtls_sha1_ret &rArr; mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[78d]"></a>mbedtls_sha1_starts_ret</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_starts_ret))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[78e]"></a>mbedtls_sha1_update_ret</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sha1.o(i.mbedtls_sha1_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[78f]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha256.o(i.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[279]"></a>mbedtls_sha256_finish_ret</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, sha256.o(i.mbedtls_sha256_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestFinal
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[271]"></a>mbedtls_sha256_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_sha256_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CloseSession
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[27a]"></a>mbedtls_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[571]"></a>mbedtls_sha256_ret</STRONG> (Thumb, 86 bytes, Stack size 136 bytes, sha256.o(i.mbedtls_sha256_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>

<P><STRONG><a name="[27b]"></a>mbedtls_sha256_starts_ret</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_starts_ret))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[27c]"></a>mbedtls_sha256_update_ret</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sha256.o(i.mbedtls_sha256_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestUpdate
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
</UL>

<P><STRONG><a name="[791]"></a>mbedtls_ssl_check_cert_usage</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_check_cert_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_ssl_check_cert_usage &rArr; mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[7c8]"></a>mbedtls_ssl_check_curve</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_curve))
<BR><BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[901]"></a>mbedtls_ssl_check_sig_hash</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_sig_hash))
<BR><BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[7c4]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_ciphersuite_from_id))
<BR><BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
</UL>

<P><STRONG><a name="[905]"></a>mbedtls_ssl_ciphersuite_uses_ec</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_ciphersuite_uses_ec))
<BR><BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[794]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_close_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>

<P><STRONG><a name="[343]"></a>mbedtls_ssl_conf_alpn_protocols</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_conf_alpn_protocols))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_conf_alpn_protocols
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[33f]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_authmode))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[341]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_ca_chain))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[799]"></a>mbedtls_ssl_conf_endpoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_endpoint))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[797]"></a>mbedtls_ssl_conf_own_cert</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_conf_own_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_conf_own_cert &rArr; ssl_append_key_cert &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
</UL>

<P><STRONG><a name="[340]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_rng))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[79a]"></a>mbedtls_ssl_conf_transport</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_transport))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[33e]"></a>mbedtls_ssl_conf_verify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_verify))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[33d]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_config_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_transport
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_endpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[79c]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_config_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_config_free &rArr; ssl_key_cert_free &rArr; mbedtls_free
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>

<P><STRONG><a name="[33c]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_config_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[79e]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 944 bytes, Stack size 440 bytes, ssl_tls.o(i.mbedtls_ssl_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[7a2]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_fetch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; ssl_check_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[795]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_flush_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_flush_output
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[7a5]"></a>mbedtls_ssl_free</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>

<P><STRONG><a name="[8fe]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_sig_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[7a9]"></a>mbedtls_ssl_get_key_exchange_md_tls1_2</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ssl_tls.o(i.mbedtls_ssl_get_key_exchange_md_tls1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = mbedtls_ssl_get_key_exchange_md_tls1_2 &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[7ae]"></a>mbedtls_ssl_get_max_frag_len</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_get_max_frag_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_get_max_frag_len
</UL>
<BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mfl_code_to_length
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_out_record_payload
</UL>

<P><STRONG><a name="[7b0]"></a>mbedtls_ssl_get_max_out_record_payload</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_get_max_out_record_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_get_max_out_record_payload &rArr; mbedtls_ssl_get_max_frag_len
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[7b1]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handle_message_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[347]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[7b4]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, ssl_cli.o(i.mbedtls_ssl_handshake_client_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[7a7]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[7b3]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[7c2]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_wrapup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[90d]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_hash_from_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[33b]"></a>mbedtls_ssl_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[79b]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_list_ciphersuites))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[8ff]"></a>mbedtls_ssl_md_alg_from_hash</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_md_alg_from_hash))
<BR><BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[8fa]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_optimize_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[7b7]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 908 bytes, Stack size 56 bytes, ssl_tls.o(i.mbedtls_ssl_parse_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[7c0]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_parse_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_in_pointers
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[7c1]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_parse_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[900]"></a>mbedtls_ssl_pk_alg_from_sig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_pk_alg_from_sig))
<BR><BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[7b2]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_prepare_handshake_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_hs_total_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[348]"></a>mbedtls_ssl_read</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496<LI>Call Chain = mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Recv
</UL>

<P><STRONG><a name="[7c5]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_record_is_in_progress
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_consume_current_message
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>

<P><STRONG><a name="[8f7]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_read_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[796]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_send_alert_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
</UL>

<P><STRONG><a name="[7a8]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_session_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[7d2]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_session_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_session_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[346]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[345]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_set_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ssl_set_hostname &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[344]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[7d5]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_sig_from_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_sig_from_pk &rArr; mbedtls_pk_can_do
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[8f2]"></a>mbedtls_ssl_sig_hash_set_const_hash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_sig_hash_set_const_hash))
<BR><BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[7a6]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_transform_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_cipher_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[7d0]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_update_handshake_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_update_handshake_status
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[349]"></a>mbedtls_ssl_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496<LI>Call Chain = mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Send
</UL>

<P><STRONG><a name="[7bb]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[7be]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_write_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[7bf]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_write_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[7d7]"></a>mbedtls_ssl_write_handshake_msg</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_handshake_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[7d1]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>

<P><STRONG><a name="[7d8]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_write_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[865]"></a>mbedtls_threading_set_alt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, threading.o(i.mbedtls_threading_set_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_threading_set_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
</UL>

<P><STRONG><a name="[793]"></a>mbedtls_x509_crt_check_extended_key_usage</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_check_extended_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[792]"></a>mbedtls_x509_crt_check_key_usage</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, x509_crt.o(i.mbedtls_x509_crt_check_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[274]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, x509_crt.o(i.mbedtls_x509_crt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
</UL>

<P><STRONG><a name="[272]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509_crt.o(i.mbedtls_x509_crt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_x509_crt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[273]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, x509_crt.o(i.mbedtls_x509_crt_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 2432<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
</UL>

<P><STRONG><a name="[7c6]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, x509_crt.o(i.mbedtls_x509_crt_parse_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[7c7]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 192 bytes, Stack size 136 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_with_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_chain &rArr; x509_crt_find_parent &rArr; x509_crt_find_parent_in &rArr; x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_merge_flags_with_cb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[7e0]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7e1]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7e2]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_x509_get_name &rArr; x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7e4]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7e5]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7e6]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7e7]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
</UL>

<P><STRONG><a name="[ae4]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(i.mbedtls_x509_time_is_future))
<BR><BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[ae3]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(i.mbedtls_x509_time_is_past))
<BR><BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[5dd]"></a>md5_vector</STRONG> (Thumb, 60 bytes, Stack size 112 bytes, md5-internal.o(i.md5_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
</UL>

<P><STRONG><a name="[4df]"></a>mem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[6bc]"></a>mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mem.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4b9]"></a>mem_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init2
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init1
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
</UL>

<P><STRONG><a name="[834]"></a>mem_trim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mem.o(i.mem_trim))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[268]"></a>memoryDumpAll</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, exception_handler.o(i.memoryDumpAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[583]"></a>memp_free</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[6bd]"></a>memp_init</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[7ea]"></a>memp_init_pool</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, memp.o(i.memp_init_pool))
<BR><BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[582]"></a>memp_malloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[640]"></a>michael_mic_failure</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, tkip_countermeasures.o(i.michael_mic_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = michael_mic_failure &rArr; ieee80211_tkip_countermeasures_start &rArr; wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_michaelmicfailure_indication
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_local_mic_failure_report
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_mic_failure_report
</UL>

<P><STRONG><a name="[410]"></a>mlme_deauthenticate_indication</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, ap_mlme.o(i.mlme_deauthenticate_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mlme_deauthenticate_indication &rArr; mlme_deletekeys_request &rArr; hostapd_logger &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_deauth_cb_timeout
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_session_timer
</UL>

<P><STRONG><a name="[7ed]"></a>mlme_deletekeys_request</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, ap_mlme.o(i.mlme_deletekeys_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mlme_deletekeys_request &rArr; hostapd_logger &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
</UL>

<P><STRONG><a name="[416]"></a>mlme_disassociate_indication</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, ap_mlme.o(i.mlme_disassociate_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mlme_disassociate_indication &rArr; mlme_deletekeys_request &rArr; hostapd_logger &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassoc_cb_timeout
</UL>

<P><STRONG><a name="[7ec]"></a>mlme_michaelmicfailure_indication</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, ap_mlme.o(i.mlme_michaelmicfailure_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mlme_michaelmicfailure_indication &rArr; hostapd_logger &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>

<P><STRONG><a name="[1b1]"></a>mtk_ap_start</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_ap_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mtk_ap_start &rArr; wifi_inband_set_ap_start &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_ap_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>mtk_ap_stop</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_ap_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mtk_ap_stop &rArr; wifi_inband_set_ap_stop &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_ap_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>mtk_ctrl_get_sta_qos_bit</STRONG> (Thumb, 382 bytes, Stack size 176 bytes, driver_inband.o(i.mtk_ctrl_get_sta_qos_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mtk_ctrl_get_sta_qos_bit &rArr; ieee802_11_parse_elems &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_bssid
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
</UL>
<BR>[Address Reference Count : 3]<UL><LI> wpa_supplicant_entry.o(i.wpa_supplicant_entry_dual_iface)
<LI> wpa_supplicant_entry.o(i.wpa_supplicant_entry_iface_change)
<LI> wpa_supplicant_entry.o(i.wpa_supplicant_entry_op_mode_set)
</UL>
<P><STRONG><a name="[1b3]"></a>mtk_handle_beacon</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, driver_inband.o(i.mtk_handle_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mtk_handle_beacon &rArr; wpa_driver_inband_handle_beacon &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_beacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>mtk_ps_mode</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, driver_inband.o(i.mtk_ps_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = mtk_ps_mode &rArr; wpa_driver_inband_set_ps_mode &rArr; wifi_inband_set_ps_mode &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_ps_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>mtk_set_ptk_kck_kek</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, driver_inband.o(i.mtk_set_ptk_kck_kek))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = mtk_set_ptk_kck_kek &rArr; wpa_driver_inband_set_ptk_kck_kek &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_ptk_kck_kek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>mtk_supplicant_get_bssid</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver_inband.o(i.mtk_supplicant_get_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mtk_supplicant_get_bssid &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[38d]"></a>mtk_supplicant_get_interface_by_port</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wpa_supplicant_entry.o(i.mtk_supplicant_get_interface_by_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mtk_supplicant_get_interface_by_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wpa_psk_key
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wep_key
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_ssid
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_security
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_pmk
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_bssid
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_wpa_psk_key
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_wep_key
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_ssid
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_security
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_pmk
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
</UL>

<P><STRONG><a name="[7f9]"></a>mtk_supplicant_scan_in_repeater_mode</STRONG> (Thumb, 652 bytes, Stack size 80 bytes, driver_inband.o(i.mtk_supplicant_scan_in_repeater_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mtk_supplicant_scan_in_repeater_mode &rArr; wifi_inband_wireless_mode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_opmode
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_take_channel_list_mutex
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parse_bg_band_num
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parse_a_band_num
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_wireless_mode
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_give_channel_list_mutex
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_country_channel_list
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_ssid
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_scan_custom
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_scan
</UL>

<P><STRONG><a name="[c7]"></a>mtk_supplicant_set_ssid_bssid</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_set_ssid_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mtk_supplicant_set_ssid_bssid &rArr; wpa_config_set_prio_bssid &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_prio_bssid
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[c3]"></a>mtk_supplicant_show_interfaces</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, driver_inband.o(i.mtk_supplicant_show_interfaces))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mtk_supplicant_show_interfaces &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[599]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[6ed]"></a>netbuf_free</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[6eb]"></a>netbuf_ref</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[806]"></a>netconn_alloc</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netconn_alloc &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[6b4]"></a>netconn_bind</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_bind &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[6b7]"></a>netconn_connect</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, api_lib.o(i.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_connect &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[6b5]"></a>netconn_delete</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[6b6]"></a>netconn_disconnect</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, api_lib.o(i.netconn_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netconn_disconnect &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[80c]"></a>netconn_free</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[6e4]"></a>netconn_getaddr</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_getaddr &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[6b8]"></a>netconn_gethostbyname</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, api_lib.o(i.netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[6f0]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[6e3]"></a>netconn_recv</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[6e2]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_tcp_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[6ec]"></a>netconn_send</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netconn_send &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[6ef]"></a>netconn_shutdown</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, api_lib.o(i.netconn_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[6ea]"></a>netconn_write_partly</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_write_partly &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[589]"></a>netif_add</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>

<P><STRONG><a name="[812]"></a>netif_find</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, netif.o(i.netif_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find_by_type
</UL>

<P><STRONG><a name="[3a2]"></a>netif_find_by_type</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernetif.o(i.netif_find_by_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netif_find_by_type &rArr; netif_find
</UL>
<BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_get_netif_name
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_port_secure_cbk
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_disconnect_cbk
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_up
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_down
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_ap_ip_down
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_ready_callback
</UL>

<P><STRONG><a name="[6be]"></a>netif_init</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, netif.o(i.netif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6a6]"></a>netif_loop_output</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, netif.o(i.netif_loop_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netif_loop_output &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output_ipv4
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[ee]"></a>netif_poll</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, netif.o(i.netif_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = netif_poll &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_loop_output)
</UL>
<P><STRONG><a name="[3a3]"></a>netif_set_addr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_disconnect_cbk
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_ready_callback
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[3b1]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_up
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[816]"></a>netif_set_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[814]"></a>netif_set_ipaddr</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[3ab]"></a>netif_set_link_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_disconnect_cbk
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_down
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_ap_ip_down
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[3ce]"></a>netif_set_link_up</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_port_secure_cbk
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>

<P><STRONG><a name="[815]"></a>netif_set_netmask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[3ac]"></a>netif_set_status_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_status_callback))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_up
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_down
</UL>

<P><STRONG><a name="[58b]"></a>netif_set_up</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>

<P><STRONG><a name="[a6f]"></a>os_daemonize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os.o(i.os_daemonize))
<BR><BR>[Called By]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_daemon
</UL>

<P><STRONG><a name="[a73]"></a>os_daemonize_terminate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os.o(i.os_daemonize_terminate))
<BR><BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
</UL>

<P><STRONG><a name="[661]"></a>os_get_random</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os.o(i.os_get_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_get_random &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_random
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey_broadcast
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gmk
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gmk_to_gtk
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_ptk_update
</UL>

<P><STRONG><a name="[55b]"></a>os_get_time</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os.o(i.os_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_debug_print_timestamp
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush_by_age
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_copy_res
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_set_expiration
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_expire
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_update_time_adv
</UL>

<P><STRONG><a name="[63c]"></a>os_gmtime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os.o(i.os_gmtime))
<BR><BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_update_time_adv
</UL>

<P><STRONG><a name="[377]"></a>os_mem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_os_mem.o(i.os_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_free
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_channel_list_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_download_wifi_profile
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_wifi_privilege
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_get_station_list
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_country_channel_list
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_remove_iface
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_add_iface
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_global_event
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_dual_iface
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg_ctrl
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_notification_callback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_array_concat
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_conf_ap
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ret_bss_entry
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_sock_table_destroy
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_receive
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_scan_results
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_deinit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_msg_recv
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_wep_key
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deinit
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_del
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_clear
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_deinit
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_connection_failed
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bss_freqs_in_ess
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_hw_features
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_results_free
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_send
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey_broadcast
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup_iface
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_wep
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_vlan
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_radius
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_eap_user
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_bss
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_send
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_method_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_to_eapol_data
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_init
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_free
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_deinit
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_clear_identity
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_free_station
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free_ssid
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free_blob
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;none_driver_hapd_deinit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;none_driver_deinit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_free_sta_sm
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_deinit
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pmksa_cache_free_entry
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_acl_query_free
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS2_Enter
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_RESPONSE_Enter
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_user_free
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_data
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_deinit
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_vlogger
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_conf_free
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_conf_clone
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_send_ether
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_deinit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_reset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_process
</UL>

<P><STRONG><a name="[3f7]"></a>os_mem_malloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wifi_os_mem.o(i.os_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_strdup
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_malloc
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_channel_list_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_wifi_privilege
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_get_station_list
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_country_channel_list
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_global_event
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg_ctrl
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_notification_callback
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_conf_ap
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_receive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_msg_recv
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_wep_key
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey_broadcast
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_get_eap_user
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_send
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_to_eapol_data
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_alloc_eapol
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_add_okc
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_from_eapol_data
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_data
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_init
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_vlogger
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_conf_clone
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_wpa_auth_send_ether
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_process
</UL>

<P><STRONG><a name="[56b]"></a>os_mem_realloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wifi_os_mem.o(i.os_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_mem_realloc &rArr; pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortRealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_array_concat
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_register_probereq_cb
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_sock_table_add_sock
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_add_prio_network
</UL>

<P><STRONG><a name="[4ff]"></a>os_mem_strdup</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wifi_os_mem.o(i.os_mem_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = os_mem_strdup &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_conf_ap
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_empty
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_init
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_conf_clone
</UL>

<P><STRONG><a name="[375]"></a>os_mem_zalloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wifi_os_mem.o(i.os_mem_zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_zalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_download_wifi_profile
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_dual_iface
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_build_filter_ssids
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_bss_data
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_conf_ap
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_bss_entry
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_scan_results
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wpa_psk_key
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_ssid
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_read
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_new_conf
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_empty
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_add
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_alloc
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bss_freqs_in_ess
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_send
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_derive_psk
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_method_alloc
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_init
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_alloc
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;none_driver_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;none_driver_hapd_init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_init
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_add_okc
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_init
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_init
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_user_get
</UL>

<P><STRONG><a name="[265]"></a>os_memcmp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os.o(i.os_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_country_code_region_mapping
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_beacon_probe_rsp_parser
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BssCipherParse
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_set_scan_bssid_dirty
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_search_by_bssid
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_get_scan_bssid
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_add_scan_bssid
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_list_by_rssi
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_scan_res
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_known
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_included_in_scan
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_in_use
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_compare_res
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_prio_bssid
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_bssid
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_bssid
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_get
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_del
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bss_freqs_in_ess
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_ssid
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_assoc
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_pmksa_free_cb
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mac_comp_empty
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mac_comp
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_psk
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_eap_user
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_hash_del
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_need_to_roam
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_beacon_ie
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_replay_counter_valid
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_replay_counter_mark_invalid
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_get_okc
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_port_timers_tick
</UL>

<P><STRONG><a name="[50e]"></a>os_memmove</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os.o(i.os_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_memmove &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_beacon_probe_rsp_parser
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_sock_table_remove_sock
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_add_prio_network
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_process_nak
</UL>

<P><STRONG><a name="[a7f]"></a>os_program_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os.o(i.os_program_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
</UL>

<P><STRONG><a name="[824]"></a>os_random</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os.o(i.os_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_random
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random
</UL>

<P><STRONG><a name="[656]"></a>os_sleep</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os.o(i.os_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = os_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_finished
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_free_station
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
</UL>

<P><STRONG><a name="[827]"></a>os_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, os.o(i.os_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
</UL>

<P><STRONG><a name="[828]"></a>os_strchr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os.o(i.os_strchr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_strchr
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_driver
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[4fb]"></a>os_strcmp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os.o(i.os_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_strcmp &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_iface
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_driver_cmd
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_none
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_method_register
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_interface_status
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_remove_blob
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_get_blob
</UL>

<P><STRONG><a name="[6b0]"></a>os_strlcpy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os.o(i.os_strlcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_conf_ap
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[223]"></a>os_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os.o(i.os_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_strdup
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_init_config
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_country_code_region_mapping
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_pwr_from_str
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ip_from_str
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_driver
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_time_zone
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults_bss
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_derive_psk
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f (via Veneer)
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_vlogger
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>

<P><STRONG><a name="[82a]"></a>os_strncmp</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os.o(i.os_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_strncmp &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_driver
</UL>

<P><STRONG><a name="[82b]"></a>os_strncpy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os.o(i.os_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_strncpy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
</UL>

<P><STRONG><a name="[66b]"></a>os_strstr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os.o(i.os_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_strstr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_read
</UL>

<P><STRONG><a name="[498]"></a>pbuf_alloc</STRONG> (Thumb, 720 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_intr_enhance_mode_allocate_pkt_callback
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_raw_pkt_sender
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[69d]"></a>pbuf_alloced_custom</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pbuf_alloced_custom &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[69f]"></a>pbuf_cat</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pbuf_cat &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[82f]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[6a7]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[580]"></a>pbuf_copy</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pbuf_copy &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[4b4]"></a>pbuf_copy_partial</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pbuf_copy_partial &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
</UL>

<P><STRONG><a name="[4a0]"></a>pbuf_free</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_handle_func
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_intr_enhance_mode_dispatch
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_free_pkt
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_raw_pkt_sender
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[584]"></a>pbuf_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_advance_pkt_hdr
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>

<P><STRONG><a name="[6a4]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[4db]"></a>pbuf_put_at</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_put_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_put_at &rArr; pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[4a3]"></a>pbuf_realloc</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[581]"></a>pbuf_ref</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pbuf_ref &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[833]"></a>pbuf_skip</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
</UL>

<P><STRONG><a name="[836]"></a>pbuf_split_64k</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_split_64k))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pbuf_split_64k &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>

<P><STRONG><a name="[4da]"></a>pbuf_take</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pbuf_take &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[4dc]"></a>pbuf_take_at</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_take_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[4d1]"></a>pbuf_try_get_at</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_try_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>

<P><STRONG><a name="[95f]"></a>pcTaskGetName</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tasks.o(i.pcTaskGetName))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_get_name
</UL>

<P><STRONG><a name="[568]"></a>perror</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, perror.o(i.perror))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = perror &rArr; fputs &rArr; fputc &rArr; io_def_uart_putchar &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
</UL>

<P><STRONG><a name="[83d]"></a>pmksa_cache_add_okc</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, pmksa_cache_auth.o(i.pmksa_cache_add_okc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pmksa_cache_add_okc &rArr; pmksa_cache_link_entry &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_link_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[83f]"></a>pmksa_cache_auth_add</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, pmksa_cache_auth.o(i.pmksa_cache_auth_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pmksa_cache_auth_add &rArr; rsn_pmkid &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_get
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_link_entry
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_from_eapol_data
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_pmksa_add
</UL>

<P><STRONG><a name="[845]"></a>pmksa_cache_auth_deinit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pmksa_cache_auth.o(i.pmksa_cache_auth_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pmksa_cache_auth_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pmksa_cache_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
</UL>

<P><STRONG><a name="[843]"></a>pmksa_cache_auth_get</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, pmksa_cache_auth.o(i.pmksa_cache_auth_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pmksa_cache_auth_get &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[846]"></a>pmksa_cache_auth_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pmksa_cache_auth.o(i.pmksa_cache_auth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pmksa_cache_auth_init &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[848]"></a>pmksa_cache_get_okc</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, pmksa_cache_auth.o(i.pmksa_cache_get_okc))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pmksa_cache_get_okc &rArr; rsn_pmkid &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_okc_iter
</UL>

<P><STRONG><a name="[65a]"></a>pmksa_cache_to_eapol_data</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pmksa_cache_auth.o(i.pmksa_cache_to_eapol_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pmksa_cache_to_eapol_data &rArr; wpa_hexdump_ascii &rArr; _wpa_hexdump_ascii &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
</UL>

<P><STRONG><a name="[2e6]"></a>prIotMutexTimedLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, iot_threads_afr.o(i.prIotMutexTimedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>

<P><STRONG><a name="[266]"></a>printBusFaultErrorMsg</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, exception_handler.o(i.printBusFaultErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printBusFaultErrorMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[29f]"></a>printMemoryManagementErrorMsg</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, exception_handler.o(i.printMemoryManagementErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printMemoryManagementErrorMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[29e]"></a>printUsageErrorMsg</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, exception_handler.o(i.printUsageErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printUsageErrorMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[aa]"></a>process_global_event</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, driver_inband.o(i.process_global_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = process_global_event &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Address Reference Count : 3]<UL><LI> wpa_supplicant_entry.o(i.wpa_supplicant_entry_iface_change)
<LI> wpa_supplicant_entry.o(i.wpa_supplicant_entry_op_mode_set)
<LI> driver_inband.o(i.inband_driver_init)
</UL>
<P><STRONG><a name="[31d]"></a>prvHandleToFilenamePrivate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, aws_pkcs11_pal.o(i.prvHandleToFilenamePrivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvHandleToFilenamePrivate
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
</UL>

<P><STRONG><a name="[31b]"></a>prvLabelToFilenameHandle</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, aws_pkcs11_pal.o(i.prvLabelToFilenameHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvLabelToFilenameHandle &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_SaveObject
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_FindObject
</UL>

<P><STRONG><a name="[289]"></a>prvMbedTLS_Initialize</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(i.prvMbedTLS_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = prvMbedTLS_Initialize &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_ConfigureHeap
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_threading_set_alt
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Initialize
</UL>

<P><STRONG><a name="[26e]"></a>prvSessionPointerFromHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aws_pkcs11_mbedtls.o(i.prvSessionPointerFromHandle))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Verify
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Sign
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsFinal
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjects
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestUpdate
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestFinal
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CloseSession
</UL>

<P><STRONG><a name="[252]"></a>pvPortCalloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wrap_heap.o(i.pvPortCalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortRealloc
</UL>

<P><STRONG><a name="[262]"></a>pvPortMalloc</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, wrap_heap.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iot_CreateDetachedThread
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_SubscribeForStateChange
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionDevice
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionCertificate
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCalloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializePuback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getIncomingPacket
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeUnsubscribe
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeSubscribe
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializePublish
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeConnect
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createMqttConnection
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_OpenSession
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsInit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_create
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reallocLoggingBuffer
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fetchOrAllocateJob
</UL>

<P><STRONG><a name="[826]"></a>pvPortRealloc</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, wrap_heap.o(i.pvPortRealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_realloc
</UL>

<P><STRONG><a name="[afb]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[871]"></a>pvTimerGetTimerID</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timers.o(i.pvTimerGetTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerCallback
</UL>

<P><STRONG><a name="[85f]"></a>pxPortInitialiseStack</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[6c3]"></a>raw_bind</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[6d4]"></a>raw_connect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw.o(i.raw_connect))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[6a1]"></a>raw_input</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = raw_input &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input_match
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[819]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, raw.o(i.raw_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[87c]"></a>raw_new</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = raw_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</UL>

<P><STRONG><a name="[837]"></a>raw_new_ip_type</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = raw_new_ip_type &rArr; raw_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[838]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[6d7]"></a>raw_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = raw_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[6db]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[6dc]"></a>raw_sendto</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = raw_sendto &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[37a]"></a>rc4_skip</STRONG> (Thumb, 218 bytes, Stack size 292 bytes, rc4.o(i.rc4_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rc4_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[a83]"></a>register_eapol_rx_socket</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ethernetif.o(i.register_eapol_rx_socket))
<BR><BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
</UL>

<P><STRONG><a name="[a80]"></a>register_eapol_rx_socket_dual_intf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ethernetif.o(i.register_eapol_rx_socket_dual_intf))
<BR><BR>[Called By]<UL><LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_dual_iface
</UL>

<P><STRONG><a name="[66c]"></a>register_preocess_global_event</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, wifi_scan.o(i.register_preocess_global_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = register_preocess_global_event
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_op_mode_set
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
</UL>

<P><STRONG><a name="[1de]"></a>release_sf_lock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_sfc.o(i.release_sf_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = release_sf_lock &rArr; free_sf_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_direct_read (via Veneer)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read (via Veneer)
</UL>

<P><STRONG><a name="[1dc]"></a>retrieve_sf_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash_sfc.o(i.retrieve_sf_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = retrieve_sf_lock &rArr; get_sf_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_direct_read (via Veneer)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read (via Veneer)
</UL>

<P><STRONG><a name="[3fd]"></a>rijndaelKeySetupEnc</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, aes-internal.o(i.rijndaelKeySetupEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rijndaelKeySetupEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupDec
</UL>

<P><STRONG><a name="[841]"></a>rsn_pmkid</STRONG> (Thumb, 76 bytes, Stack size 96 bytes, wpa_common.o(i.rsn_pmkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = rsn_pmkid &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_get_okc
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add
</UL>

<P><STRONG><a name="[34]"></a>runDemoTask</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, iot_demo_afr.o(i.runDemoTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = runDemoTask &rArr; _initialize &rArr; AwsIotNetworkManager_EnableNetwork &rArr; _wifiEnable &rArr; WIFI_On &rArr; _mtk_wifi_bootstrap &rArr; _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_GetNetworkInterface
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cleanup
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_demo_runner.o(i.DEMO_RUNNER_RunDemos)
</UL>
<P><STRONG><a name="[883]"></a>sha1_prf</STRONG> (Thumb, 162 bytes, Stack size 112 bytes, sha1.o(i.sha1_prf))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gmk_to_gtk
</UL>

<P><STRONG><a name="[5b6]"></a>sleepdrv_get_handle</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_get_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sleepdrv_get_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
</UL>

<P><STRONG><a name="[5b0]"></a>sleepdrv_get_lock_index</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_sleep_driver.o(i.sleepdrv_get_lock_index))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_get_lock_status
</UL>

<P><STRONG><a name="[884]"></a>sleepdrv_get_mutex</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_sleep_driver.o(i.sleepdrv_get_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleepdrv_get_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_handle
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
</UL>

<P><STRONG><a name="[5b2]"></a>sleepdrv_hold_sleep_lock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_hold_sleep_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sleepdrv_hold_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
</UL>

<P><STRONG><a name="[886]"></a>sleepdrv_is_handle_valid</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_is_handle_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock
</UL>

<P><STRONG><a name="[5b4]"></a>sleepdrv_release_handle</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_sleep_driver.o(i.sleepdrv_release_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleepdrv_release_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
</UL>

<P><STRONG><a name="[885]"></a>sleepdrv_release_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_sleep_driver.o(i.sleepdrv_release_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_handle
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
</UL>

<P><STRONG><a name="[5b8]"></a>sleepdrv_release_sleep_lock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_release_sleep_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
</UL>

<P><STRONG><a name="[8e5]"></a>sort_scan_array_by_rssi</STRONG> (Thumb, 260 bytes, Stack size 680 bytes, wifi_scan.o(i.sort_scan_array_by_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = sort_scan_array_by_rssi &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wlan_evt_handler
</UL>

<P><STRONG><a name="[267]"></a>stackDump</STRONG> (Thumb, 838 bytes, Stack size 8 bytes, exception_handler.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_check
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[6ba]"></a>stats_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stats.o(i.stats_init))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[7f6]"></a>supplicant_ready_query</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wpa_supplicant_entry.o(i.supplicant_ready_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_op_mode_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_stop_scan
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wpa_psk_key
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wep_key
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_ssid
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_security
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_pmk
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_bssid
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_radio_onoff
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_wpa_psk_key
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_wep_key
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_ssid
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_security
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_pmk
</UL>

<P><STRONG><a name="[685]"></a>switch_context</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wifi_os_api.o(i.switch_context))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
</UL>

<P><STRONG><a name="[810]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_arch_mbox_fetch &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[80d]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[402]"></a>sys_arch_protect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_arch_protect
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
</UL>

<P><STRONG><a name="[6c8]"></a>sys_arch_sem_wait</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_arch_sem_wait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[403]"></a>sys_arch_unprotect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
</UL>

<P><STRONG><a name="[6bb]"></a>sys_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[808]"></a>sys_mbox_free</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_mbox_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[807]"></a>sys_mbox_new</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_mbox_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[912]"></a>sys_mbox_post</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_mbox_post &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[572]"></a>sys_mbox_trypost</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_mbox_trypost &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[6c9]"></a>sys_mutex_lock</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_mutex_lock &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[914]"></a>sys_mutex_new</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mutex_new &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[6c7]"></a>sys_mutex_unlock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_mutex_unlock &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[6d2]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_arch.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[6e8]"></a>sys_sem_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sys_sem_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[6e6]"></a>sys_sem_new</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_sem_new &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[573]"></a>sys_sem_signal</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_sem_signal &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[915]"></a>sys_thread_new</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_thread_new &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[489]"></a>sys_timeout</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, timeouts.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[6c2]"></a>sys_timeouts_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[916]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[866]"></a>system_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys_init.o(i.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = system_init &rArr; prvSetupHardware &rArr; connsys_open &rArr; connsys_bus_get_irq &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_sys_random_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMiscInitialization
</UL>

<P><STRONG><a name="[918]"></a>tcp_abandon</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
</UL>

<P><STRONG><a name="[6d3]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
</UL>

<P><STRONG><a name="[6cb]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[91b]"></a>tcp_alloc</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[6ca]"></a>tcp_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[6c4]"></a>tcp_bind</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[6d0]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[6d6]"></a>tcp_connect</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[928]"></a>tcp_eff_send_mss_impl</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[929]"></a>tcp_enqueue_flags</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[6cf]"></a>tcp_err</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_err &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[92c]"></a>tcp_fasttmr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[6c0]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp.o(i.tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6a3]"></a>tcp_input</STRONG> (Thumb, 2240 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_split_64k
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[933]"></a>tcp_keepalive</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[817]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[839]"></a>tcp_new_ip_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tcp.o(i.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[927]"></a>tcp_next_iss</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[6e0]"></a>tcp_output</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[922]"></a>tcp_pcb_purge</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[919]"></a>tcp_pcb_remove</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[6ce]"></a>tcp_poll</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_poll &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[92d]"></a>tcp_process_refused_data</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_split_64k
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[6cc]"></a>tcp_recv</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[100]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[6da]"></a>tcp_recved</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[93f]"></a>tcp_rexmit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[940]"></a>tcp_rexmit_fast</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[93d]"></a>tcp_rexmit_rto</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[91a]"></a>tcp_rst</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[942]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[92b]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[831]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[930]"></a>tcp_send_empty_ack</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[926]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[6cd]"></a>tcp_sent</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_sent &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[6d1]"></a>tcp_shutdown</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[943]"></a>tcp_slowtmr</STRONG> (Thumb, 1416 bytes, Stack size 56 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[920]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[179]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[923]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[941]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[6df]"></a>tcp_write</STRONG> (Thumb, 1940 bytes, Stack size 120 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[944]"></a>tcp_zero_window_probe</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Called By]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[80e]"></a>tcpip_callback_with_block</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
</UL>

<P><STRONG><a name="[6f1]"></a>tcpip_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tcpip_init
</UL>

<P><STRONG><a name="[946]"></a>tcpip_inpkt</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_inpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcpip_inpkt &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[83]"></a>tcpip_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ethernetif.o(i.ethernetif_init)
<LI> netif.o(i.netif_init)
</UL>
<P><STRONG><a name="[80a]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_send_msg_wait_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[339]"></a>top_mcu_freq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, top.o(i.top_mcu_freq_get))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_translate_timeout
</UL>

<P><STRONG><a name="[950]"></a>top_xtal_freq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, top.o(i.top_xtal_freq_get))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
</UL>

<P><STRONG><a name="[337]"></a>top_xtal_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, top.o(i.top_xtal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = top_xtal_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[5c4]"></a>uart_dma_channel_to_callback_data</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(i.uart_dma_channel_to_callback_data))
<BR><BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[954]"></a>uart_enable_dma</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.uart_enable_dma))
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[94a]"></a>uart_error_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_uart.o(i.uart_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_error_handler &rArr; uart_verify_error
</UL>
<BR>[Calls]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_verify_error
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_purge_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
</UL>

<P><STRONG><a name="[8c]"></a>uart_interrupt_handler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, uart.o(i.uart_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_interrupt_handler &rArr; uart_send_handler &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_purge_fifo
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handler
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_interrupt_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(i.hal_uart_register_callback)
</UL>
<P><STRONG><a name="[5c3]"></a>uart_port_to_dma_channel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart.o(i.uart_port_to_dma_channel))
<BR><BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma_timeout
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[94c]"></a>uart_purge_fifo</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(i.uart_purge_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_purge_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handler
</UL>

<P><STRONG><a name="[94d]"></a>uart_query_interrupt_type</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, uart.o(i.uart_query_interrupt_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_query_interrupt_type
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
</UL>

<P><STRONG><a name="[948]"></a>uart_receive_handler</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, hal_uart.o(i.uart_receive_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_receive_handler &rArr; vdma_disable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_disable_interrupt
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_receive_bytes
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_callback_handler
</UL>

<P><STRONG><a name="[5bd]"></a>uart_reset_default_value</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, uart.o(i.uart_reset_default_value))
<BR><BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[949]"></a>uart_send_handler</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, hal_uart.o(i.uart_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_send_handler &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_disable_interrupt
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_send_space
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_callback_handler
</UL>

<P><STRONG><a name="[5be]"></a>uart_set_baudrate</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, uart.o(i.uart_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_set_baudrate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_freq_get
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[5c0]"></a>uart_set_fifo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(i.uart_set_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_set_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[5bf]"></a>uart_set_format</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(i.uart_set_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_set_format
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[5c1]"></a>uart_set_sleep_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.uart_set_sleep_mode))
<BR><BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[952]"></a>uart_unmask_receive_interrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(i.uart_unmask_receive_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_unmask_receive_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[951]"></a>uart_unmask_send_interrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(i.uart_unmask_send_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_unmask_send_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[94b]"></a>uart_verify_error</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.uart_verify_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_verify_error
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handler
</UL>

<P><STRONG><a name="[4ad]"></a>udp_bind</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[4ae]"></a>udp_connect</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[6d8]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</UL>

<P><STRONG><a name="[6bf]"></a>udp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp.o(i.udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6a2]"></a>udp_input</STRONG> (Thumb, 490 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[818]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[4ac]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[4ca]"></a>udp_new_ip_type</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, udp.o(i.udp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>

<P><STRONG><a name="[4af]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[49e]"></a>udp_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</UL>

<P><STRONG><a name="[6dd]"></a>udp_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[4dd]"></a>udp_sendto</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[4b6]"></a>udp_sendto_if</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>

<P><STRONG><a name="[4a4]"></a>udp_sendto_if_src</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[957]"></a>unregister_eapol_rx_socket_dual_intf</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ethernetif.o(i.unregister_eapol_rx_socket_dual_intf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = unregister_eapol_rx_socket_dual_intf &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
</UL>

<P><STRONG><a name="[98f]"></a>unregister_preocess_global_event</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, wifi_scan.o(i.unregister_preocess_global_event))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_deinit
</UL>

<P><STRONG><a name="[84b]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[911]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[958]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, queue.o(i.uxQueueSpacesAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_get_space
</UL>

<P><STRONG><a name="[af4]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[959]"></a>vAlternateKeyProvisioning</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aws_dev_mode_key_provisioning.o(i.vAlternateKeyProvisioning))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = vAlternateKeyProvisioning &rArr; xProvisionDevice &rArr; xProvisionCertificate &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionDevice
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xInitializePkcsSession
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDevModeKeyProvisioning
</UL>

<P><STRONG><a name="[95c]"></a>vApplicationDaemonTaskStartupHook</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.vApplicationDaemonTaskStartupHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = vApplicationDaemonTaskStartupHook &rArr; prvWifiConnect &rArr; WIFI_On &rArr; _mtk_wifi_bootstrap &rArr; _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDevModeKeyProvisioning
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_RUNNER_RunDemos
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationWrapperTask
</UL>

<P><STRONG><a name="[968]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aws_demo.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[afe]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aws_demo.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[95e]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, iot_demo_afr.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vApplicationStackOverflowHook &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[95d]"></a>vDevModeKeyProvisioning</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aws_dev_mode_key_provisioning.o(i.vDevModeKeyProvisioning))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = vDevModeKeyProvisioning &rArr; vAlternateKeyProvisioning &rArr; xProvisionDevice &rArr; xProvisionCertificate &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAlternateKeyProvisioning
</UL>
<BR>[Called By]<UL><LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
</UL>

<P><STRONG><a name="[853]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[85e]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[84d]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[84c]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[280]"></a>vLoggingPrintf</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, aws_logging_task_dynamic_buffers.o(i.vLoggingPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_close
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionDevice
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionCertificate
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_unlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_lock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsInit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjects
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_register_callbacks
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_mode_switch_wrapper
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_mode_switch_dup
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_is_ready
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_ready_callback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPrivateKeySigningCallback
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGenerateRandomBytes
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_get_link_status
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wpa_psk_key
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wep_key
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_ssid
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_security_mode
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_radio
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_channel
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_reload_setting
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_mac_address
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetJobAddFromISR
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_deliver_tcpip
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_intr_enhance_mode_dispatch
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init2
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init1
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_raw_pkt_sender
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_scatter
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_split_64k
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_get_irq
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task_init
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_channel_list_init
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_init_config
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_pwr_from_str
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ip_from_str
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_patch_download_get_semaphore_event_check
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_done
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_download_CmdAddressLenReq_event_check
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_fw_direct_download
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_pda_config
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_finish
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_download_body
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_intr_enhance_mode_receive_one_data
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_img_direct_download
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_patch_semaphore
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fw_download_Tx_Scatter
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_download_wifi_profile
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_intr_enhance_mode_receive_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_give_n9_own
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_get_own_enable_int
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_giveup_ownership
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_ownership
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_fifo_read
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_enhance_mode
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_abnormal_interrupt_check
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_is_ap_ip_ready
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_is_ap_connected
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wlan_evt_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cf_credential_handler
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_tx_buf_unlock
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_tx_buf_lock
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_mfree
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_malloc
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_job_add
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_beacon_probe_rsp_parser
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_take_channel_list_mutex
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_country_channel_list
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_get_sta_list
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_disconnect_sta
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_op_mode_set
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg_ctrl
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump_ascii
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_notification_callback
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_conf_ap
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_beacon
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_sta_deauth
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_key
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_scan_results
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_driver_cmd
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_connect
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_associate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wpa_psk_key
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wep_key
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_ssid
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_security
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_pmk
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_bssid
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_wpa_psk_key
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_wep_key
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_ssid
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_security
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_pmk
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_msg_recv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_config
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_driver
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_overflow
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_send
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_validate_bssid_configuration
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_derive_psk
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_read_wpa_psk
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_send
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;none_driver_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;none_driver_hapd_init
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gmk
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_ptk_update
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_buildReq
</UL>

<P><STRONG><a name="[84f]"></a>vPortEnterCritical</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_enter_critical
</UL>

<P><STRONG><a name="[851]"></a>vPortExitCritical</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_exit_critical
</UL>

<P><STRONG><a name="[31]"></a>vPortFree</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, wrap_heap.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLoggingTask
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iot_CreateDetachedThread
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_RemoveSubscription
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionDevice
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionCertificate
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_InvokeSubscriptionCallback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getIncomingPacket
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByTopicFilter
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FreePacket
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_ReceiveCallback
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqttSubscription_tryDestroy
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createMqttConnection
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Cleanup
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValueCleanup
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_OpenSession
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsFinal
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CloseSession
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_stop
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_take_and_free
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortRealloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_threadRoutineWrapper
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyConnection
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_release_alloc_info_lists
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reallocLoggingBuffer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tryCancelInternal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyJob
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iot_mqtt_subscription.o(i._IotMqtt_RemoveSubscriptionByPacket)
<LI> aws_crypto.o(i.CRYPTO_ConfigureHeap)
</UL>
<P><STRONG><a name="[af5]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port_tick.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[960]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[270]"></a>vQueueDelete</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLoggingTaskInitialize
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Destroy
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Destroy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_free
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CloseSession
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_take_and_free
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_mutex_free
</UL>

<P><STRONG><a name="[86e]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2a5]"></a>vTaskDelay</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_sleep
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sleep
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerDestroy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_SleepMs
</UL>

<P><STRONG><a name="[3c1]"></a>vTaskDelete</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runDemoTask
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationWrapperTask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRxSelect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_stop
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_delete
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_threadRoutineWrapper
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_networkReceiveTask
</UL>

<P><STRONG><a name="[af9]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[875]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[964]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[962]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[965]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[966]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[967]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, tasks.o(i.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[2a1]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimeMs
</UL>

<P><STRONG><a name="[6f4]"></a>vTaskStartScheduler</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86c]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[233]"></a>vTaskSwitchContext</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[5ce]"></a>vdma_configure</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vdma_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[94f]"></a>vdma_disable_interrupt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vdma_disable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
</UL>

<P><STRONG><a name="[5cb]"></a>vdma_enable_interrupt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_enable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vdma_enable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[94e]"></a>vdma_get_available_receive_bytes</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_get_available_receive_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vdma_get_available_receive_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
</UL>

<P><STRONG><a name="[5c9]"></a>vdma_get_available_send_space</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hal_pdma_internal.o(i.vdma_get_available_send_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vdma_get_available_send_space
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
</UL>

<P><STRONG><a name="[5cd]"></a>vdma_init</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, hal_pdma_internal.o(i.vdma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vdma_init &rArr; hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_clock
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[5ca]"></a>vdma_push_data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_pdma_internal.o(i.vdma_push_data))
<BR><BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
</UL>

<P><STRONG><a name="[5c5]"></a>vdma_register_callback</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hal_pdma_internal.o(i.vdma_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vdma_register_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[5c6]"></a>vdma_register_timeout_callback</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hal_pdma_internal.o(i.vdma_register_timeout_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vdma_register_timeout_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[5d1]"></a>vdma_set_alert_length</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_set_alert_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vdma_set_alert_length
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[5cf]"></a>vdma_set_threshold</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_set_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vdma_set_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[5d3]"></a>vdma_set_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_set_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vdma_set_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma_timeout
</UL>

<P><STRONG><a name="[953]"></a>vdma_start</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, hal_pdma_internal.o(i.vdma_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vdma_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[120]"></a>wake_up_eloop_recv</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, wpa_supplicant_entry.o(i.wake_up_eloop_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wake_up_eloop_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant_entry.o(i.wpa_supplicant_entry)
</UL>
<P><STRONG><a name="[970]"></a>wifi_api_event_trigger</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wifi_scan.o(i.wifi_api_event_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wifi_api_event_trigger &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
</UL>

<P><STRONG><a name="[971]"></a>wifi_api_set_event_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wifi_scan.o(i.wifi_api_set_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wifi_api_set_event_handler &rArr; wifi_set_notification_callback &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_notification_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_register_event_handler
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_unregister_event_handler
</UL>

<P><STRONG><a name="[97e]"></a>wifi_build_country_channel_list</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, wifi_channel.o(i.wifi_build_country_channel_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wifi_build_country_channel_list &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_give
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_channel_list_init
</UL>

<P><STRONG><a name="[187]"></a>wifi_cf_credential_handler</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, wifi_scan.o(i.wifi_cf_credential_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wifi_cf_credential_handler &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_disable
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_deinit
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sys_reboot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(.constdata)
</UL>
<P><STRONG><a name="[982]"></a>wifi_channel_list_init</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, wifi_channel.o(i.wifi_channel_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wifi_channel_list_init &rArr; wifi_build_country_channel_list &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_create_mutex
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_country_channel_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[97c]"></a>wifi_conf_get_ch_table_from_str</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, get_profile_string.o(i.wifi_conf_get_ch_table_from_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wifi_conf_get_ch_table_from_str &rArr; parse_ch_triplet &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ch_triplet
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_char
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_init_config
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
</UL>

<P><STRONG><a name="[983]"></a>wifi_conf_get_ip_from_str</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, get_profile_string.o(i.wifi_conf_get_ip_from_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wifi_conf_get_ip_from_str &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_char
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
</UL>

<P><STRONG><a name="[984]"></a>wifi_conf_get_pwr_from_str</STRONG> (Thumb, 170 bytes, Stack size 304 bytes, get_profile_string.o(i.wifi_conf_get_pwr_from_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wifi_conf_get_pwr_from_str &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_char
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_single_sku_from_nvdm
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
</UL>

<P><STRONG><a name="[588]"></a>wifi_config_get_mac_address</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wifi_init.o(i.wifi_config_get_mac_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wifi_config_get_mac_address &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_is_port_valid
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac_addr_from_efuse
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
</UL>

<P><STRONG><a name="[9b3]"></a>wifi_config_get_n9_auto_scan_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_private_api.o(i.wifi_config_get_n9_auto_scan_status))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wlan_evt_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_scan
</UL>

<P><STRONG><a name="[9b4]"></a>wifi_config_get_n9log_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_private_api.o(i.wifi_config_get_n9log_handler))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wlan_evt_n9_log_handler
</UL>

<P><STRONG><a name="[3a1]"></a>wifi_config_get_opmode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wifi_api.o(i.wifi_config_get_opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wifi_config_get_opmode &rArr; wifi_inband_opmode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_opmode
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_disconnect_cbk
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_mode_switch_dup
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_ready_callback
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_radio
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_channel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wlan_evt_handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_get_sta_list
</UL>

<P><STRONG><a name="[3e9]"></a>wifi_config_get_scan_channel_number</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wifi_private_api.o(i.wifi_config_get_scan_channel_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wifi_config_get_scan_channel_number &rArr; wifi_take_channel_list_mutex &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_take_channel_list_mutex
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parse_bg_band_num
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_give_channel_list_mutex
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_country_channel_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[9f0]"></a>wifi_config_get_scan_table_size</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wifi_scan.o(i.wifi_config_get_scan_table_size))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_scan_results
</UL>

<P><STRONG><a name="[68c]"></a>wifi_config_register_n9log_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wifi_private_api.o(i.wifi_config_register_n9log_handler))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_init
</UL>

<P><STRONG><a name="[350]"></a>wifi_config_reload_setting</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wifi_api.o(i.wifi_config_reload_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wifi_config_reload_setting &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_security_valid
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_set_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[3b5]"></a>wifi_config_set_channel</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wifi_api.o(i.wifi_config_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wifi_config_set_channel &rArr; wifi_config_get_opmode &rArr; wifi_inband_opmode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_is_port_valid
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
</UL>

<P><STRONG><a name="[9a9]"></a>wifi_config_set_n9_auto_scan_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_private_api.o(i.wifi_config_set_n9_auto_scan_status))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wlan_evt_handler
</UL>

<P><STRONG><a name="[3bf]"></a>wifi_config_set_opmode</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, wifi_api.o(i.wifi_config_set_opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wifi_config_set_opmode &rArr; wifi_config_get_opmode &rArr; wifi_inband_opmode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_is_opmode_valid
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_unlock_sleep
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_sleep_handle
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_release_sleep_handle
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_lock_sleep
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_opmode
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_preocess_global_event
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_mode_switch_wrapper
</UL>

<P><STRONG><a name="[357]"></a>wifi_config_set_radio</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, wifi_api.o(i.wifi_config_set_radio))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wifi_config_set_radio &rArr; wifi_config_get_opmode &rArr; wifi_inband_opmode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_unlock_sleep_all
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_radio_on
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
</UL>

<P><STRONG><a name="[3b7]"></a>wifi_config_set_security_mode</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wifi_api.o(i.wifi_config_set_security_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wifi_config_set_security_mode &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_is_port_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
</UL>

<P><STRONG><a name="[3b6]"></a>wifi_config_set_ssid</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wifi_api.o(i.wifi_config_set_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wifi_config_set_ssid &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_is_port_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
</UL>

<P><STRONG><a name="[3b8]"></a>wifi_config_set_wep_key</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, wifi_api.o(i.wifi_config_set_wep_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wifi_config_set_wep_key &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtoH
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
</UL>

<P><STRONG><a name="[3b9]"></a>wifi_config_set_wpa_psk_key</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, wifi_api.o(i.wifi_config_set_wpa_psk_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wifi_config_set_wpa_psk_key &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_is_port_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
</UL>

<P><STRONG><a name="[992]"></a>wifi_connection_disconnect_sta</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wifi_api.o(i.wifi_connection_disconnect_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wifi_connection_disconnect_sta &rArr; wifi_inband_disconnect &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_sta_deauth
</UL>

<P><STRONG><a name="[3cd]"></a>wifi_connection_get_link_status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wifi_api.o(i.wifi_connection_get_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wifi_connection_get_link_status &rArr; wifi_inband_get_link_status &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_get_link_status
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_disconnect_cbk
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_wow
</UL>

<P><STRONG><a name="[995]"></a>wifi_connection_get_sta_list</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wifi_api.o(i.wifi_connection_get_sta_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wifi_connection_get_sta_list &rArr; wifi_config_get_opmode &rArr; wifi_inband_opmode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_get_station_list
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
</UL>

<P><STRONG><a name="[3a4]"></a>wifi_connection_inform_ip_ready</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wifi_private_api.o(i.wifi_connection_inform_ip_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wifi_connection_inform_ip_ready &rArr; wifi_inband_set_wifi_privilege &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_wifi_privilege
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_evt_port_secure_cbk
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_ready_callback
</UL>

<P><STRONG><a name="[3c0]"></a>wifi_connection_register_event_handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wifi_api.o(i.wifi_connection_register_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wifi_connection_register_event_handler &rArr; wifi_api_set_event_handler &rArr; wifi_set_notification_callback &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_api_set_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_register_callbacks
</UL>

<P><STRONG><a name="[3b0]"></a>wifi_connection_stop_scan</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wifi_api.o(i.wifi_connection_stop_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wifi_connection_stop_scan &rArr; wifi_inband_stop_scan &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_stop_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_sta_ip_is_ready
</UL>

<P><STRONG><a name="[999]"></a>wifi_connection_unregister_event_handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wifi_api.o(i.wifi_connection_unregister_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wifi_connection_unregister_event_handler &rArr; wifi_api_set_event_handler &rArr; wifi_set_notification_callback &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_api_set_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_unregister_event_notifier
</UL>

<P><STRONG><a name="[4c0]"></a>wifi_connection_unregister_event_notifier</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wifi_api.o(i.wifi_connection_unregister_event_notifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wifi_connection_unregister_event_notifier &rArr; wifi_connection_unregister_event_handler &rArr; wifi_api_set_event_handler &rArr; wifi_set_notification_callback &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_unregister_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_stop
</UL>

<P><STRONG><a name="[979]"></a>wifi_country_code_region_mapping</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wifi_api.o(i.wifi_country_code_region_mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wifi_country_code_region_mapping &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_config
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
</UL>

<P><STRONG><a name="[18d]"></a>wifi_event_proxy_handler</STRONG> (Thumb, 98 bytes, Stack size 88 bytes, wifi_scan.o(i.wifi_event_proxy_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wifi_event_proxy_handler &rArr; wifi_os_task_exit_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_exit_critical
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_scan.o(.constdata)
</UL>
<P><STRONG><a name="[7fb]"></a>wifi_get_country_channel_list</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_channel.o(i.wifi_get_country_channel_list))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_scan_channel_number
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
</UL>

<P><STRONG><a name="[980]"></a>wifi_get_default_config</STRONG> (Thumb, 556 bytes, Stack size 16 bytes, wifi_default_config.o(i.wifi_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wifi_get_default_config &rArr; wifi_conf_get_pwr_from_str &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_mac_address
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_ps_mode
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_country_code_region_mapping
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strncpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_pwr_from_str
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ip_from_str
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ch_table_from_str
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_whole_config
</UL>

<P><STRONG><a name="[99a]"></a>wifi_get_ps_mode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_init.o(i.wifi_get_ps_mode))
<BR><BR>[Called By]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
</UL>

<P><STRONG><a name="[a2b]"></a>wifi_get_security_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_init.o(i.wifi_get_security_valid))
<BR><BR>[Called By]<UL><LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[107]"></a>wifi_get_single_sku_from_nvdm</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wifi_init.o(i.wifi_get_single_sku_from_nvdm))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wifi_get_single_sku_from_nvdm &rArr; wifi_conf_get_pwr_from_str &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_pwr_from_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_init.o(i.wifi_init_register_callback)
</UL>
<P><STRONG><a name="[7fc]"></a>wifi_give_channel_list_mutex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_channel.o(i.wifi_give_channel_list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wifi_give_channel_list_mutex &rArr; wifi_os_semphr_give &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_give
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_scan_channel_number
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
</UL>

<P><STRONG><a name="[99c]"></a>wifi_inband_bssid</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, wifi_inband.o(i.wifi_inband_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wifi_inband_bssid &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_wow
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_bssid
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_connect
</UL>

<P><STRONG><a name="[989]"></a>wifi_inband_channel</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, wifi_inband.o(i.wifi_inband_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wifi_inband_channel &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_channel
</UL>

<P><STRONG><a name="[993]"></a>wifi_inband_disconnect</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, wifi_inband.o(i.wifi_inband_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wifi_inband_disconnect &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_disconnect_sta
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_disconnect
</UL>

<P><STRONG><a name="[994]"></a>wifi_inband_get_link_status</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wifi_inband.o(i.wifi_inband_get_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wifi_inband_get_link_status &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_get_link_status
</UL>

<P><STRONG><a name="[996]"></a>wifi_inband_get_station_list</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, wifi_inband.o(i.wifi_inband_get_station_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wifi_inband_get_station_list &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_get_sta_list
</UL>

<P><STRONG><a name="[7ff]"></a>wifi_inband_opmode</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, wifi_inband.o(i.wifi_inband_opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wifi_inband_opmode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_connect
</UL>

<P><STRONG><a name="[990]"></a>wifi_inband_radio_on</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, wifi_inband.o(i.wifi_inband_radio_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wifi_inband_radio_on &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_radio
</UL>

<P><STRONG><a name="[801]"></a>wifi_inband_scan_custom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wifi_inband.o(i.wifi_inband_scan_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wifi_inband_scan_custom &rArr; _do_isr &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
</UL>

<P><STRONG><a name="[7f0]"></a>wifi_inband_set_ap_start</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wifi_inband.o(i.wifi_inband_set_ap_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wifi_inband_set_ap_start &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_ap_start
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_connect
</UL>

<P><STRONG><a name="[7f1]"></a>wifi_inband_set_ap_stop</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wifi_inband.o(i.wifi_inband_set_ap_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wifi_inband_set_ap_stop &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_ap_stop
</UL>

<P><STRONG><a name="[99d]"></a>wifi_inband_set_auth_mode</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wifi_inband.o(i.wifi_inband_set_auth_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wifi_inband_set_auth_mode &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_associate
</UL>

<P><STRONG><a name="[99e]"></a>wifi_inband_set_encryption</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wifi_inband.o(i.wifi_inband_set_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wifi_inband_set_encryption &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_associate
</UL>

<P><STRONG><a name="[99f]"></a>wifi_inband_set_is_ap_connected</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wifi_inband.o(i.wifi_inband_set_is_ap_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wifi_inband_set_is_ap_connected &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_is_ap_connected
</UL>

<P><STRONG><a name="[9a0]"></a>wifi_inband_set_is_ap_ip_ready</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wifi_inband.o(i.wifi_inband_set_is_ap_ip_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wifi_inband_set_is_ap_ip_ready &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_is_ap_ip_ready
</UL>

<P><STRONG><a name="[9a1]"></a>wifi_inband_set_ps_mode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wifi_inband.o(i.wifi_inband_set_ps_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wifi_inband_set_ps_mode &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_ps_mode
</UL>

<P><STRONG><a name="[9a2]"></a>wifi_inband_set_wep_key</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wifi_inband.o(i.wifi_inband_set_wep_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wifi_inband_set_wep_key &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_wep_key
</UL>

<P><STRONG><a name="[997]"></a>wifi_inband_set_wifi_privilege</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wifi_inband.o(i.wifi_inband_set_wifi_privilege))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wifi_inband_set_wifi_privilege &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_inform_ip_ready
</UL>

<P><STRONG><a name="[9a3]"></a>wifi_inband_ssid</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, wifi_inband.o(i.wifi_inband_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wifi_inband_ssid &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_ssid
</UL>

<P><STRONG><a name="[9a4]"></a>wifi_inband_ssid_channel</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, wifi_inband.o(i.wifi_inband_ssid_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wifi_inband_ssid_channel &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_connect
</UL>

<P><STRONG><a name="[9a5]"></a>wifi_inband_start_scan</STRONG> (Thumb, 660 bytes, Stack size 72 bytes, wifi_inband.o(i.wifi_inband_start_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wifi_inband_start_scan &rArr; wifi_inband_wireless_mode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_opmode
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_take_channel_list_mutex
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parse_bg_band_num
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parse_a_band_num
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_wireless_mode
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_give_channel_list_mutex
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_country_channel_list
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_scan
</UL>

<P><STRONG><a name="[998]"></a>wifi_inband_stop_scan</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wifi_inband.o(i.wifi_inband_stop_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wifi_inband_stop_scan &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_stop_scan
</UL>

<P><STRONG><a name="[800]"></a>wifi_inband_wireless_mode</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, wifi_inband.o(i.wifi_inband_wireless_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wifi_inband_wireless_mode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
</UL>

<P><STRONG><a name="[3ba]"></a>wifi_init</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, wifi_init.o(i.wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wifi_init &rArr; wifi_build_whole_config &rArr; wifi_get_default_config &rArr; wifi_conf_get_pwr_from_str &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task_init
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_init
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_n9_auto_scan_status
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_channel_list_init
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTaskInit
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_register_callback
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_whole_config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_bootstrap
</UL>

<P><STRONG><a name="[98a]"></a>wifi_is_opmode_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_profile.o(i.wifi_is_opmode_valid))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
</UL>

<P><STRONG><a name="[985]"></a>wifi_is_port_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_profile.o(i.wifi_is_port_valid))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wpa_psk_key
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_ssid
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_security_mode
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_channel
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_mac_address
</UL>

<P><STRONG><a name="[98c]"></a>wifi_lock_sleep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wifi_init.o(i.wifi_lock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wifi_lock_sleep &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[682]"></a>wifi_os_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wifi_os_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_init_config
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_mfree
</UL>

<P><STRONG><a name="[674]"></a>wifi_os_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wifi_os_malloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[319]"></a>wifi_os_queue_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wifi_os_api.o(i.wifi_os_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wifi_os_queue_create &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTaskInit
</UL>

<P><STRONG><a name="[67d]"></a>wifi_os_queue_get_space</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_queue_get_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_os_queue_get_space &rArr; uxQueueSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_get_mq_spaces
</UL>

<P><STRONG><a name="[68e]"></a>wifi_os_queue_receive</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wifi_os_api.o(i.wifi_os_queue_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wifi_os_queue_receive &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_task
</UL>

<P><STRONG><a name="[680]"></a>wifi_os_queue_send</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, wifi_os_api.o(i.wifi_os_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wifi_os_queue_send &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_job_add
</UL>

<P><STRONG><a name="[317]"></a>wifi_os_queue_send_from_isr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wifi_os_api.o(i.wifi_os_queue_send_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wifi_os_queue_send_from_isr &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetJobAddFromISR
</UL>

<P><STRONG><a name="[675]"></a>wifi_os_semphr_create_binary</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_semphr_create_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wifi_os_semphr_create_binary &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[68a]"></a>wifi_os_semphr_create_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_semphr_create_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wifi_os_semphr_create_mutex &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_channel_list_init
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_init
</UL>

<P><STRONG><a name="[683]"></a>wifi_os_semphr_delete</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_semphr_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wifi_os_semphr_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_mfree
</UL>

<P><STRONG><a name="[684]"></a>wifi_os_semphr_give</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_semphr_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wifi_os_semphr_give &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_tx_buf_unlock
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_give_channel_list_mutex
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_country_channel_list
</UL>

<P><STRONG><a name="[31a]"></a>wifi_os_task_create</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, wifi_os_api.o(i.wifi_os_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wifi_os_task_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task_init
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTaskInit
</UL>

<P><STRONG><a name="[9aa]"></a>wifi_os_task_delete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_task_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wifi_os_task_delete &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task
</UL>

<P><STRONG><a name="[666]"></a>wifi_os_task_enter_critical</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_task_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_os_task_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_mfree
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_add_to_wait_list
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_notification_callback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_event_proxy_handler
</UL>

<P><STRONG><a name="[668]"></a>wifi_os_task_exit_critical</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_task_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_os_task_exit_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_mfree
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_add_to_wait_list
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_notification_callback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_event_proxy_handler
</UL>

<P><STRONG><a name="[677]"></a>wifi_os_task_get_handle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_task_get_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_os_task_get_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[678]"></a>wifi_os_task_get_name</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_task_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_os_task_get_name
</UL>
<BR>[Calls]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[671]"></a>wifi_os_task_get_scheduler_state</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_task_get_scheduler_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_os_task_get_scheduler_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[67a]"></a>wifi_os_task_sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wifi_os_task_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[689]"></a>wifi_os_zalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_os_api.o(i.wifi_os_zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wifi_os_zalloc &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_init
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_init_config
</UL>

<P><STRONG><a name="[7fe]"></a>wifi_parse_a_band_num</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wifi_channel.o(i.wifi_parse_a_band_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_parse_a_band_num
</UL>
<BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
</UL>

<P><STRONG><a name="[7fd]"></a>wifi_parse_bg_band_num</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wifi_channel.o(i.wifi_parse_bg_band_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_parse_bg_band_num
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_scan_channel_number
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
</UL>

<P><STRONG><a name="[108]"></a>wifi_profile_auto_record_pmk_info</STRONG> (Thumb, 70 bytes, Stack size 152 bytes, wifi_init.o(i.wifi_profile_auto_record_pmk_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wifi_profile_auto_record_pmk_info &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_init.o(i.wifi_init_register_callback)
</UL>
<P><STRONG><a name="[98e]"></a>wifi_release_sleep_handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_init.o(i.wifi_release_sleep_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_release_sleep_handle &rArr; hal_sleep_manager_release_sleep_handle &rArr; sleepdrv_release_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
</UL>

<P><STRONG><a name="[9ab]"></a>wifi_scan_add_scan_bssid</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wifi_scan.o(i.wifi_scan_add_scan_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wifi_scan_add_scan_bssid &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
</UL>

<P><STRONG><a name="[188]"></a>wifi_scan_ap_rescan</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, wifi_scan.o(i.wifi_scan_ap_rescan))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wifi_scan_ap_rescan &rArr; wifi_inband_start_scan &rArr; wifi_inband_wireless_mode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_get_link_status
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_disconnect
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_bssid
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_api_event_trigger
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_set_scan_bssid_dirty
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_reset_scan_dirty
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_get_scan_bssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(.constdata)
</UL>
<P><STRONG><a name="[9ad]"></a>wifi_scan_get_scan_bssid</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wifi_scan.o(i.wifi_scan_get_scan_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wifi_scan_get_scan_bssid &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
</UL>

<P><STRONG><a name="[9a7]"></a>wifi_scan_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wifi_scan.o(i.wifi_scan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_scan_init &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[185]"></a>wifi_scan_list_handler</STRONG> (Thumb, 1380 bytes, Stack size 144 bytes, wifi_scan.o(i.wifi_scan_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = wifi_scan_list_handler &rArr; wifi_beacon_probe_rsp_parser &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memmove
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_beacon_probe_rsp_parser
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BssCipherParse
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_search_by_bssid
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_add_scan_bssid
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_list_by_rssi
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guery_config_ssid
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cent_ch_by_htinfo
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(.constdata)
</UL>
<P><STRONG><a name="[9b0]"></a>wifi_scan_list_search_by_bssid</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wifi_scan.o(i.wifi_scan_list_search_by_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_scan_list_search_by_bssid &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
</UL>

<P><STRONG><a name="[9f2]"></a>wifi_scan_reset</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, wifi_scan.o(i.wifi_scan_reset))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_scan_results
</UL>

<P><STRONG><a name="[9ae]"></a>wifi_scan_reset_scan_dirty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wifi_scan.o(i.wifi_scan_reset_scan_dirty))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
</UL>

<P><STRONG><a name="[988]"></a>wifi_scan_set_bssid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wifi_scan.o(i.wifi_scan_set_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_scan_set_bssid &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_reload_setting
</UL>

<P><STRONG><a name="[9ac]"></a>wifi_scan_set_scan_bssid_dirty</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wifi_scan.o(i.wifi_scan_set_scan_bssid_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_scan_set_scan_bssid_dirty &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_ap_rescan
</UL>

<P><STRONG><a name="[9f1]"></a>wifi_scan_table_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_scan.o(i.wifi_scan_table_array))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_get_scan_results
</UL>

<P><STRONG><a name="[4c1]"></a>wifi_set_is_ap_connected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wifi_api.o(i.wifi_set_is_ap_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wifi_set_is_ap_connected &rArr; wifi_inband_set_is_ap_connected &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_is_ap_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_wifi_api_rx_event_handler
</UL>

<P><STRONG><a name="[4c2]"></a>wifi_set_is_ap_ip_ready</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wifi_api.o(i.wifi_set_is_ap_ip_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wifi_set_is_ap_ip_ready &rArr; wifi_inband_set_is_ap_ip_ready &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_is_ap_ip_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_wifi_api_rx_event_handler
</UL>

<P><STRONG><a name="[972]"></a>wifi_set_notification_callback</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, wifi_scan.o(i.wifi_set_notification_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wifi_set_notification_callback &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_exit_critical
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_enter_critical
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_api_set_event_handler
</UL>

<P><STRONG><a name="[987]"></a>wifi_set_security_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_init.o(i.wifi_set_security_valid))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_reload_setting
</UL>

<P><STRONG><a name="[98b]"></a>wifi_set_sleep_handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi_init.o(i.wifi_set_sleep_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wifi_set_sleep_handle &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[9b2]"></a>wifi_sleep_manager_get_lock_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wifi_init.o(i.wifi_sleep_manager_get_lock_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_sleep_manager_get_lock_status
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_get_lock_status
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[7fa]"></a>wifi_take_channel_list_mutex</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wifi_channel.o(i.wifi_take_channel_list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wifi_take_channel_list_mutex &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_scan_channel_number
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
</UL>

<P><STRONG><a name="[98d]"></a>wifi_unlock_sleep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wifi_init.o(i.wifi_unlock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wifi_unlock_sleep &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
</UL>

<P><STRONG><a name="[991]"></a>wifi_unlock_sleep_all</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wifi_init.o(i.wifi_unlock_sleep_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wifi_unlock_sleep_all &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_radio
</UL>

<P><STRONG><a name="[45c]"></a>wifi_util_get_inf_number</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, connsys_util.o(i.wifi_util_get_inf_number))
<BR><BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_handler
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_dispatch
</UL>

<P><STRONG><a name="[18b]"></a>wifi_wlan_evt_frame_handler</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wifi_scan.o(i.wifi_wlan_evt_frame_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_wlan_evt_frame_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>wifi_wlan_evt_handler</STRONG> (Thumb, 1760 bytes, Stack size 64 bytes, wifi_scan.o(i.wifi_wlan_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = wifi_wlan_evt_handler &rArr; sort_scan_array_by_rssi &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_n9_auto_scan_status
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_n9_auto_scan_status
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_scan_array_by_rssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>wifi_wlan_evt_n9_log_handler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wifi_scan.o(i.wifi_wlan_evt_n9_log_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_wlan_evt_n9_log_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_n9log_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>wifi_wlan_evt_reason_code</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wifi_scan.o(i.wifi_wlan_evt_reason_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_wlan_evt_reason_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>wifi_wlan_probe_request_handler</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wifi_scan.o(i.wifi_wlan_probe_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_wlan_probe_request_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(.constdata)
</UL>
<P><STRONG><a name="[8cc]"></a>wpa_add_kde</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wpa_auth_ie.o(i.wpa_add_kde))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpa_add_kde &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[64d]"></a>wpa_auth_countermeasures_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_auth_countermeasures_start))
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>

<P><STRONG><a name="[ad1]"></a>wpa_auth_for_each_auth</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_auth_for_each_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_auth_for_each_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[9b9]"></a>wpa_auth_for_each_sta</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_auth_for_each_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_auth_for_each_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeys
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_pmksa_free_cb
</UL>

<P><STRONG><a name="[9b6]"></a>wpa_auth_gen_wpa_ie</STRONG> (Thumb, 138 bytes, Stack size 144 bytes, wpa_auth_ie.o(i.wpa_auth_gen_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wpa_auth_gen_wpa_ie &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_rsn_ie
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[63a]"></a>wpa_auth_get_wpa_ie</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_auth_get_wpa_ie))
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
</UL>

<P><STRONG><a name="[37b]"></a>wpa_auth_logger</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_auth_logger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_auth_logger
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol_timeout
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_ptk
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gmk
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_update_sta
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>

<P><STRONG><a name="[662]"></a>wpa_auth_pairwise_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_auth_pairwise_set))
<BR><BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_send
</UL>

<P><STRONG><a name="[655]"></a>wpa_auth_pmksa_add</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, wpa_auth.o(i.wpa_auth_pmksa_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wpa_auth_pmksa_add &rArr; pmksa_cache_auth_add &rArr; rsn_pmkid &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_finished
</UL>

<P><STRONG><a name="[41e]"></a>wpa_auth_sm_event</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_auth_sm_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_eapol_event
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_disassoc
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[653]"></a>wpa_auth_sm_notify</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_auth_sm_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wpa_auth_sm_notify &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_eapol_event
</UL>

<P><STRONG><a name="[616]"></a>wpa_auth_sta_associated</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_auth_sta_associated))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = wpa_auth_sta_associated &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
</UL>

<P><STRONG><a name="[65e]"></a>wpa_auth_sta_clear_pmksa</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_auth_sta_clear_pmksa))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
</UL>

<P><STRONG><a name="[40d]"></a>wpa_auth_sta_deinit</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_auth_sta_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wpa_auth_sta_deinit &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_free_sta_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[652]"></a>wpa_auth_sta_get_pmksa</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_auth_sta_get_pmksa))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_alloc_eapol_sm
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
</UL>

<P><STRONG><a name="[619]"></a>wpa_auth_sta_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_auth_sta_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_auth_sta_init &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[657]"></a>wpa_auth_sta_key_mgmt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_auth_sta_key_mgmt))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
</UL>

<P><STRONG><a name="[7eb]"></a>wpa_auth_sta_local_mic_failure_report</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_auth_sta_local_mic_failure_report))
<BR><BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>

<P><STRONG><a name="[8c8]"></a>wpa_auth_vlogger</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, wpa_auth.o(i.wpa_auth_vlogger))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wpa_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYESTABLISHED_Enter
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[9bc]"></a>wpa_blacklist_add</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, blacklist.o(i.wpa_blacklist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_blacklist_add &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_connection_failed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
</UL>

<P><STRONG><a name="[9bd]"></a>wpa_blacklist_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, blacklist.o(i.wpa_blacklist_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wpa_blacklist_clear &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pick_network
</UL>

<P><STRONG><a name="[9be]"></a>wpa_blacklist_del</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, blacklist.o(i.wpa_blacklist_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wpa_blacklist_del &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
</UL>

<P><STRONG><a name="[5a0]"></a>wpa_blacklist_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, blacklist.o(i.wpa_blacklist_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_blacklist_get &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_add
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bss_freqs_in_ess
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[9c5]"></a>wpa_bss_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bss.o(i.wpa_bss_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wpa_bss_deinit &rArr; wpa_bss_flush &rArr; wpa_bss_remove &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[9c6]"></a>wpa_bss_flush</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bss.o(i.wpa_bss_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wpa_bss_flush &rArr; wpa_bss_remove &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_del_bss_entry_list
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_remove
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_deinit
</UL>

<P><STRONG><a name="[9ca]"></a>wpa_bss_flush_by_age</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bss.o(i.wpa_bss_flush_by_age))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wpa_bss_flush_by_age &rArr; wpa_bss_remove &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_in_use
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_timeout
</UL>

<P><STRONG><a name="[9cc]"></a>wpa_bss_get</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bss.o(i.wpa_bss_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_bss_get &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_scan_res
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_new_bss
</UL>

<P><STRONG><a name="[7f2]"></a>wpa_bss_get_bssid</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bss.o(i.wpa_bss_get_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_bss_get_bssid &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_wow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_ctrl_get_sta_qos_bit
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_beacon
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_new_bss
</UL>

<P><STRONG><a name="[424]"></a>wpa_bss_get_ie</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, bss.o(i.wpa_bss_get_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_bss_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rsn_preauth_scan_results
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_update_ie
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_beacon_ie
</UL>

<P><STRONG><a name="[420]"></a>wpa_bss_get_vendor_ie</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, bss.o(i.wpa_bss_get_vendor_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_bss_get_vendor_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_update_ie
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_beacon_ie
</UL>

<P><STRONG><a name="[422]"></a>wpa_bss_get_vendor_ie_multi</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, bss.o(i.wpa_bss_get_vendor_ie_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wpa_bss_get_vendor_ie_multi &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
</UL>

<P><STRONG><a name="[9ce]"></a>wpa_bss_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bss.o(i.wpa_bss_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wpa_bss_init &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init_bss_entry_list
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[10c]"></a>wpa_bss_timeout</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bss.o(i.wpa_bss_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wpa_bss_timeout &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush_by_age
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Address Reference Count : 4]<UL><LI> bss.o(i.wpa_bss_deinit)
<LI> bss.o(i.wpa_bss_init)
<LI> bss.o(i.wpa_bss_timeout)
<LI> scan.o(i.wpa_supplicant_get_scan_results)
</UL>
<P><STRONG><a name="[9d6]"></a>wpa_bss_update_end</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bss.o(i.wpa_bss_update_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wpa_bss_update_end &rArr; wpa_bss_remove &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_included_in_scan
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
</UL>

<P><STRONG><a name="[9d7]"></a>wpa_bss_update_scan_res</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, bss.o(i.wpa_bss_update_scan_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = wpa_bss_update_scan_res &rArr; wpa_bss_update &rArr; wpa_bss_compare_res &rArr; are_ies_equal &rArr; wpa_scan_get_vendor_ie_multi &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
</UL>

<P><STRONG><a name="[9d8]"></a>wpa_bss_update_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bss.o(i.wpa_bss_update_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wpa_bss_update_start &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
</UL>

<P><STRONG><a name="[a5f]"></a>wpa_cipher_txt</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wpa_common.o(i.wpa_cipher_txt))
<BR><BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
</UL>

<P><STRONG><a name="[9d9]"></a>wpa_clear_keys</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, wpa_supplicant.o(i.wpa_clear_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wpa_clear_keys &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit_iface
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[9db]"></a>wpa_compare_rsn_ie</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wpa_common.o(i.wpa_compare_rsn_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_compare_rsn_ie &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[9dc]"></a>wpa_config_add_prio_network</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, config.o(i.wpa_config_add_prio_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wpa_config_add_prio_network &rArr; os_mem_realloc &rArr; pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_realloc
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_read
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_new_conf
</UL>

<P><STRONG><a name="[9dd]"></a>wpa_config_alloc_empty</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, config.o(i.wpa_config_alloc_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_config_alloc_empty &rArr; os_mem_strdup &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_strdup
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_read
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_new_conf
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[9de]"></a>wpa_config_alloc_new_conf</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, config_nvram.o(i.wpa_config_alloc_new_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wpa_config_alloc_new_conf &rArr; wpa_config_add_prio_network &rArr; os_mem_realloc &rArr; pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_empty
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free_ssid
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_add_prio_network
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[9e1]"></a>wpa_config_debug_dump_networks</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, config.o(i.wpa_config_debug_dump_networks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_config_debug_dump_networks &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_read
</UL>

<P><STRONG><a name="[9e0]"></a>wpa_config_free</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, config.o(i.wpa_config_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wpa_config_free &rArr; wpa_config_free_ssid &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free_ssid
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_new_conf
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit_iface
</UL>

<P><STRONG><a name="[9e2]"></a>wpa_config_free_blob</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config.o(i.wpa_config_free_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_config_free_blob &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_remove_blob
</UL>

<P><STRONG><a name="[9df]"></a>wpa_config_free_ssid</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, config.o(i.wpa_config_free_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_config_free_ssid &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_read
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_new_conf
</UL>

<P><STRONG><a name="[9e3]"></a>wpa_config_get_blob</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, config.o(i.wpa_config_get_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_config_get_blob &rArr; os_strcmp &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_config_blob
</UL>

<P><STRONG><a name="[9e4]"></a>wpa_config_read</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, config_nvram.o(i.wpa_config_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = wpa_config_read &rArr; wpa_get_setting_from_profile &rArr; wpa_config_set_wpapsk &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strstr
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_debug_dump_networks
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_empty
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free_ssid
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_add_prio_network
</UL>
<BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[9e6]"></a>wpa_config_remove_blob</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, config.o(i.wpa_config_remove_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wpa_config_remove_blob &rArr; wpa_config_free_blob &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_blob
</UL>

<P><STRONG><a name="[802]"></a>wpa_config_set_auth</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, config_nvram.o(i.wpa_config_set_auth))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_security
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[9e7]"></a>wpa_config_set_blob</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, config.o(i.wpa_config_set_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_config_set_blob &rArr; wpa_config_remove_blob &rArr; wpa_config_free_blob &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_remove_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_config_blob
</UL>

<P><STRONG><a name="[803]"></a>wpa_config_set_encr</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, config_nvram.o(i.wpa_config_set_encr))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_security
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[804]"></a>wpa_config_set_prio_bssid</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, config.o(i.wpa_config_set_prio_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpa_config_set_prio_bssid &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_ssid_bssid
</UL>

<P><STRONG><a name="[805]"></a>wpa_config_set_wpapsk</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, config_nvram.o(i.wpa_config_set_wpapsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = wpa_config_set_wpapsk &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_update_psk
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_set_wpa_psk_key
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
</UL>

<P><STRONG><a name="[9e8]"></a>wpa_config_update_psk</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, config.o(i.wpa_config_update_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_wpapsk
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[aca]"></a>wpa_config_write</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, config_nvram.o(i.wpa_config_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_config_blob
</UL>

<P><STRONG><a name="[a74]"></a>wpa_debug_close_file</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpa_debug.o(i.wpa_debug_close_file))
<BR><BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
</UL>

<P><STRONG><a name="[3d2]"></a>wpa_debug_print_timestamp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wpa_debug.o(i.wpa_debug_print_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump_ascii
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump
</UL>

<P><STRONG><a name="[600]"></a>wpa_deinit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wpa_deinit &rArr; pmksa_cache_auth_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
</UL>

<P><STRONG><a name="[aa1]"></a>wpa_driver_inband_apcli_connect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_apcli_connect))
<BR><BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gen_assoc_event
</UL>

<P><STRONG><a name="[192]"></a>wpa_driver_inband_get_sock_recv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_get_sock_recv))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[7f3]"></a>wpa_driver_inband_handle_beacon</STRONG> (Thumb, 132 bytes, Stack size 160 bytes, driver_inband.o(i.wpa_driver_inband_handle_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = wpa_driver_inband_handle_beacon &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_bssid
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_handle_beacon
</UL>

<P><STRONG><a name="[9f3]"></a>wpa_driver_inband_handle_wow</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, driver_inband.o(i.wpa_driver_inband_handle_wow))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = wpa_driver_inband_handle_wow &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_get_link_status
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_bssid
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_connect
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
</UL>

<P><STRONG><a name="[9f5]"></a>wpa_driver_inband_password_error</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, driver_inband.o(i.wpa_driver_inband_password_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_driver_inband_password_error &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
</UL>

<P><STRONG><a name="[7f4]"></a>wpa_driver_inband_set_ps_mode</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, driver_inband.o(i.wpa_driver_inband_set_ps_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wpa_driver_inband_set_ps_mode &rArr; wifi_inband_set_ps_mode &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_ps_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_ps_mode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_associate
</UL>

<P><STRONG><a name="[38c]"></a>wpa_driver_inband_set_wep_key</STRONG> (Thumb, 172 bytes, Stack size 152 bytes, driver_inband.o(i.wpa_driver_inband_set_wep_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wpa_driver_inband_set_wep_key &rArr; wifi_inband_set_wep_key &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_wep_key
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_associate
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
</UL>

<P><STRONG><a name="[37c]"></a>wpa_eapol_key_mic</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, wpa_common.o(i.wpa_eapol_key_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1 (via Veneer)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>
<BR>[Called By]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
</UL>

<P><STRONG><a name="[9f9]"></a>wpa_eapol_key_send</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, wpa.o(i.wpa_eapol_key_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_get_bssid
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_ether_send
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
</UL>

<P><STRONG><a name="[9ff]"></a>wpa_gen_wpa_ie</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, wpa_ie.o(i.wpa_gen_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wpa_gen_wpa_ie &rArr; wpa_gen_wpa_ie_rsn &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_wpa
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_rsn
</UL>
<BR>[Called By]<UL><LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
</UL>

<P><STRONG><a name="[664]"></a>wpa_get_ntp_timestamp</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, common.o(i.wpa_get_ntp_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpa_get_ntp_timestamp &rArr; os_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gmk_to_gtk
</UL>

<P><STRONG><a name="[9e5]"></a>wpa_get_setting_from_profile</STRONG> (Thumb, 374 bytes, Stack size 208 bytes, config_nvram.o(i.wpa_get_setting_from_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = wpa_get_setting_from_profile &rArr; wpa_config_set_wpapsk &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_ps_mode
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_wpapsk
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_encr
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_auth
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_store_wep_key
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_user_wpa_psk_key
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_user_wep_key
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_user_ssid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_read
</UL>

<P><STRONG><a name="[64f]"></a>wpa_gtk_rekey</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_gtk_rekey))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>

<P><STRONG><a name="[389]"></a>wpa_hexdump</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wpa_debug.o(i.wpa_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_ctrl_get_sta_qos_bit
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_wep_key
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_receive
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_ptk_kck_kek
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_key
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_process_drv_event
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_update_psk
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_debug_dump_networks
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_report_ie_mismatch
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_dump
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_send
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_ptk_update
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_link_entry
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_process_nak
</UL>

<P><STRONG><a name="[4f2]"></a>wpa_hexdump_ascii</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wpa_debug.o(i.wpa_hexdump_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = wpa_hexdump_ascii &rArr; _wpa_hexdump_ascii &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_derive_psk
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_to_eapol_data
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_process
</UL>

<P><STRONG><a name="[605]"></a>wpa_hexdump_ascii_key</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wpa_debug.o(i.wpa_hexdump_ascii_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = wpa_hexdump_ascii_key &rArr; _wpa_hexdump_ascii &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_derive_psk
</UL>

<P><STRONG><a name="[378]"></a>wpa_hexdump_key</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wpa_debug.o(i.wpa_hexdump_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wpa_hexdump_key &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_update_psk
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey_broadcast
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_derive_psk
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gmk
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
</UL>

<P><STRONG><a name="[639]"></a>wpa_init</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_init
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
</UL>

<P><STRONG><a name="[62f]"></a>wpa_init_keys</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_init_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = wpa_init_keys &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[3da]"></a>wpa_msg</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, wpa_debug.o(i.wpa_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_remove_iface
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_add_iface
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_stop_sched_scan
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_sched_scan_timeout
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gen_assoc_event
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_delayed_sched_scan_timeout
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_try
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_start
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_scan_res
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_end
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush_by_age
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_sched_scan
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_connect
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_stop_countermeasures
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_connection_failed
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_mac_addr
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_wpa_none_key
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_suites_from_ai
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_driver
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit_iface
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_ssid
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_assoc
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rekey_ptk
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_pmksa_free_cb
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_report_ie_mismatch
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_dump
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_finished
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_abort_auth
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pick_network
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_need_to_roam
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_pmkid_candidate
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_interface_status
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_find_assoc_pmkid
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wnm_action_rx
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_match
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS_Enter
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_PROPOSE_METHOD_Enter
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_PICK_UP_METHOD_Enter
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE_Enter
</UL>

<P><STRONG><a name="[3dd]"></a>wpa_msg_ctrl</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, wpa_debug.o(i.wpa_msg_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wpa_msg_ctrl &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[aa5]"></a>wpa_msg_register_ifname_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_debug.o(i.wpa_msg_register_ifname_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[a1a]"></a>wpa_parse_kde_ies</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, wpa_auth_ie.o(i.wpa_parse_kde_ies))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wpa_parse_kde_ies &rArr; wpa_hexdump_key &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[4e5]"></a>wpa_parse_wpa_ie</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wpa_ie.o(i.wpa_parse_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_inband_update_proto_cipher_from_N9
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_proto_from_ap
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_pairwise_cipher_from_ap
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher_from_ap
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
</UL>

<P><STRONG><a name="[a1c]"></a>wpa_parse_wpa_ie_rsn</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, wpa_common.o(i.wpa_parse_wpa_ie_rsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = wpa_parse_wpa_ie_rsn &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_selector_to_bitfield
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_key_mgmt_to_bitfield
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[a1d]"></a>wpa_parse_wpa_ie_wpa</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, wpa_common.o(i.wpa_parse_wpa_ie_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = wpa_parse_wpa_ie_wpa &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_selector_to_bitfield
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_to_bitfield
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[9ec]"></a>wpa_pmk_to_ptk</STRONG> (Thumb, 224 bytes, Stack size 128 bytes, wpa_common.o(i.wpa_pmk_to_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
</UL>
<BR>[Called By]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_derive_ptk
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_derive_ptk
</UL>

<P><STRONG><a name="[65d]"></a>wpa_receive</STRONG> (Thumb, 2154 bytes, Stack size 112 bytes, wpa_auth.o(i.wpa_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = wpa_receive &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_use_aes_cmac
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_request_new_ptk
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_replay_counter_valid
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_replay_counter_mark_invalid
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
</UL>

<P><STRONG><a name="[7ee]"></a>wpa_remove_ptk</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_remove_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wpa_remove_ptk &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
</UL>

<P><STRONG><a name="[425]"></a>wpa_scan_get_ie</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, scan.o(i.wpa_scan_get_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_scan_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_result_compar
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_max_rate
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_scan_res
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_need_to_roam
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_match
</UL>

<P><STRONG><a name="[421]"></a>wpa_scan_get_vendor_ie</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, scan.o(i.wpa_scan_get_vendor_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_scan_get_vendor_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_result_compar
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_scan_res
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[423]"></a>wpa_scan_get_vendor_ie_multi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, scan.o(i.wpa_scan_get_vendor_ie_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wpa_scan_get_vendor_ie_multi &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
</UL>

<P><STRONG><a name="[3dc]"></a>wpa_scan_results_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, driver_common.o(i.wpa_scan_results_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wpa_scan_results_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_scan_results
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[a2f]"></a>wpa_set_wep_keys</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, wpa_supplicant.o(i.wpa_set_wep_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wpa_set_wep_keys &rArr; wpa_drv_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[a30]"></a>wpa_sm_deinit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wpa.o(i.wpa_sm_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_sm_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[a31]"></a>wpa_sm_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpa_sm_init &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
</UL>

<P><STRONG><a name="[a32]"></a>wpa_sm_key_request</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, wpa.o(i.wpa_sm_key_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = wpa_sm_key_request &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_get_bssid
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_ft
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rekey_ptk
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
</UL>

<P><STRONG><a name="[a35]"></a>wpa_sm_notify_assoc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_notify_assoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpa_sm_notify_assoc &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[9f4]"></a>wpa_sm_notify_connect</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_notify_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wpa_sm_notify_connect &rArr; wpa_supplicant_key_neg_complete &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_wow
</UL>

<P><STRONG><a name="[a37]"></a>wpa_sm_notify_disassoc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wpa.o(i.wpa_sm_notify_disassoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_sm_notify_disassoc &rArr; wpa_driver_inband_password_error &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_password_error
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
</UL>

<P><STRONG><a name="[9fe]"></a>wpa_sm_parse_own_wpa_ie</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_parse_own_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpa_sm_parse_own_wpa_ie &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_suites_from_ai
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_find_assoc_pmkid
</UL>

<P><STRONG><a name="[ac1]"></a>wpa_sm_pmksa_cache_flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_pmksa_cache_flush))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_network_removed
</UL>

<P><STRONG><a name="[a3a]"></a>wpa_sm_rx_eapol</STRONG> (Thumb, 848 bytes, Stack size 80 bytes, wpa.o(i.wpa_sm_rx_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = wpa_sm_rx_eapol &rArr; wpa_supplicant_process_1_of_4 &rArr; wpa_derive_ptk &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[4e2]"></a>wpa_sm_set_ap_rsn_ie</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_set_ap_rsn_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpa_sm_set_ap_rsn_ie &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_process_drv_event
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_update_ie
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_beacon_ie
</UL>

<P><STRONG><a name="[4e4]"></a>wpa_sm_set_ap_wpa_ie</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_set_ap_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpa_sm_set_ap_wpa_ie &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_process_drv_event
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_update_ie
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_beacon_ie
</UL>

<P><STRONG><a name="[4e1]"></a>wpa_sm_set_assoc_wpa_ie</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_set_assoc_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpa_sm_set_assoc_wpa_ie &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_process_drv_event
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
</UL>

<P><STRONG><a name="[a40]"></a>wpa_sm_set_assoc_wpa_ie_default</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, wpa.o(i.wpa_sm_set_assoc_wpa_ie_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wpa_sm_set_assoc_wpa_ie_default &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[a41]"></a>wpa_sm_set_config</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_sm_set_config &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rsn_supp_set_config
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
</UL>

<P><STRONG><a name="[a66]"></a>wpa_sm_set_eapol</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_set_eapol))
<BR><BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[aab]"></a>wpa_sm_set_fast_reauth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_set_fast_reauth))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[aaa]"></a>wpa_sm_set_ifname</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_set_ifname))
<BR><BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[a42]"></a>wpa_sm_set_own_addr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_set_own_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_sm_set_own_addr &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_mac_addr
</UL>

<P><STRONG><a name="[aac]"></a>wpa_sm_set_param</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, wpa.o(i.wpa_sm_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_sm_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[a43]"></a>wpa_sm_set_pmk</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_set_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_sm_set_pmk &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[a44]"></a>wpa_sm_set_pmk_from_pmksa</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wpa.o(i.wpa_sm_set_pmk_from_pmksa))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_sm_set_pmk_from_pmksa &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
</UL>

<P><STRONG><a name="[a64]"></a>wpa_sm_set_scard_ctx</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_set_scard_ctx))
<BR><BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[a45]"></a>wpa_sm_update_replay_ctr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_update_replay_ctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_sm_update_replay_ctr &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[9c2]"></a>wpa_ssid_txt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, common.o(i.wpa_ssid_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_ssid_txt &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[a46]"></a>wpa_supplicant_add_iface</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, wpa_supplicant.o(i.wpa_supplicant_add_iface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = wpa_supplicant_add_iface &rArr; wpa_supplicant_init_iface &rArr; wpa_config_read &rArr; wpa_get_setting_from_profile &rArr; wpa_config_set_wpapsk &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit_iface
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_alloc
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_dual_iface
</UL>

<P><STRONG><a name="[a4a]"></a>wpa_supplicant_ap_deinit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ap.o(i.wpa_supplicant_ap_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[a4b]"></a>wpa_supplicant_ap_rx_eapol</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ap.o(i.wpa_supplicant_ap_rx_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = wpa_supplicant_ap_rx_eapol &rArr; ieee802_1x_receive &rArr; wpa_receive &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[3e7]"></a>wpa_supplicant_associate</STRONG> (Thumb, 1500 bytes, Stack size 472 bytes, wpa_supplicant.o(i.wpa_supplicant_associate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_mgmt2driver
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_suite2driver
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_sched_scan
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bssid_changed
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rsn_supp_set_config
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_driver_bss_selection
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_connection_failed
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_wpa_none_key
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_set_wep_keys
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_get_capa
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_network_changed
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_initiate_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_try
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[3d5]"></a>wpa_supplicant_cancel_auth_timeout</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wpa_supplicant.o(i.wpa_supplicant_cancel_auth_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wpa_supplicant_cancel_auth_timeout &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_del
</UL>
<BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_cancel_auth_timeout
</UL>

<P><STRONG><a name="[7f8]"></a>wpa_supplicant_cancel_scan</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, scan.o(i.wpa_supplicant_cancel_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wpa_supplicant_cancel_scan &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_associate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_stop_scan
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_radio_onoff
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[7f7]"></a>wpa_supplicant_cancel_sched_scan</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scan.o(i.wpa_supplicant_cancel_sched_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wpa_supplicant_cancel_sched_scan &rArr; wpa_supplicant_stop_sched_scan &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_stop_sched_scan
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_sched_scan_timeout
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_stop_scan
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_radio_onoff
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
</UL>

<P><STRONG><a name="[a69]"></a>wpa_supplicant_clear_status</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_clear_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_supplicant_clear_status
</UL>
<BR>[Calls]<UL><LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_state_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
</UL>

<P><STRONG><a name="[3e5]"></a>wpa_supplicant_connect</STRONG> (Thumb, 290 bytes, Stack size 96 bytes, events.o(i.wpa_supplicant_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_state_txt
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scard_init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_new_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[a4e]"></a>wpa_supplicant_create_ap</STRONG> (Thumb, 1228 bytes, Stack size 176 bytes, ap.o(i.wpa_supplicant_create_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_mgmt2driver
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_register_probereq_cb
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_bss_data
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_suite2driver
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ap_deinit
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_conf_ap
</UL>
<BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_dual_iface
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[3d6]"></a>wpa_supplicant_deauthenticate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wpa_supplicant.o(i.wpa_supplicant_deauthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit_iface
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_deauthenticate
</UL>

<P><STRONG><a name="[a70]"></a>wpa_supplicant_deinit</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = wpa_supplicant_deinit &rArr; wpa_supplicant_remove_iface &rArr; wpa_supplicant_deinit_iface &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_unlock_sleep
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sleep_manager_get_lock_status
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_release_sleep_handle
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_daemonize_terminate
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_remove_iface
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_debug_close_file
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_supplicant_deinitialized
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_unregister_methods
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[a76]"></a>wpa_supplicant_delayed_sched_scan</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, scan.o(i.wpa_supplicant_delayed_sched_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wpa_supplicant_delayed_sched_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
</UL>

<P><STRONG><a name="[3d7]"></a>wpa_supplicant_disassociate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wpa_supplicant.o(i.wpa_supplicant_disassociate))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_disassociate
</UL>

<P><STRONG><a name="[a77]"></a>wpa_supplicant_driver_init</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wpa_supplicant_driver_init &rArr; wpa_supplicant_set_state &rArr; wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_mac_addr
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_countermeasures
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_enabled_networks
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_delayed_sched_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_interface_status
</UL>

<P><STRONG><a name="[a2a]"></a>wpa_supplicant_enabled_networks</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scan.o(i.wpa_supplicant_enabled_networks))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_new_scan
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[a79]"></a>wpa_supplicant_entry</STRONG> (Thumb, 634 bytes, Stack size 72 bytes, wpa_supplicant_entry.o(i.wpa_supplicant_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = wpa_supplicant_entry &rArr; wpa_supplicant_entry_iface_change &rArr; wpa_driver_inband_handle_wow &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_eapol_rx_socket_dual_intf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sleep_manager_get_lock_status
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_lock_sleep
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_program_deinit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_api_event_trigger
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_run
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_read_sock
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_dual_iface
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_debug_level
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_task
</UL>

<P><STRONG><a name="[a7b]"></a>wpa_supplicant_entry_debug_level</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_supplicant_entry.o(i.wpa_supplicant_entry_debug_level))
<BR><BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
</UL>

<P><STRONG><a name="[a7c]"></a>wpa_supplicant_entry_dual_iface</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, wpa_supplicant_entry.o(i.wpa_supplicant_entry_dual_iface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = wpa_supplicant_entry_dual_iface &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_eapol_rx_socket_dual_intf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_add_iface
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_op_mode_set
</UL>

<P><STRONG><a name="[a7d]"></a>wpa_supplicant_entry_iface_change</STRONG> (Thumb, 642 bytes, Stack size 24 bytes, wpa_supplicant_entry.o(i.wpa_supplicant_entry_iface_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112<LI>Call Chain = wpa_supplicant_entry_iface_change &rArr; wpa_driver_inband_handle_wow &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_get_wic_wakeup
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_eapol_rx_socket
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_iface
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_add_iface
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_wow
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_remove
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_get_socket
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_preocess_global_event
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_op_mode_set
</UL>

<P><STRONG><a name="[a82]"></a>wpa_supplicant_entry_iface_remove</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wpa_supplicant_entry.o(i.wpa_supplicant_entry_iface_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = wpa_supplicant_entry_iface_remove &rArr; wpa_supplicant_remove_iface &rArr; wpa_supplicant_deinit_iface &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_remove_iface
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_iface
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_op_mode_set
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
</UL>

<P><STRONG><a name="[bd]"></a>wpa_supplicant_entry_op_mode_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_supplicant_entry.o(i.wpa_supplicant_entry_op_mode_get))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[bc]"></a>wpa_supplicant_entry_op_mode_set</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, wpa_supplicant_entry.o(i.wpa_supplicant_entry_op_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136<LI>Call Chain = wpa_supplicant_entry_op_mode_set &rArr; wpa_supplicant_entry_iface_change &rArr; wpa_driver_inband_handle_wow &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_iface
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_remove
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_dual_iface
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_preocess_global_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[38a]"></a>wpa_supplicant_event</STRONG> (Thumb, 2752 bytes, Stack size 112 bytes, events.o(i.wpa_supplicant_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_tx_status
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_rx_from_unknown_sta
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_mgmt_tx_cb
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_mgmt_rx
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_eapol_tx_status
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_client_poll_ok
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_to_string
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_mac_addr
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_wpa_none_key
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_notify_scanning
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_update_replay_ctr
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_probe_req_rx
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_disassoc
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_sta_low_ack
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_unprot_disassoc
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_unprot_deauth
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_pmkid_candidate
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_interface_status
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_get_capa
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wnm_action_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_wow
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gen_assoc_event
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_scan_timeout
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_raw_receive
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_start_scan
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_radio_onoff
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_process_drv_event
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
</UL>

<P><STRONG><a name="[38b]"></a>wpa_supplicant_get_iface</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_get_iface))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_supplicant_get_iface &rArr; os_strcmp &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_op_mode_set
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_remove
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_stop_scan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_start_scan
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_enable_trigger_scan
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_disable_trigger_scan
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
</UL>

<P><STRONG><a name="[3d9]"></a>wpa_supplicant_get_scan_results</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, scan.o(i.wpa_supplicant_get_scan_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + In Cycle
<LI>Call Chain = wpa_supplicant_get_scan_results &rArr;  wpa_driver_inband_handle_wow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_wow
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_start
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_scan_res
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_end
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_scan_results
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[aa0]"></a>wpa_supplicant_get_ssid</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, wpa_supplicant.o(i.wpa_supplicant_get_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wpa_supplicant_get_ssid &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gen_assoc_event
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_network_ctx
</UL>

<P><STRONG><a name="[a7a]"></a>wpa_supplicant_init</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, wpa_supplicant.o(i.wpa_supplicant_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = wpa_supplicant_init &rArr; wpa_supplicant_deinit &rArr; wpa_supplicant_remove_iface &rArr; wpa_supplicant_deinit_iface &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_strdup
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_sleep_handle
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg_register_ifname_cb
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_init
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_supplicant_initialized
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_register_methods
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
</UL>

<P><STRONG><a name="[aae]"></a>wpa_supplicant_init_eapol</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpas_glue.o(i.wpa_supplicant_init_eapol))
<BR><BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[aa9]"></a>wpa_supplicant_init_wpa</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, wpas_glue.o(i.wpa_supplicant_init_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wpa_supplicant_init_wpa &rArr; wpa_sm_init &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[a5a]"></a>wpa_supplicant_initiate_eapol</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpa_supplicant.o(i.wpa_supplicant_initiate_eapol))
<BR><BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gen_assoc_event
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
</UL>

<P><STRONG><a name="[a68]"></a>wpa_supplicant_mark_disassoc</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, events.o(i.wpa_supplicant_mark_disassoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ap_deinit
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bssid_changed
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_interface_status
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
</UL>

<P><STRONG><a name="[a96]"></a>wpa_supplicant_notify_scanning</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scan.o(i.wpa_supplicant_notify_scanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_supplicant_notify_scanning
</UL>
<BR>[Calls]<UL><LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_scanning
</UL>
<BR>[Called By]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_start_sched_scan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_trigger_scan
</UL>

<P><STRONG><a name="[ab7]"></a>wpa_supplicant_parse_ies</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, wpa_ie.o(i.wpa_supplicant_parse_ies))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wpa_supplicant_parse_ies &rArr; wpa_parse_generic &rArr; wpa_hexdump_key &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
</UL>

<P><STRONG><a name="[38e]"></a>wpa_supplicant_reload_configuration</STRONG> (Thumb, 568 bytes, Stack size 416 bytes, wpa_supplicant.o(i.wpa_supplicant_reload_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = wpa_supplicant_reload_configuration &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_get_sta_list
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_fast_reauth
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_pmksa_cache_flush
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_debug_dump_networks
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_new_conf
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_config
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_status
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_inband_cmd
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_ap_scan_changed
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_enabled_networks
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
</UL>

<P><STRONG><a name="[a71]"></a>wpa_supplicant_remove_iface</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wpa_supplicant.o(i.wpa_supplicant_remove_iface))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = wpa_supplicant_remove_iface &rArr; wpa_supplicant_deinit_iface &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_remove
</UL>

<P><STRONG><a name="[a57]"></a>wpa_supplicant_req_auth_timeout</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, wpa_supplicant.o(i.wpa_supplicant_req_auth_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wpa_supplicant_req_auth_timeout &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[38f]"></a>wpa_supplicant_req_scan</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, scan.o(i.wpa_supplicant_req_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_is_timeout_registered
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_handle_wow
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_delayed_sched_scan_timeout
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_try
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_stop_countermeasures
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_connection_failed
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_new_scan
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_disassociate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_deauthenticate
</UL>

<P><STRONG><a name="[3e8]"></a>wpa_supplicant_req_sched_scan</STRONG> (Thumb, 864 bytes, Stack size 200 bytes, scan.o(i.wpa_supplicant_req_sched_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = wpa_supplicant_req_sched_scan &rArr; wpa_supplicant_set_state &rArr; wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_start_sched_scan
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_extra_ies
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_delayed_sched_scan_timeout
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[a59]"></a>wpa_supplicant_rsn_supp_set_config</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, wpas_glue.o(i.wpa_supplicant_rsn_supp_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wpa_supplicant_rsn_supp_set_config &rArr; wpa_sm_set_config &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
</UL>

<P><STRONG><a name="[a7e]"></a>wpa_supplicant_run</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wpa_supplicant_run &rArr; eloop_run &rArr; lwip_select &rArr; lwip_selscan &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_daemon
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
</UL>

<P><STRONG><a name="[11f]"></a>wpa_supplicant_rx_eapol</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, wpa_supplicant.o(i.wpa_supplicant_rx_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = wpa_supplicant_rx_eapol &rArr; wpa_supplicant_ap_rx_eapol &rArr; ieee802_1x_receive &rArr; wpa_receive &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ap_rx_eapol
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_ieee8021x
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wpa_supplicant.o(i.wpa_supplicant_driver_init)
<LI> wpa_supplicant.o(i.wpa_supplicant_update_mac_addr)
</UL>
<P><STRONG><a name="[a6c]"></a>wpa_supplicant_scard_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, events.o(i.wpa_supplicant_scard_init))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[abe]"></a>wpa_supplicant_send_2_of_4</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, wpa.o(i.wpa_supplicant_send_2_of_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = wpa_supplicant_send_2_of_4 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[ac0]"></a>wpa_supplicant_send_4_of_4</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, wpa.o(i.wpa_supplicant_send_4_of_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = wpa_supplicant_send_4_of_4 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[a52]"></a>wpa_supplicant_set_non_wpa_policy</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_set_non_wpa_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wpa_supplicant_set_non_wpa_policy &rArr; wpa_sm_set_assoc_wpa_ie &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
</UL>

<P><STRONG><a name="[3e0]"></a>wpa_supplicant_set_state</STRONG> (Thumb, 496 bytes, Stack size 64 bytes, wpa_supplicant.o(i.wpa_supplicant_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wpa_supplicant_set_state &rArr; wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_sleep
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sleep_manager_get_lock_status
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_lock_sleep
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_state_changed
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_auth_changed
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_state_txt
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_supp_port
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_operstate
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_inband_cmd
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_notify_scanning
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_ap_configured_cb
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_new_scan
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[a51]"></a>wpa_supplicant_set_suites</STRONG> (Thumb, 2082 bytes, Stack size 112 bytes, wpa_supplicant.o(i.wpa_supplicant_set_suites))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = wpa_supplicant_set_suites &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1 (via Veneer)
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk_from_pmksa
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_param
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_update_psk
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_suites_from_ai
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_proto_from_ap
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_pairwise_cipher_from_ap
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher_from_ap
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
</UL>

<P><STRONG><a name="[a54]"></a>wpa_supplicant_set_wpa_none_key</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, wpa_supplicant.o(i.wpa_supplicant_set_wpa_none_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wpa_supplicant_set_wpa_none_key &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[a6d]"></a>wpa_supplicant_state_txt</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, wpa_supplicant.o(i.wpa_supplicant_state_txt))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
</UL>

<P><STRONG><a name="[116]"></a>wpa_supplicant_stop_countermeasures</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, events.o(i.wpa_supplicant_stop_countermeasures))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wpa_supplicant_stop_countermeasures &rArr; wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_countermeasures
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wpa_supplicant.o(i.wpa_supplicant_cleanup)
<LI> events.o(i.wpa_supplicant_event_michael_mic_failure)
</UL>
<P><STRONG><a name="[9a8]"></a>wpa_supplicant_task_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, wpa_supplicant_task.o(i.wpa_supplicant_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wpa_supplicant_task_init &rArr; wifi_os_task_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_create
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[ac9]"></a>wpa_supplicant_trigger_scan</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, scan.o(i.wpa_supplicant_trigger_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_supplicant_trigger_scan &rArr; wpa_supplicant_notify_scanning
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_scan_done
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_notify_scanning
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[ac3]"></a>wpa_supplicant_update_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_update_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wpa_supplicant_update_config &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_country
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
</UL>

<P><STRONG><a name="[a78]"></a>wpa_supplicant_update_mac_addr</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, wpa_supplicant.o(i.wpa_supplicant_update_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = wpa_supplicant_update_mac_addr &rArr; l2_packet_init &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_own_addr
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_deinit
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_get_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
</UL>

<P><STRONG><a name="[a9a]"></a>wpa_supplicant_update_scan_results</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, scan.o(i.wpa_supplicant_update_scan_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wpa_supplicant_update_scan_results &rArr; wpa_supplicant_get_scan_results &rArr;  wpa_driver_inband_handle_wow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_results_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
</UL>
<BR>[Called By]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_beacon_ie
</UL>

<P><STRONG><a name="[61a]"></a>wpa_validate_wpa_ie</STRONG> (Thumb, 950 bytes, Stack size 96 bytes, wpa_auth_ie.o(i.wpa_validate_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wpa_validate_wpa_ie &rArr; pmksa_cache_add_okc &rArr; pmksa_cache_link_entry &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_for_each_auth
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_get
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_add_okc
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[9b7]"></a>wpa_write_rsn_ie</STRONG> (Thumb, 528 bytes, Stack size 56 bytes, wpa_auth_ie.o(i.wpa_write_rsn_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_write_rsn_ie &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
</UL>

<P><STRONG><a name="[4f3]"></a>wpabuf_alloc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wpabuf.o(i.wpabuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpabuf_alloc &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_update_time_adv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildSuccess
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildFailure
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
</UL>

<P><STRONG><a name="[5d7]"></a>wpabuf_alloc_copy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wpabuf.o(i.wpabuf_alloc_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wpabuf_alloc_copy &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_eap_response
</UL>

<P><STRONG><a name="[4e9]"></a>wpabuf_dup</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wpabuf.o(i.wpabuf_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_init
</UL>

<P><STRONG><a name="[40e]"></a>wpabuf_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wpabuf.o(i.wpabuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpabuf_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_eap_response
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_cleanup
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_ap_extra_ies
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS_Enter
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_REQUEST_Enter
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_PASSTHROUGH_Enter
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE_Enter
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_deinit
</UL>

<P><STRONG><a name="[4f1]"></a>wpabuf_put</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wpabuf.o(i.wpabuf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_overflow
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_mhead_u8
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_update_time_adv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildSuccess
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildFailure
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_buildReq
</UL>

<P><STRONG><a name="[5e8]"></a>wpabuf_resize</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, wpabuf.o(i.wpabuf_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wpabuf_resize &rArr; os_mem_realloc &rArr; pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_realloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>

<P><STRONG><a name="[a56]"></a>wpas_connection_failed</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, wpa_supplicant.o(i.wpas_connection_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wpas_connection_failed &rArr; wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_add
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bss_freqs_in_ess
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
</UL>

<P><STRONG><a name="[3e1]"></a>wpas_driver_bss_selection</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wpa_supplicant.o(i.wpas_driver_bss_selection))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_need_to_roam
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[ac2]"></a>wpas_notify_ap_scan_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_ap_scan_changed))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
</UL>

<P><STRONG><a name="[ace]"></a>wpas_notify_auth_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_auth_changed))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[81b]"></a>wpas_notify_bss_freq_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bss_freq_changed))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
</UL>

<P><STRONG><a name="[822]"></a>wpas_notify_bss_ies_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bss_ies_changed))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
</UL>

<P><STRONG><a name="[81e]"></a>wpas_notify_bss_mode_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bss_mode_changed))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
</UL>

<P><STRONG><a name="[81d]"></a>wpas_notify_bss_privacy_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bss_privacy_changed))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
</UL>

<P><STRONG><a name="[823]"></a>wpas_notify_bss_rates_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bss_rates_changed))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
</UL>

<P><STRONG><a name="[820]"></a>wpas_notify_bss_rsnie_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bss_rsnie_changed))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
</UL>

<P><STRONG><a name="[81c]"></a>wpas_notify_bss_signal_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bss_signal_changed))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
</UL>

<P><STRONG><a name="[81f]"></a>wpas_notify_bss_wpaie_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bss_wpaie_changed))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
</UL>

<P><STRONG><a name="[821]"></a>wpas_notify_bss_wps_changed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bss_wps_changed))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
</UL>

<P><STRONG><a name="[a50]"></a>wpas_notify_bssid_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_bssid_changed))
<BR><BR>[Called By]<UL><LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[a5b]"></a>wpas_notify_network_changed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_network_changed))
<BR><BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gen_assoc_event
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
</UL>

<P><STRONG><a name="[a65]"></a>wpas_notify_network_removed</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, notify.o(i.wpas_notify_network_removed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpas_notify_network_removed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_pmksa_cache_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[3df]"></a>wpas_notify_scan_done</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_scan_done))
<BR><BR>[Called By]<UL><LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_trigger_scan
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[3de]"></a>wpas_notify_scan_results</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_scan_results))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[ab5]"></a>wpas_notify_scanning</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_scanning))
<BR><BR>[Called By]<UL><LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_notify_scanning
</UL>

<P><STRONG><a name="[41a]"></a>wpas_notify_sta_authorized</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, notify.o(i.wpas_notify_sta_authorized))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpas_notify_sta_authorized
</UL>
<BR>[Calls]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_ap_sta_deauthorized
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_ap_sta_authorized
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_authorized_cb
</UL>

<P><STRONG><a name="[a6a]"></a>wpas_notify_state_changed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_state_changed))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_status
</UL>

<P><STRONG><a name="[a72]"></a>wpas_notify_supplicant_deinitialized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_supplicant_deinitialized))
<BR><BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit
</UL>

<P><STRONG><a name="[aa7]"></a>wpas_notify_supplicant_initialized</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_supplicant_initialized))
<BR><BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[2f6]"></a>xEventGroupClearBits</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_SetReceiveCallback
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_networkReceiveTask
</UL>

<P><STRONG><a name="[2f0]"></a>xEventGroupCreateStatic</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, event_groups.o(i.xEventGroupCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xEventGroupCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
</UL>

<P><STRONG><a name="[2e9]"></a>xEventGroupSetBits</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Destroy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Close
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_networkReceiveTask
</UL>

<P><STRONG><a name="[2f2]"></a>xEventGroupWaitBits</STRONG> (Thumb, 446 bytes, Stack size 64 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Destroy
</UL>

<P><STRONG><a name="[95a]"></a>xInitializePkcsSession</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, aws_dev_mode_key_provisioning.o(i.xInitializePkcsSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xInitializePkcsSession
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAlternateKeyProvisioning
</UL>

<P><STRONG><a name="[6f3]"></a>xLoggingTaskInitialize</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, aws_logging_task_dynamic_buffers.o(i.xLoggingTaskInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xLoggingTaskInitialize &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96b]"></a>xPortStartScheduler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[af8]"></a>xProvisionCertificate</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, aws_dev_mode_key_provisioning.o(i.xProvisionCertificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = xProvisionCertificate &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetFunctionList
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_pem_to_der
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionDevice
</UL>

<P><STRONG><a name="[95b]"></a>xProvisionDevice</STRONG> (Thumb, 210 bytes, Stack size 96 bytes, aws_dev_mode_key_provisioning.o(i.xProvisionDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = xProvisionDevice &rArr; xProvisionCertificate &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetFunctionList
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProvisionCertificate
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_pem_to_der
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAlternateKeyProvisioning
</UL>

<P><STRONG><a name="[2fd]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Create
</UL>

<P><STRONG><a name="[28b]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_OpenSession
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_create_mutex
</UL>

<P><STRONG><a name="[2e4]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Create
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
</UL>

<P><STRONG><a name="[3bd]"></a>xQueueGenericCreate</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_init
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLoggingTaskInitialize
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_bootstrap
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_create
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_create_binary
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_create
</UL>

<P><STRONG><a name="[854]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
</UL>

<P><STRONG><a name="[85c]"></a>xQueueGenericReset</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[28e]"></a>xQueueGenericSend</STRONG> (Thumb, 530 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Post
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_unlock
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Verify
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Sign
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_bootstrap
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_give
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_give
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Send
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_mutex_unlock
</UL>

<P><STRONG><a name="[913]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_send_from_isr
</UL>

<P><STRONG><a name="[3cb]"></a>xQueueGiveFromISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_event
</UL>

<P><STRONG><a name="[2e7]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
</UL>

<P><STRONG><a name="[864]"></a>xQueueReceive</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLoggingTask
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_receive
</UL>

<P><STRONG><a name="[90f]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
</UL>

<P><STRONG><a name="[28c]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Wait
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_TimedWait
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_lock
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Verify
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Sign
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_take
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_clear
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_putchar
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Send
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_mutex_lock
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prIotMutexTimedLock
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_tx_buf_lock
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_take_channel_list_mutex
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_country_channel_list
</UL>

<P><STRONG><a name="[849]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prIotMutexTimedLock
</UL>

<P><STRONG><a name="[afa]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2f7]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iot_CreateDetachedThread
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLoggingTaskInitialize
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRxSelectSet
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_create
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_SetReceiveCallback
</UL>

<P><STRONG><a name="[969]"></a>xTaskCreateStatic</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2f1]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_get_handle
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Destroy
</UL>

<P><STRONG><a name="[3ca]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_get_scheduler_state
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_blocking_is_safe
</UL>

<P><STRONG><a name="[825]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_random
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
</UL>

<P><STRONG><a name="[335]"></a>xTaskIncrementTick</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[859]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[afc]"></a>xTaskPriorityInherit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[874]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[86d]"></a>xTaskResumeAll</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2a9]"></a>xTimerCreateStatic</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, timers.o(i.xTimerCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerCreateStatic &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerCreate
</UL>

<P><STRONG><a name="[96a]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2a7]"></a>xTimerGenericCommand</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerDestroy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerArm
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerCallback
</UL>

<P><STRONG><a name="[2ab]"></a>xTimerIsTimerActive</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timers.o(i.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTimerIsTimerActive
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerDestroy
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6f2]"></a>prvMiscInitialization</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.prvMiscInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvMiscInitialization &rArr; system_init &rArr; prvSetupHardware &rArr; connsys_open &rArr; connsys_bus_get_irq &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_set_gpio_sleep_mode
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[876]"></a>prvWifiConnect</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, main.o(i.prvWifiConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = prvWifiConnect &rArr; WIFI_On &rArr; _mtk_wifi_bootstrap &rArr; _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>
<BR>[Called By]<UL><LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
</UL>

<P><STRONG><a name="[d2]"></a>vApplicationWrapperTask</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.vApplicationWrapperTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = vApplicationWrapperTask &rArr; vApplicationDaemonTaskStartupHook &rArr; prvWifiConnect &rArr; WIFI_On &rArr; _mtk_wifi_bootstrap &rArr; _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[336]"></a>SystemClock_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_init.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemClock_Config &rArr; top_xtal_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[3a6]"></a>_main_sys_random_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sys_init.o(i._main_sys_random_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _main_sys_random_init &rArr; hal_trng_get_generated_random_number &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[430]"></a>cache_enable</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sys_init.o(i.cache_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cache_enable &rArr; hal_cache_region_config
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_set_size
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_enable
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_disable
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_config
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[870]"></a>prvSetupHardware</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys_init.o(i.prvSetupHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvSetupHardware &rArr; connsys_open &rArr; connsys_bus_get_irq &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_init
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_handle_intr
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_get_wic_wakeup
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_init
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_file_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_open
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_close
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnSerialFlashClkConfTo64M (via Veneer)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo192M
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_get_wic_status
</UL>
<BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[137]"></a>prvLoggingTask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, aws_logging_task_dynamic_buffers.o(i.prvLoggingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvLoggingTask &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_logging_task_dynamic_buffers.o(i.xLoggingTaskInitialize)
</UL>
<P><STRONG><a name="[324]"></a>_cleanupDemo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iot_demo_mqtt.o(i._cleanupDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _cleanupDemo &rArr; IotMqtt_Cleanup &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMqttDemo
</UL>

<P><STRONG><a name="[321]"></a>_establishMqttConnection</STRONG> (Thumb, 284 bytes, Stack size 176 bytes, iot_demo_mqtt.o(i._establishMqttConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = _establishMqttConnection &rArr; IotMqtt_Connect &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_strerror
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimeMs
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMqttDemo
</UL>

<P><STRONG><a name="[320]"></a>_initializeDemo</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, iot_demo_mqtt.o(i._initializeDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _initializeDemo &rArr; IotMqtt_Init &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMqttDemo
</UL>

<P><STRONG><a name="[322]"></a>_modifySubscriptions</STRONG> (Thumb, 380 bytes, Stack size 128 bytes, iot_demo_mqtt.o(i._modifySubscriptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = _modifySubscriptions &rArr; IotMqtt_TimedUnsubscribe &rArr; IotMqtt_Unsubscribe &rArr; _subscriptionCommon &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_TimedUnsubscribe
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_TimedSubscribe
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_IsSubscribed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMqttDemo
</UL>

<P><STRONG><a name="[61]"></a>_mqttSubscriptionCallback</STRONG> (Thumb, 306 bytes, Stack size 144 bytes, iot_demo_mqtt.o(i._mqttSubscriptionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = _mqttSubscriptionCallback &rArr; IotMqtt_Publish &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Post
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Publish
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_demo_mqtt.o(i._modifySubscriptions)
</UL>
<P><STRONG><a name="[64]"></a>_operationCompleteCallback</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, iot_demo_mqtt.o(i._operationCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _operationCompleteCallback &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_strerror
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_demo_mqtt.o(i._publishAllMessages)
</UL>
<P><STRONG><a name="[323]"></a>_publishAllMessages</STRONG> (Thumb, 444 bytes, Stack size 104 bytes, iot_demo_mqtt.o(i._publishAllMessages))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _publishAllMessages &rArr; IotMqtt_Publish &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_TimedWait
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_strerror
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Publish
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMqttDemo
</UL>

<P><STRONG><a name="[37e]"></a>_cleanup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iot_demo_afr.o(i._cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _cleanup &rArr; IotSdk_Cleanup &rArr; IotTaskPool_Destroy &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSdk_Cleanup
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_RemoveSubscription
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runDemoTask
</UL>

<P><STRONG><a name="[394]"></a>_getConnectedNetworkForDemo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iot_demo_afr.o(i._getConnectedNetworkForDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _getConnectedNetworkForDemo &rArr; AwsIotNetworkManager_GetConnectedNetworks &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_GetConnectedNetworks
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_waitForDemoNetworkConnection
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
</UL>

<P><STRONG><a name="[399]"></a>_initialize</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, iot_demo_afr.o(i._initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = _initialize &rArr; AwsIotNetworkManager_EnableNetwork &rArr; _wifiEnable &rArr; WIFI_On &rArr; _mtk_wifi_bootstrap &rArr; _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSdk_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSdk_Cleanup
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_SubscribeForStateChange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_EnableNetwork
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_waitForDemoNetworkConnection
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getConnectedNetworkForDemo
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Destroy
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Create
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runDemoTask
</UL>

<P><STRONG><a name="[60]"></a>_onNetworkStateChangeCallback</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, iot_demo_afr.o(i._onNetworkStateChangeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _onNetworkStateChangeCallback &rArr; _getConnectedNetworkForDemo &rArr; AwsIotNetworkManager_GetConnectedNetworks &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_GetNetworkInterface
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getConnectedNetworkForDemo
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_demo_afr.o(i._initialize)
</UL>
<P><STRONG><a name="[39a]"></a>_waitForDemoNetworkConnection</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iot_demo_afr.o(i._waitForDemoNetworkConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _waitForDemoNetworkConnection &rArr; _getConnectedNetworkForDemo &rArr; AwsIotNetworkManager_GetConnectedNetworks &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Wait
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getConnectedNetworkForDemo
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initialize
</UL>

<P><STRONG><a name="[af3]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[857]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[858]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[afd]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[85a]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[85b]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[862]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[863]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[873]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[84a]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[84e]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[855]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[856]"></a>prvDeleteTCB</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[105]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[85d]"></a>prvInitialiseNewTask</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[850]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[963]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[852]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[872]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[860]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
</UL>

<P><STRONG><a name="[861]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[868]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[869]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[86b]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[86a]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[86f]"></a>prvSwitchTimerLists</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[138]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[32]"></a>prvCalloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, aws_crypto.o(i.prvCalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_crypto.o(i.CRYPTO_ConfigureHeap)
</UL>
<P><STRONG><a name="[380]"></a>IotListDouble_Create</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, iot_mqtt_api.o(i.IotListDouble_Create))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createMqttConnection
</UL>

<P><STRONG><a name="[385]"></a>IotListDouble_FindFirstMatch</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, iot_mqtt_api.o(i.IotListDouble_FindFirstMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IotListDouble_FindFirstMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
</UL>

<P><STRONG><a name="[2be]"></a>IotListDouble_Remove</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, iot_mqtt_api.o(i.IotListDouble_Remove))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyMqttConnection
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_RemoveAll
</UL>

<P><STRONG><a name="[2bd]"></a>IotListDouble_RemoveAll</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, iot_mqtt_api.o(i.IotListDouble_RemoveAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IotListDouble_RemoveAll
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Disconnect
</UL>

<P><STRONG><a name="[37f]"></a>_createKeepAliveJob</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, iot_mqtt_api.o(i._createKeepAliveJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _createKeepAliveJob &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateJob
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createMqttConnection
</UL>

<P><STRONG><a name="[2c7]"></a>_createMqttConnection</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, iot_mqtt_api.o(i._createMqttConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _createMqttConnection &rArr; _createKeepAliveJob &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Destroy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Create
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createKeepAliveJob
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Create
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
</UL>

<P><STRONG><a name="[2d0]"></a>_destroyMqttConnection</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, iot_mqtt_api.o(i._destroyMqttConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _destroyMqttConnection &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FreePacket
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Destroy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_FindFirstMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Connect
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementConnectionReferences
</UL>

<P><STRONG><a name="[3c]"></a>_mqttOperation_tryDestroy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, iot_mqtt_api.o(i._mqttOperation_tryDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _mqttOperation_tryDestroy &rArr; _IotMqtt_ProcessIncomingPublish &rArr; _IotMqtt_InvokeSubscriptionCallback &rArr; _IotMqtt_DecrementConnectionReferences &rArr; _destroyMqttConnection &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DecrementOperationReferences
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_TryCancel
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i.IotMqtt_Disconnect)
</UL>
<P><STRONG><a name="[5b]"></a>_mqttSubscription_setUnsubscribe</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, iot_mqtt_api.o(i._mqttSubscription_setUnsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mqttSubscription_setUnsubscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i._destroyMqttConnection)
</UL>
<P><STRONG><a name="[5c]"></a>_mqttSubscription_tryDestroy</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, iot_mqtt_api.o(i._mqttSubscription_tryDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _mqttSubscription_tryDestroy &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_api.o(i._destroyMqttConnection)
</UL>
<P><STRONG><a name="[2db]"></a>_subscriptionCommon</STRONG> (Thumb, 660 bytes, Stack size 56 bytes, iot_mqtt_api.o(i._subscriptionCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _subscriptionCommon &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_OperationType
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ValidateSubscriptionList
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByTopicFilter
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByPacket
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Unsubscribe
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_Subscribe
</UL>

<P><STRONG><a name="[2b6]"></a>IotLink_IsLinked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iot_mqtt_network.o(i.IotLink_IsLinked))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
</UL>

<P><STRONG><a name="[384]"></a>IotListDouble_InsertHead</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, iot_mqtt_network.o(i.IotListDouble_InsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_InsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
</UL>

<P><STRONG><a name="[2b5]"></a>IotListDouble_Remove</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, iot_mqtt_network.o(i.IotListDouble_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_Remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
</UL>

<P><STRONG><a name="[2d9]"></a>_deserializeIncomingPacket</STRONG> (Thumb, 1678 bytes, Stack size 40 bytes, iot_mqtt_network.o(i._deserializeIncomingPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = _deserializeIncomingPacket &rArr; _IotMqtt_Notify &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_strerror
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FindOperation
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPuback
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_incomingPacketValid
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertHead
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_IncrementConnectionReferences
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_ReceiveCallback
</UL>

<P><STRONG><a name="[2d8]"></a>_getIncomingPacket</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, iot_mqtt_network.o(i._getIncomingPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _getIncomingPacket &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_incomingPacketValid
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_ReceiveCallback
</UL>

<P><STRONG><a name="[382]"></a>_incomingPacketValid</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, iot_mqtt_network.o(i._incomingPacketValid))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getIncomingPacket
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
</UL>

<P><STRONG><a name="[383]"></a>_sendPuback</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, iot_mqtt_network.o(i._sendPuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _sendPuback &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deserializeIncomingPacket
</UL>

<P><STRONG><a name="[2b8]"></a>IotLink_IsLinked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iot_mqtt_operation.o(i.IotLink_IsLinked))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleNextRetry
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
</UL>

<P><STRONG><a name="[35e]"></a>IotListDouble_FindFirstMatch</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, iot_mqtt_operation.o(i.IotListDouble_FindFirstMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IotListDouble_FindFirstMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FindOperation
</UL>

<P><STRONG><a name="[35c]"></a>IotListDouble_InsertHead</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, iot_mqtt_operation.o(i.IotListDouble_InsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_InsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleNextRetry
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_CreateOperation
</UL>

<P><STRONG><a name="[2b7]"></a>IotListDouble_Remove</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, iot_mqtt_operation.o(i.IotListDouble_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_Remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleNextRetry
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_Notify
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_FindOperation
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessIncomingPublish
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_DestroyOperation
</UL>

<P><STRONG><a name="[366]"></a>_checkRetryLimit</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, iot_mqtt_operation.o(i._checkRetryLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _checkRetryLimit &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
</UL>

<P><STRONG><a name="[4a]"></a>_mqttOperation_match</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, iot_mqtt_operation.o(i._mqttOperation_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mqttOperation_match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_operation.o(i._IotMqtt_FindOperation)
</UL>
<P><STRONG><a name="[367]"></a>_scheduleNextRetry</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, iot_mqtt_operation.o(i._scheduleNextRetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = _scheduleNextRetry &rArr; _IotMqtt_ScheduleOperation &rArr; IotTaskPool_ScheduleDeferred &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertHead
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ScheduleOperation
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_ProcessSend
</UL>

<P><STRONG><a name="[369]"></a>_connectPacketSize</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, iot_mqtt_serialize.o(i._connectPacketSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _connectPacketSize
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remainingLengthEncodedSize
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeConnect
</UL>

<P><STRONG><a name="[36a]"></a>_encodeRemainingLength</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iot_mqtt_serialize.o(i._encodeRemainingLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _encodeRemainingLength
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeUnsubscribe
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeSubscribe
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializePublish
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeConnect
</UL>

<P><STRONG><a name="[36b]"></a>_encodeString</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, iot_mqtt_serialize.o(i._encodeString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _encodeString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeUnsubscribe
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeSubscribe
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializePublish
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeConnect
</UL>

<P><STRONG><a name="[368]"></a>_nextPacketIdentifier</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, iot_mqtt_serialize.o(i._nextPacketIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _nextPacketIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_PublishSetDup
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeUnsubscribe
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeSubscribe
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializePublish
</UL>

<P><STRONG><a name="[36c]"></a>_publishPacketSize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, iot_mqtt_serialize.o(i._publishPacketSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _publishPacketSize
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remainingLengthEncodedSize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializePublish
</UL>

<P><STRONG><a name="[360]"></a>_remainingLengthEncodedSize</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, iot_mqtt_serialize.o(i._remainingLengthEncodedSize))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_GetRemainingLength
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subscriptionPacketSize
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publishPacketSize
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_connectPacketSize
</UL>

<P><STRONG><a name="[36d]"></a>_subscriptionPacketSize</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, iot_mqtt_serialize.o(i._subscriptionPacketSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _subscriptionPacketSize
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remainingLengthEncodedSize
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeUnsubscribe
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_SerializeSubscribe
</UL>

<P><STRONG><a name="[2ba]"></a>IotLink_IsLinked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iot_mqtt_subscription.o(i.IotLink_IsLinked))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_InvokeSubscriptionCallback
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
</UL>

<P><STRONG><a name="[2d6]"></a>IotListDouble_FindFirstMatch</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, iot_mqtt_subscription.o(i.IotListDouble_FindFirstMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IotListDouble_FindFirstMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMqtt_IsSubscribed
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_InvokeSubscriptionCallback
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByTopicFilter
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByPacket
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
</UL>

<P><STRONG><a name="[359]"></a>IotListDouble_InsertHead</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, iot_mqtt_subscription.o(i.IotListDouble_InsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_InsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_AddSubscriptions
</UL>

<P><STRONG><a name="[2b9]"></a>IotListDouble_Remove</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, iot_mqtt_subscription.o(i.IotListDouble_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_Remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByTopicFilter
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IotMqtt_RemoveSubscriptionByPacket
</UL>

<P><STRONG><a name="[4c]"></a>_packetMatch</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, iot_mqtt_subscription.o(i._packetMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _packetMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_mqtt_subscription.o(i._IotMqtt_RemoveSubscriptionByPacket)
</UL>
<P><STRONG><a name="[3d]"></a>_topicMatch</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, iot_mqtt_subscription.o(i._topicMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _topicMatch &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 4]<UL><LI> iot_mqtt_subscription.o(i._IotMqtt_AddSubscriptions)
<LI> iot_mqtt_subscription.o(i._IotMqtt_InvokeSubscriptionCallback)
<LI> iot_mqtt_subscription.o(i._IotMqtt_RemoveSubscriptionByTopicFilter)
<LI> iot_mqtt_subscription.o(i.IotMqtt_IsSubscribed)
</UL>
<P><STRONG><a name="[43]"></a>prvNetworkRecv</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, aws_secure_sockets.o(i.prvNetworkRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = prvNetworkRecv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_secure_sockets.o(i.SOCKETS_Connect)
</UL>
<P><STRONG><a name="[44]"></a>prvNetworkSend</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, aws_secure_sockets.o(i.prvNetworkSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = prvNetworkSend &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_secure_sockets.o(i.SOCKETS_Connect)
</UL>
<P><STRONG><a name="[330]"></a>prvRxSelectClear</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aws_secure_sockets.o(i.prvRxSelectClear))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
</UL>

<P><STRONG><a name="[32f]"></a>prvRxSelectSet</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, aws_secure_sockets.o(i.prvRxSelectSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvRxSelectSet &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
</UL>

<P><STRONG><a name="[fa]"></a>vTaskRxSelect</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, aws_secure_sockets.o(i.vTaskRxSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vTaskRxSelect &rArr; lwip_select &rArr; lwip_selscan &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_secure_sockets.o(i.prvRxSelectSet)
</UL>
<P><STRONG><a name="[45]"></a>prvCheckCertificate</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, aws_tls.o(i.prvCheckCertificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = prvCheckCertificate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(i.TLS_Connect)
</UL>
<P><STRONG><a name="[33a]"></a>prvFreeContext</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, aws_tls.o(i.prvFreeContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Send
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Recv
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Cleanup
</UL>

<P><STRONG><a name="[46]"></a>prvGenerateRandomBytes</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aws_tls.o(i.prvGenerateRandomBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvGenerateRandomBytes &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(i.TLS_Connect)
</UL>
<P><STRONG><a name="[342]"></a>prvInitializeClientCredential</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, aws_tls.o(i.prvInitializeClientCredential))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = prvInitializeClientCredential &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[47]"></a>prvNetworkRecv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, aws_tls.o(i.prvNetworkRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvNetworkRecv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(i.TLS_Connect)
</UL>
<P><STRONG><a name="[48]"></a>prvNetworkSend</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, aws_tls.o(i.prvNetworkSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvNetworkSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(i.TLS_Connect)
</UL>
<P><STRONG><a name="[f4]"></a>prvPrivateKeySigningCallback</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, aws_tls.o(i.prvPrivateKeySigningCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = prvPrivateKeySigningCallback &rArr; C_SignInit &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(i.prvInitializeClientCredential)
</UL>
<P><STRONG><a name="[3b3]"></a>_aws_security_to_mtk_auth</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, aws_wifi.o(i._aws_security_to_mtk_auth))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
</UL>

<P><STRONG><a name="[3b4]"></a>_aws_security_to_mtk_encrypt</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, aws_wifi.o(i._aws_security_to_mtk_encrypt))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_apply_setting
</UL>

<P><STRONG><a name="[39b]"></a>_ip_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, aws_wifi.o(i._ip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_config_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tcpip_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_create
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_bootstrap
</UL>

<P><STRONG><a name="[62]"></a>_ip_ready_callback</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, aws_wifi.o(i._ip_ready_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = _ip_ready_callback &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_inform_ip_ready
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find_by_type
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_give
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_wifi.o(i._mtk_sta_ip_up)
</UL>
<P><STRONG><a name="[34b]"></a>_mtk_ap_ip_down</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, aws_wifi.o(i._mtk_ap_ip_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _mtk_ap_ip_down &rArr; dhcpd_stop &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find_by_type
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[34c]"></a>_mtk_sta_ip_down</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, aws_wifi.o(i._mtk_sta_ip_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = _mtk_sta_ip_down &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_status_callback
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find_by_type
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[352]"></a>_mtk_sta_ip_is_ready</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, aws_wifi.o(i._mtk_sta_ip_is_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _mtk_sta_ip_is_ready &rArr; wifi_connection_stop_scan &rArr; wifi_inband_stop_scan &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_stop_scan
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_take
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[351]"></a>_mtk_sta_ip_up</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, aws_wifi.o(i._mtk_sta_ip_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _mtk_sta_ip_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_status_callback
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find_by_type
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[34e]"></a>_mtk_wifi_apply_setting</STRONG> (Thumb, 306 bytes, Stack size 136 bytes, aws_wifi.o(i._mtk_wifi_apply_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _mtk_wifi_apply_setting &rArr; wifi_config_set_channel &rArr; wifi_config_get_opmode &rArr; wifi_inband_opmode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_security_to_mtk_encrypt
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_security_to_mtk_auth
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wpa_psk_key
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wep_key
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_ssid
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_security_mode
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_channel
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[356]"></a>_mtk_wifi_bootstrap</STRONG> (Thumb, 202 bytes, Stack size 248 bytes, aws_wifi.o(i._mtk_wifi_bootstrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = _mtk_wifi_bootstrap &rArr; _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_register_callbacks
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_take_and_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_create
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
</UL>

<P><STRONG><a name="[3be]"></a>_mtk_wifi_mode_switch_dup</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aws_wifi.o(i._mtk_wifi_mode_switch_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _mtk_wifi_mode_switch_dup &rArr; wifi_config_get_opmode &rArr; wifi_inband_opmode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_mode_switch_wrapper
</UL>

<P><STRONG><a name="[34d]"></a>_mtk_wifi_mode_switch_wrapper</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, aws_wifi.o(i._mtk_wifi_mode_switch_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = _mtk_wifi_mode_switch_wrapper &rArr; _mtk_wifi_mode_switch_dup &rArr; wifi_config_get_opmode &rArr; wifi_inband_opmode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_mode_switch_dup
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_opmode
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[3bb]"></a>_mtk_wifi_register_callbacks</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, aws_wifi.o(i._mtk_wifi_register_callbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _mtk_wifi_register_callbacks &rArr; wifi_connection_register_event_handler &rArr; wifi_api_set_event_handler &rArr; wifi_set_notification_callback &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_register_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtk_wifi_bootstrap
</UL>

<P><STRONG><a name="[13b]"></a>_wifi_evt_disconnect_cbk</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, aws_wifi.o(i._wifi_evt_disconnect_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = _wifi_evt_disconnect_cbk &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_get_link_status
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_opmode
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find_by_type
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_wifi.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>_wifi_evt_init_done_cbk</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, aws_wifi.o(i._wifi_evt_init_done_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _wifi_evt_init_done_cbk &rArr; handshake_give &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_wifi.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>_wifi_evt_port_secure_cbk</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, aws_wifi.o(i._wifi_evt_port_secure_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = _wifi_evt_port_secure_cbk &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_inform_ip_ready
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find_by_type
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_wifi.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>_wifi_evt_portfail_cbk</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, aws_wifi.o(i._wifi_evt_portfail_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _wifi_evt_portfail_cbk &rArr; handshake_give &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_wifi.o(.constdata)
</UL>
<P><STRONG><a name="[39d]"></a>tcpip_config_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, aws_wifi.o(i.tcpip_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpip_config_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_init
</UL>

<P><STRONG><a name="[745]"></a>mbedtls_clz</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_clz))
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>

<P><STRONG><a name="[73e]"></a>mbedtls_int_div_int</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_int_div_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_int_div_int &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[74b]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[74f]"></a>mpi_check_small_factors</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, bignum.o(i.mpi_check_small_factors))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mpi_check_small_factors &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
</UL>

<P><STRONG><a name="[750]"></a>mpi_miller_rabin</STRONG> (Thumb, 582 bytes, Stack size 112 bytes, bignum.o(i.mpi_miller_rabin))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
</UL>

<P><STRONG><a name="[748]"></a>mpi_montg_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, bignum.o(i.mpi_montg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[749]"></a>mpi_montmul</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[74a]"></a>mpi_montred</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[751]"></a>mpi_mul_hlp</STRONG> (Thumb, 1584 bytes, Stack size 32 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[752]"></a>mpi_sub_hlp</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[d5]"></a>add_one_and_zeros_padding</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cipher.o(i.add_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[d3]"></a>add_pkcs_padding</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cipher.o(i.add_pkcs_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[d7]"></a>add_zeros_and_len_padding</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cipher.o(i.add_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[d9]"></a>add_zeros_padding</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher.o(i.add_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[db]"></a>get_no_padding</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(i.get_no_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[d6]"></a>get_one_and_zeros_padding</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, cipher.o(i.get_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[d4]"></a>get_pkcs_padding</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, cipher.o(i.get_pkcs_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[d8]"></a>get_zeros_and_len_padding</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, cipher.o(i.get_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[da]"></a>get_zeros_padding</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, cipher.o(i.get_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[70d]"></a>mbedtls_cipher_get_block_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_get_block_size))
<BR><BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>

<P><STRONG><a name="[13e]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cipher_wrap.o(i.aes_crypt_cbc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>aes_crypt_cfb128_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(i.aes_crypt_cfb128_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aes_crypt_cfb128_wrap &rArr; mbedtls_aes_crypt_cfb128 &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>aes_crypt_ctr_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(i.aes_crypt_ctr_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aes_crypt_ctr_wrap &rArr; mbedtls_aes_crypt_ctr &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cipher_wrap.o(i.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>aes_ctx_alloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aes_ctx_alloc &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>aes_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aes_ctx_free &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(i.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(i.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(i.gcm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>gcm_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gcm_ctx_alloc &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>gcm_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[427]"></a>block_cipher_df</STRONG> (Thumb, 368 bytes, Stack size 848 bytes, ctr_drbg.o(i.block_cipher_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[488]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, ctr_drbg.o(i.ctr_drbg_update_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[48c]"></a>derive_mpi</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ecdsa.o(i.derive_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = derive_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[528]"></a>ecdsa_signature_to_asn1</STRONG> (Thumb, 140 bytes, Stack size 176 bytes, ecdsa.o(i.ecdsa_signature_to_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ecdsa_signature_to_asn1 &rArr; mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[531]"></a>ecp_add_mixed</STRONG> (Thumb, 1378 bytes, Stack size 112 bytes, ecp.o(i.ecp_add_mixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[53e]"></a>ecp_check_pubkey_sw</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, ecp.o(i.ecp_check_pubkey_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[540]"></a>ecp_comb_fixed</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, ecp.o(i.ecp_comb_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_comb_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[538]"></a>ecp_double_jac</STRONG> (Thumb, 1528 bytes, Stack size 72 bytes, ecp.o(i.ecp_double_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[72c]"></a>ecp_get_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecp.o(i.ecp_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
</UL>

<P><STRONG><a name="[536]"></a>ecp_modp</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ecp.o(i.ecp_modp))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[54a]"></a>ecp_mul_comb</STRONG> (Thumb, 472 bytes, Stack size 368 bytes, ecp.o(i.ecp_mul_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[54d]"></a>ecp_mul_comb_core</STRONG> (Thumb, 202 bytes, Stack size 96 bytes, ecp.o(i.ecp_mul_comb_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[54f]"></a>ecp_normalize_jac</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, ecp.o(i.ecp_normalize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[556]"></a>ecp_normalize_jac_many</STRONG> (Thumb, 756 bytes, Stack size 64 bytes, ecp.o(i.ecp_normalize_jac_many))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
</UL>

<P><STRONG><a name="[54b]"></a>ecp_precompute_comb</STRONG> (Thumb, 294 bytes, Stack size 176 bytes, ecp.o(i.ecp_precompute_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[554]"></a>ecp_randomize_jac</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, ecp.o(i.ecp_randomize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[54e]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ecp.o(i.ecp_safe_invert_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[552]"></a>ecp_select_comb</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ecp.o(i.ecp_select_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[734]"></a>mbedtls_ecp_mul_shortcuts</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_mul_shortcuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[547]"></a>add32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(i.add32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add32
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[543]"></a>ecp_group_load</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ecp_curves.o(i.ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mpi_load
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[dc]"></a>ecp_mod_p256</STRONG> (Thumb, 1226 bytes, Stack size 96 bytes, ecp_curves.o(i.ecp_mod_p256))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p256 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[544]"></a>ecp_mpi_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves.o(i.ecp_mpi_load))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>

<P><STRONG><a name="[548]"></a>sub32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(i.sub32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub32
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[56f]"></a>entropy_gather_internal</STRONG> (Thumb, 172 bytes, Stack size 152 bytes, entropy.o(i.entropy_gather_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
</UL>

<P><STRONG><a name="[570]"></a>entropy_update</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, entropy.o(i.entropy_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = entropy_update &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>

<P><STRONG><a name="[59d]"></a>gcm_gen_table</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, gcm.o(i.gcm_gen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = gcm_gen_table &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[73b]"></a>gcm_mult</STRONG> (Thumb, 448 bytes, Stack size 44 bytes, gcm.o(i.gcm_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[14e]"></a>sha1_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha1_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>sha1_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha1_ctx_alloc &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>sha1_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha1_ctx_free &rArr; mbedtls_sha1_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>sha1_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>sha1_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha1_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>sha1_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>sha1_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(i.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>sha224_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>sha224_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha224_ctx_alloc &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>sha224_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha224_ctx_free &rArr; mbedtls_sha256_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>sha224_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>sha224_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>sha224_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>sha224_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>sha224_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>sha256_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha256_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>sha256_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[754]"></a>oid_grp_id_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_grp_id_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>

<P><STRONG><a name="[756]"></a>oid_pk_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_pk_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>

<P><STRONG><a name="[758]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_sig_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>

<P><STRONG><a name="[75a]"></a>oid_x509_ext_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(i.oid_x509_ext_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>

<P><STRONG><a name="[766]"></a>pk_hashlen_helper</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pk.o(i.pk_hashlen_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
</UL>

<P><STRONG><a name="[170]"></a>ecdsa_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>ecdsa_can_do</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(i.ecdsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>ecdsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>ecdsa_sign_wrap</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, pk_wrap.o(i.ecdsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>ecdsa_verify_wrap</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, pk_wrap.o(i.ecdsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>eckey_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>eckey_can_do</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>eckey_check_pair</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(i.eckey_check_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>eckey_debug</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_debug))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>eckey_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>eckey_get_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_get_bitlen))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>eckey_sign_wrap</STRONG> (Thumb, 72 bytes, Stack size 232 bytes, pk_wrap.o(i.eckey_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280<LI>Call Chain = eckey_sign_wrap &rArr; ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>eckey_verify_wrap</STRONG> (Thumb, 70 bytes, Stack size 216 bytes, pk_wrap.o(i.eckey_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = eckey_verify_wrap &rArr; ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>eckeydh_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(i.eckeydh_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>rsa_alloc_wrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>rsa_alt_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_alt_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alt_alloc_wrap &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>rsa_alt_can_do</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_alt_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>rsa_alt_check_pair</STRONG> (Thumb, 114 bytes, Stack size 1096 bytes, pk_wrap.o(i.rsa_alt_check_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = rsa_alt_check_pair &rArr; rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_get_bitlen
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_sign_wrap
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_get_bitlen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>rsa_alt_decrypt_wrap</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, pk_wrap.o(i.rsa_alt_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rsa_alt_decrypt_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>rsa_alt_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_alt_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alt_free_wrap &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>rsa_alt_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(i.rsa_alt_get_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsa_alt_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>rsa_alt_sign_wrap</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, pk_wrap.o(i.rsa_alt_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rsa_alt_sign_wrap
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>rsa_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(i.rsa_check_pair_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>rsa_debug</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_debug))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, pk_wrap.o(i.rsa_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3352<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk_wrap.o(i.rsa_encrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>rsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>rsa_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(i.rsa_get_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsa_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>rsa_sign_wrap</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, pk_wrap.o(i.rsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>rsa_verify_wrap</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, pk_wrap.o(i.rsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[83b]"></a>pk_get_ecparams</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_ecparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pk_get_ecparams &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[765]"></a>pk_get_ecpubkey</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_ecpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[763]"></a>pk_get_pk_alg</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, pkparse.o(i.pk_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[761]"></a>pk_get_rsapubkey</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, pkparse.o(i.pk_get_rsapubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[75e]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 482 bytes, Stack size 80 bytes, pkparse.o(i.pk_parse_key_pkcs1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224<LI>Call Chain = pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[760]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, pkparse.o(i.pk_parse_key_pkcs8_unencrypted_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[75f]"></a>pk_parse_key_sec1_der</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, pkparse.o(i.pk_parse_key_sec1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[764]"></a>pk_use_ecparams</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pkparse.o(i.pk_use_ecparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pk_use_ecparams &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[76c]"></a>pk_write_ec_param</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pkwrite.o(i.pk_write_ec_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pk_write_ec_param &rArr; mbedtls_asn1_write_oid &rArr; mbedtls_asn1_write_raw_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[76b]"></a>pk_write_ec_pubkey</STRONG> (Thumb, 90 bytes, Stack size 168 bytes, pkwrite.o(i.pk_write_ec_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[787]"></a>mbedtls_safer_memcmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, rsa.o(i.mbedtls_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[76f]"></a>rsa_check_context</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, rsa.o(i.rsa_check_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[784]"></a>rsa_prepare_blinding</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rsa.o(i.rsa_prepare_blinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[786]"></a>rsa_rsassa_pkcs1_v15_encode</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, rsa.o(i.rsa_rsassa_pkcs1_v15_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsa_rsassa_pkcs1_v15_encode &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[903]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_cli.o(i.mbedtls_ssl_own_key))
<BR><BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[8e6]"></a>ssl_check_server_ecdh_params</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_check_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ssl_check_server_ecdh_params &rArr; mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[904]"></a>ssl_generate_random</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_generate_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_generate_random
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[8f3]"></a>ssl_parse_alpn_ext</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_alpn_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = ssl_parse_alpn_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[7b9]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_parse_certificate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[8f4]"></a>ssl_parse_encrypt_then_mac_ext</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_parse_encrypt_then_mac_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = ssl_parse_encrypt_then_mac_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[8f5]"></a>ssl_parse_extended_ms_ext</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_parse_extended_ms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = ssl_parse_extended_ms_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[8f6]"></a>ssl_parse_max_fragment_length_ext</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_parse_max_fragment_length_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = ssl_parse_max_fragment_length_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[8f8]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_parse_renegotiation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[8f9]"></a>ssl_parse_server_ecdh_params</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ssl_parse_server_ecdh_params &rArr; mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[7b6]"></a>ssl_parse_server_hello</STRONG> (Thumb, 1104 bytes, Stack size 56 bytes, ssl_cli.o(i.ssl_parse_server_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_validate_ciphersuite
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[7ba]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_parse_server_hello_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = ssl_parse_server_hello_done &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[7b8]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 578 bytes, Stack size 120 bytes, ssl_cli.o(i.ssl_parse_server_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = ssl_parse_server_key_exchange &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[8fd]"></a>ssl_parse_signature_algorithm</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_signature_algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssl_parse_signature_algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[8fc]"></a>ssl_parse_supported_point_formats_ext</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = ssl_parse_supported_point_formats_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[8fb]"></a>ssl_validate_ciphersuite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssl_cli.o(i.ssl_validate_ciphersuite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_validate_ciphersuite
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[902]"></a>ssl_write_alpn_ext</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_alpn_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_alpn_ext &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[7bd]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 398 bytes, Stack size 104 bytes, ssl_cli.o(i.ssl_write_certificate_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[7b5]"></a>ssl_write_client_hello</STRONG> (Thumb, 610 bytes, Stack size 56 bytes, ssl_cli.o(i.ssl_write_client_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypt_then_mac_ext
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_validate_ciphersuite
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_uses_ec
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[7bc]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_client_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[90b]"></a>ssl_write_encrypt_then_mac_ext</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, ssl_cli.o(i.ssl_write_encrypt_then_mac_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_write_encrypt_then_mac_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[90c]"></a>ssl_write_extended_ms_ext</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, ssl_cli.o(i.ssl_write_extended_ms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_write_extended_ms_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[906]"></a>ssl_write_hostname_ext</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_hostname_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_hostname_ext &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[90a]"></a>ssl_write_max_fragment_length_ext</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, ssl_cli.o(i.ssl_write_max_fragment_length_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_write_max_fragment_length_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[907]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_signature_algorithms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_signature_algorithms_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[908]"></a>ssl_write_supported_elliptic_curves_ext</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_supported_elliptic_curves_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ssl_write_supported_elliptic_curves_ext &rArr; mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[909]"></a>ssl_write_supported_point_formats_ext</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, ssl_cli.o(i.ssl_write_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_write_supported_point_formats_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[8e8]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_cipher_get_cipher_mode))
<BR><BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[7ca]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 54 bytes, Stack size 28 bytes, ssl_tls.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
</UL>

<P><STRONG><a name="[798]"></a>ssl_append_key_cert</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_append_key_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_append_key_cert &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
</UL>

<P><STRONG><a name="[e0]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 118 bytes, Stack size 184 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[df]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 56 bytes, Stack size 120 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[7a3]"></a>ssl_check_timer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_check_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[7cd]"></a>ssl_consume_current_message</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_consume_current_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssl_consume_current_message &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[8e7]"></a>ssl_decrypt_buf</STRONG> (Thumb, 1474 bytes, Stack size 120 bytes, ssl_tls.o(i.ssl_decrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_process
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_memory
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[7d9]"></a>ssl_encrypt_buf</STRONG> (Thumb, 958 bytes, Stack size 104 bytes, ssl_tls.o(i.ssl_encrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[7cb]"></a>ssl_get_hs_total_len</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_get_hs_total_len))
<BR><BR>[Called By]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>

<P><STRONG><a name="[7cf]"></a>ssl_get_next_record</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_get_next_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[7d4]"></a>ssl_handshake_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_handshake_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
</UL>

<P><STRONG><a name="[8f1]"></a>ssl_handshake_params_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_handshake_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_handshake_params_init &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_hash_set_const_hash
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[7c3]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_handshake_wrapup_free_hs_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[79d]"></a>ssl_key_cert_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_key_cert_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssl_key_cert_free &rArr; mbedtls_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>

<P><STRONG><a name="[7af]"></a>ssl_mfl_code_to_length</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_mfl_code_to_length))
<BR><BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
</UL>

<P><STRONG><a name="[8ee]"></a>ssl_parse_record_header</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_parse_record_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[8ef]"></a>ssl_prepare_record_content</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_prepare_record_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[8ec]"></a>ssl_read_memory</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_read_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_read_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[7ce]"></a>ssl_record_is_in_progress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_record_is_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[7d3]"></a>ssl_reset_in_out_pointers</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_reset_in_out_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_reset_in_out_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_in_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
</UL>

<P><STRONG><a name="[7cc]"></a>ssl_set_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[8f0]"></a>ssl_transform_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_transform_init &rArr; mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[e1]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[ff]"></a>ssl_update_checksum_start</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.ssl_handshake_params_init)
</UL>
<P><STRONG><a name="[7c9]"></a>ssl_update_in_pointers</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_in_pointers))
<BR><BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
</UL>

<P><STRONG><a name="[7a4]"></a>ssl_update_out_pointers</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_out_pointers))
<BR><BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[7d6]"></a>ssl_write_real</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_write_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_out_record_payload
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[947]"></a>tls_prf_generic</STRONG> (Thumb, 278 bytes, Stack size 232 bytes, ssl_tls.o(i.tls_prf_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[de]"></a>tls_prf_sha256</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ssl_tls.o(i.tls_prf_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[1b]"></a>threading_mutex_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, threading.o(i.threading_mutex_dummy))
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>threading_mutex_fail</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, threading.o(i.threading_mutex_fail))
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[af1]"></a>x509_date_is_valid</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, x509.o(i.x509_date_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[7e3]"></a>x509_get_attr_type_value</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, x509.o(i.x509_get_attr_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[af0]"></a>x509_parse_int</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, x509.o(i.x509_parse_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[7e8]"></a>x509_parse_time</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, x509.o(i.x509_parse_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[ad9]"></a>x509_check_wildcard</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, x509_crt.o(i.x509_check_wildcard))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_cn
</UL>

<P><STRONG><a name="[adb]"></a>x509_crt_check_cn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, x509_crt.o(i.x509_crt_check_cn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_crt_check_cn &rArr; x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
</UL>
<BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
</UL>

<P><STRONG><a name="[adc]"></a>x509_crt_check_ee_locally_trusted</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, x509_crt.o(i.x509_crt_check_ee_locally_trusted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_crt_check_ee_locally_trusted &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>

<P><STRONG><a name="[ade]"></a>x509_crt_check_parent</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x509_crt.o(i.x509_crt_check_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[adf]"></a>x509_crt_check_signature</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, x509_crt.o(i.x509_crt_check_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[ae1]"></a>x509_crt_find_parent</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, x509_crt.o(i.x509_crt_find_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = x509_crt_find_parent &rArr; x509_crt_find_parent_in &rArr; x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>

<P><STRONG><a name="[ae2]"></a>x509_crt_find_parent_in</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, x509_crt.o(i.x509_crt_find_parent_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = x509_crt_find_parent_in &rArr; x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>
<BR>[Called By]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent
</UL>

<P><STRONG><a name="[7df]"></a>x509_crt_merge_flags_with_cb</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, x509_crt.o(i.x509_crt_merge_flags_with_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = x509_crt_merge_flags_with_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[7da]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 796 bytes, Stack size 80 bytes, x509_crt.o(i.x509_crt_parse_der_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[7de]"></a>x509_crt_verify_chain</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, x509_crt.o(i.x509_crt_verify_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = x509_crt_verify_chain &rArr; x509_crt_find_parent &rArr; x509_crt_find_parent_in &rArr; x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_ee_locally_trusted
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[7db]"></a>x509_crt_verify_name</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, x509_crt.o(i.x509_crt_verify_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = x509_crt_verify_name &rArr; x509_crt_check_cn &rArr; x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_cn
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[aea]"></a>x509_get_basic_constraints</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_basic_constraints))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[ae8]"></a>x509_get_crt_ext</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, x509_crt.o(i.x509_get_crt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[ae6]"></a>x509_get_dates</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_dates))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = x509_get_dates &rArr; mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[aec]"></a>x509_get_ext_key_usage</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_ext_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_ext_key_usage &rArr; mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[aeb]"></a>x509_get_key_usage</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, x509_crt.o(i.x509_get_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[aee]"></a>x509_get_ns_cert_type</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_ns_cert_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = x509_get_ns_cert_type &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[aed]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, x509_crt.o(i.x509_get_subject_alt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_subject_alt_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[ae7]"></a>x509_get_uid</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[ae5]"></a>x509_get_version</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_get_version &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[ada]"></a>x509_memcasecmp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, x509_crt.o(i.x509_memcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_cn
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
</UL>

<P><STRONG><a name="[add]"></a>x509_name_cmp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, x509_crt.o(i.x509_name_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_ee_locally_trusted
</UL>

<P><STRONG><a name="[7dd]"></a>x509_profile_check_key</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, x509_crt.o(i.x509_profile_check_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_profile_check_key &rArr; mbedtls_pk_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[ae9]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x509_crt.o(i.x509_profile_check_md_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>

<P><STRONG><a name="[7dc]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x509_crt.o(i.x509_profile_check_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[aef]"></a>x509_string_cmp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, x509_crt.o(i.x509_string_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
</UL>

<P><STRONG><a name="[58c]"></a>low_level_init1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernetif.o(i.low_level_init1))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init1
</UL>

<P><STRONG><a name="[58d]"></a>low_level_init2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernetif.o(i.low_level_init2))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init2
</UL>

<P><STRONG><a name="[87]"></a>low_level_output_scatter</STRONG> (Thumb, 658 bytes, Stack size 136 bytes, ethernetif.o(i.low_level_output_scatter))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = low_level_output_scatter &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_write_data
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_query_whisr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_check_and_update_tx
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_get_headroom_offset
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_dump_tx_scatter_info
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_raw_pkt_sender
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ethernetif.o(i.ethernetif_init1)
<LI> ethernetif.o(i.ethernetif_init2)
</UL>
<P><STRONG><a name="[830]"></a>pbuf_free_ooseq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[f0]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[832]"></a>pbuf_header_impl</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pbuf_header_impl &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>

<P><STRONG><a name="[82e]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[835]"></a>pbuf_skip_const</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_skip_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[93a]"></a>tcp_build_wnd_scale_option</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_build_wnd_scale_option))
<BR><BR>[Called By]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[92a]"></a>tcp_create_segment</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[934]"></a>tcp_output_alloc_header</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[939]"></a>tcp_output_segment</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_build_wnd_scale_option
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[93c]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[945]"></a>tcp_write_checks</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_write_checks &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[809]"></a>netconn_apimsg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, api_lib.o(i.netconn_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[80b]"></a>netconn_close_shutdown</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, api_lib.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[80f]"></a>netconn_recv_data</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netconn_recv_data &rArr; netconn_close_shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[ce]"></a>err_tcp</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = err_tcp &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[6c6]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 684 bytes, Stack size 48 bytes, api_msg.o(i.lwip_netconn_do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[cf]"></a>lwip_netconn_do_connected</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, api_msg.o(i.lwip_netconn_do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lwip_netconn_do_connected &rArr; setup_tcp &rArr; tcp_sent &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_connect)
</UL>
<P><STRONG><a name="[d0]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_dns_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_gethostbyname)
</UL>
<P><STRONG><a name="[6de]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 740 bytes, Stack size 56 bytes, api_msg.o(i.lwip_netconn_do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</UL>

<P><STRONG><a name="[6c5]"></a>netconn_drain</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[6d9]"></a>pcb_new</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[cd]"></a>poll_tcp</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[f1]"></a>recv_raw</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[fc]"></a>recv_tcp</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[f2]"></a>recv_udp</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[cc]"></a>sent_tcp</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[6d5]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[401]"></a>alloc_socket</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = alloc_socket &rArr; sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[d1]"></a>event_callback</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = event_callback &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[598]"></a>free_socket</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[590]"></a>get_socket</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sockets.o(i.get_socket))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[6e5]"></a>lwip_selscan</STRONG> (Thumb, 654 bytes, Stack size 64 bytes, sockets.o(i.lwip_selscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lwip_selscan &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[6ee]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 642 bytes, Stack size 32 bytes, sockets.o(i.lwip_setsockopt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwip_setsockopt_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[6e7]"></a>tryget_socket</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[102]"></a>tcpip_thread</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcpip_thread &rArr; sys_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[4c8]"></a>dns_alloc_pcb</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dns_alloc_pcb &rArr; dns_alloc_random_port &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[4c9]"></a>dns_alloc_random_port</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_random_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dns_alloc_random_port &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
</UL>

<P><STRONG><a name="[4cb]"></a>dns_call_found</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, dns.o(i.dns_call_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[4cc]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(i.dns_check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[4cd]"></a>dns_check_entry</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[4d0]"></a>dns_compare_name</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dns_compare_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[4d2]"></a>dns_correct_response</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_correct_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[4ce]"></a>dns_create_txid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_create_txid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dns_create_txid
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[4d3]"></a>dns_enqueue</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, dns.o(i.dns_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[4d7]"></a>dns_lookup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dns.o(i.dns_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dns_lookup &rArr; lwip_strnicmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[77]"></a>dns_recv</STRONG> (Thumb, 456 bytes, Stack size 72 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dns_recv &rArr; dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_alloc_random_port)
</UL>
<P><STRONG><a name="[4cf]"></a>dns_send</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[4d9]"></a>dns_skip_name</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dns.o(i.dns_skip_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dns_skip_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[695]"></a>inet_cksum_pseudo_base</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_cksum_pseudo_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[4de]"></a>do_memp_free_pool</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, memp.o(i.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[4e0]"></a>do_memp_malloc_pool</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, memp.o(i.do_memp_malloc_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[813]"></a>netif_issue_reports</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netif.o(i.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[ef]"></a>netif_loop_output_ipv4</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, netif.o(i.netif_loop_output_ipv4))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = netif_loop_output_ipv4 &rArr; netif_loop_output &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_loopif_init)
</UL>
<P><STRONG><a name="[ed]"></a>netif_loopif_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, netif.o(i.netif_loopif_init))
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_init)
</UL>
<P><STRONG><a name="[87b]"></a>raw_input_match</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, raw.o(i.raw_input_match))
<BR><BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>

<P><STRONG><a name="[921]"></a>tcp_close_shutdown</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[925]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tcp.o(i.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[91e]"></a>tcp_kill_prio</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[91d]"></a>tcp_kill_state</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[91c]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[924]"></a>tcp_listen_closed</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_listen_closed &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[937]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[91f]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[935]"></a>tcp_remove_listener</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tcp.o(i.tcp_remove_listener))
<BR><BR>[Called By]<UL><LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[93b]"></a>tcp_getoptbyte</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_getoptbyte))
<BR><BR>[Called By]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[932]"></a>tcp_input_delayed_close</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_input_delayed_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[92f]"></a>tcp_listen_input</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[938]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[936]"></a>tcp_parseopt</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_parseopt &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[931]"></a>tcp_process</STRONG> (Thumb, 1710 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[93e]"></a>tcp_receive</STRONG> (Thumb, 3488 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[92e]"></a>tcp_timewait_input</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[74]"></a>cyclic_timer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timeouts.o(i.cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cyclic_timer &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.cyclic_timer)
<LI> timeouts.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[910]"></a>sys_check_timeouts</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, timeouts.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[917]"></a>sys_timeouts_sleeptime</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_sleeptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_timeouts_sleeptime &rArr; sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[101]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timeouts.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[956]"></a>udp_input_local_match</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, udp.o(i.udp_input_local_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[955]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[491]"></a>dhcp_bind</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[496]"></a>dhcp_create_msg</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[49d]"></a>dhcp_dec_pcb_refcount</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_dec_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[49f]"></a>dhcp_delete_msg</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[493]"></a>dhcp_discover</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[4a6]"></a>dhcp_handle_ack</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[4a8]"></a>dhcp_handle_nak</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[4a9]"></a>dhcp_handle_offer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[4ab]"></a>dhcp_inc_pcb_refcount</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_inc_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[49b]"></a>dhcp_option</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dhcp_option &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[49c]"></a>dhcp_option_byte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dhcp_option_byte &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[4b2]"></a>dhcp_option_long</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dhcp_option_long &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</UL>

<P><STRONG><a name="[4a1]"></a>dhcp_option_short</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dhcp_option_short &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[4a2]"></a>dhcp_option_trailer</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dhcp_option_trailer &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[4b3]"></a>dhcp_parse_reply</STRONG> (Thumb, 1284 bytes, Stack size 80 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[4b5]"></a>dhcp_rebind</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[4b1]"></a>dhcp_reboot</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[75]"></a>dhcp_recv</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_inc_pcb_refcount)
</UL>
<P><STRONG><a name="[4aa]"></a>dhcp_select</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[492]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[495]"></a>dhcp_t1_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[494]"></a>dhcp_t2_timeout</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[4a5]"></a>dhcp_timeout</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = dhcp_timeout &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[645]"></a>icmp_send_response</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[69c]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip4_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[69e]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ip4_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[6aa]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 556 bytes, Stack size 56 bytes, ip4_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[6ab]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[6a9]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[6ae]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, ip4_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[6a8]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ip4_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[ca]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ip4_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip4_frag.o(i.ip4_frag)
</UL>
<P><STRONG><a name="[574]"></a>etharp_find_entry</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[575]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[57b]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[579]"></a>etharp_raw</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>

<P><STRONG><a name="[57f]"></a>etharp_request_dst</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, etharp.o(i.etharp_request_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[578]"></a>etharp_update_arp_entry</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[576]"></a>free_etharp_q</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, etharp.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[1d1]"></a>get_current_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_nvic.o(i.get_current_irq))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
</UL>

<P><STRONG><a name="[1d3]"></a>get_pending_irq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_nvic.o(i.get_pending_irq))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
</UL>

<P><STRONG><a name="[5bc]"></a>uart_config_is_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_uart.o(i.uart_config_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[8b]"></a>uart_dma_callback_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_uart.o(i.uart_dma_callback_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_dma_callback_handler &rArr; uart_send_handler &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(i.hal_uart_register_callback)
</UL>
<P><STRONG><a name="[5bb]"></a>uart_port_is_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_uart.o(i.uart_port_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma_timeout
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[5c7]"></a>uart_start_dma_transmission</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hal_uart.o(i.uart_start_dma_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_start_dma_transmission &rArr; vdma_start
</UL>
<BR>[Calls]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_start
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_enable_interrupt
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_unmask_send_interrupt
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_unmask_receive_interrupt
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[5d2]"></a>uart_translate_timeout</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_uart.o(i.uart_translate_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_translate_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma_timeout
</UL>

<P><STRONG><a name="[296]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LISR
</UL>

<P><STRONG><a name="[295]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dma.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[1d8]"></a>sfc_pad_config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_sfc.o(i.sfc_pad_config))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config (via Veneer)
</UL>

<P><STRONG><a name="[29c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpt.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>

<P><STRONG><a name="[8a]"></a>hal_lp_wic_isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_lp.o(i.hal_lp_wic_isr))
<BR>[Address Reference Count : 1]<UL><LI> hal_lp.o(i.hal_lp_handle_intr)
</UL>
<P><STRONG><a name="[96f]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_pdma_internal.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
</UL>

<P><STRONG><a name="[96e]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
</UL>

<P><STRONG><a name="[96c]"></a>vdma_check_valid_channel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_pdma_internal.o(i.vdma_check_valid_channel))
<BR><BR>[Called By]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_start
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_threshold
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_register_callback
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_enable_interrupt
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_disable_interrupt
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_configure
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_timeout
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_alert_length
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_register_timeout_callback
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_send_space
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_receive_bytes
</UL>

<P><STRONG><a name="[1fe]"></a>sfc_MacLeave</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacWaitReady
</UL>

<P><STRONG><a name="[1fd]"></a>sfc_MacTrigger</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacWaitReady
</UL>

<P><STRONG><a name="[1fc]"></a>sfc_MacWaitReady</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacTrigger
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacLeave
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>

<P><STRONG><a name="[200]"></a>sfc_MacEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>

<P><STRONG><a name="[208]"></a>flash_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[209]"></a>flash_Switch_Device_Mode</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_switch_spiq_mode_command (via Veneer)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_switch_spi_mode_command (via Veneer)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode
</UL>

<P><STRONG><a name="[216]"></a>flash_write_sr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = flash_write_sr &rArr; sfc_write &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect
</UL>

<P><STRONG><a name="[441]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connsys_bus.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_write_data
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_writel
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_readl
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_pio_garbage
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_pio
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_dma
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_write_byte
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_read_byte
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port_pio
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port_dma
</UL>

<P><STRONG><a name="[442]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connsys_bus.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_write_data
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_writel
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_readl
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_pio_garbage
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_pio
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_read_port_dma
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_write_byte
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_fn0_read_byte
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port_pio
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port_dma
</UL>

<P><STRONG><a name="[44d]"></a>connsys_bus_write_port_dma</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, connsys_bus.o(i.connsys_bus_write_port_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = connsys_bus_write_port_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port
</UL>

<P><STRONG><a name="[44e]"></a>connsys_bus_write_port_pio</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, connsys_bus.o(i.connsys_bus_write_port_pio))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = connsys_bus_write_port_pio &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_dump_cmd53_info
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_bus_write_port
</UL>

<P><STRONG><a name="[458]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connsys_driver.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_check_and_update_tx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_get_own_enable_int
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_update_free_page_cnt
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_set_reserve_page_by_cr
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_tx_int
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_rx_int
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_whier_dump_n9_int
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_trx_int
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_dump_n9_int
</UL>

<P><STRONG><a name="[459]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connsys_driver.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_check_and_update_tx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_connsys_get_own_enable_int
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_update_free_page_cnt
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_set_reserve_page_by_cr
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_tx_int
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enalbe_whier_rx_int
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_enable_whier_dump_n9_int
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_trx_int
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_disable_whier_dump_n9_int
</UL>

<P><STRONG><a name="[45d]"></a>connsys_download_wifi_profile</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, connsys_util.o(i.connsys_download_wifi_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = connsys_download_wifi_profile &rArr; connsys_util_pda_download &rArr; connsys_pda_config &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_pda_download
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_patch_download_body
</UL>

<P><STRONG><a name="[3c9]"></a>_uart_dma_blocking_is_safe</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, io_def.o(i._uart_dma_blocking_is_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _uart_dma_blocking_is_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_def_uart_putchar
</UL>

<P><STRONG><a name="[c9]"></a>_uart_event</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, io_def.o(i._uart_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _uart_event &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_def.o(i.io_def_uart_init)
</UL>
<P><STRONG><a name="[82d]"></a>find_next_char</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, get_profile_string.o(i.find_next_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_pwr_from_str
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ip_from_str
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ch_table_from_str
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ch_triplet
</UL>

<P><STRONG><a name="[82c]"></a>parse_ch_triplet</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, get_profile_string.o(i.parse_ch_triplet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = parse_ch_triplet &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_char
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ch_table_from_str
</UL>

<P><STRONG><a name="[973]"></a>wifi_apply_ap_config</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, wifi_init.o(i.wifi_apply_ap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_apply_ap_config &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_save_ap_ext_config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_config
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_repeater_config
</UL>

<P><STRONG><a name="[97a]"></a>wifi_apply_p2p_config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_init.o(i.wifi_apply_p2p_config))
<BR><BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_config
</UL>

<P><STRONG><a name="[975]"></a>wifi_apply_repeater_config</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wifi_init.o(i.wifi_apply_repeater_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wifi_apply_repeater_config &rArr; wifi_apply_sta_config &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_sta_config
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_ap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_config
</UL>

<P><STRONG><a name="[976]"></a>wifi_apply_sta_config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wifi_init.o(i.wifi_apply_sta_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_apply_sta_config &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_save_sta_ext_config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_config
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_repeater_config
</UL>

<P><STRONG><a name="[978]"></a>wifi_apply_user_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wifi_init.o(i.wifi_apply_user_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wifi_apply_user_config &rArr; wifi_apply_repeater_config &rArr; wifi_apply_sta_config &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_sta_config
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_repeater_config
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_p2p_config
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_ap_config
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_country_code_region_mapping
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_whole_config
</UL>

<P><STRONG><a name="[97b]"></a>wifi_apply_user_init_config</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, wifi_init.o(i.wifi_apply_user_init_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wifi_apply_user_init_config &rArr; wifi_conf_get_ch_table_from_str &rArr; parse_ch_triplet &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_zalloc
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_conf_get_ch_table_from_str
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_build_whole_config
</UL>

<P><STRONG><a name="[97f]"></a>wifi_build_whole_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wifi_init.o(i.wifi_build_whole_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wifi_build_whole_config &rArr; wifi_get_default_config &rArr; wifi_conf_get_pwr_from_str &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_init_config
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_user_config
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_default_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[986]"></a>wifi_get_mac_addr_from_efuse</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, wifi_init.o(i.wifi_get_mac_addr_from_efuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = wifi_get_mac_addr_from_efuse &rArr; hal_efuse_read &rArr; SYSefuse_Read16Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_read
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_is_mac_address_valid
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_mac_address
</UL>

<P><STRONG><a name="[9a6]"></a>wifi_init_register_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_init.o(i.wifi_init_register_callback))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[99b]"></a>wifi_is_mac_address_valid</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wifi_init.o(i.wifi_is_mac_address_valid))
<BR><BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac_addr_from_efuse
</UL>

<P><STRONG><a name="[974]"></a>wifi_save_ap_ext_config</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wifi_init.o(i.wifi_save_ap_ext_config))
<BR><BR>[Called By]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_ap_config
</UL>

<P><STRONG><a name="[977]"></a>wifi_save_sta_ext_config</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, wifi_init.o(i.wifi_save_sta_ext_config))
<BR><BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_apply_sta_config
</UL>

<P><STRONG><a name="[90e]"></a>reboot_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, exception_handler.o(i.reboot_check))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[877]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, wrap_heap.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[878]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, wrap_heap.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[fb]"></a>prvTaskExitError</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[4bc]"></a>dhcpd_mutex_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dhcpd.o(i.dhcpd_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dhcpd_mutex_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_stop
</UL>

<P><STRONG><a name="[4bd]"></a>dhcpd_mutex_lock</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dhcpd.o(i.dhcpd_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dhcpd_mutex_lock &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_stop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_wifi_api_rx_event_handler
</UL>

<P><STRONG><a name="[4be]"></a>dhcpd_mutex_unlock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dhcpd.o(i.dhcpd_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dhcpd_mutex_unlock &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_stop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_wifi_api_rx_event_handler
</UL>

<P><STRONG><a name="[76]"></a>dhcpd_wifi_api_rx_event_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dhcpd.o(i.dhcpd_wifi_api_rx_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dhcpd_wifi_api_rx_event_handler &rArr; wifi_set_is_ap_ip_ready &rArr; wifi_inband_set_is_ap_ip_ready &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_is_ap_ip_ready
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_is_ap_connected
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_remove_alloc_info_from_list
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_insert_alloc_info_into_list
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_find_alloc_info_by_mac
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_dhcpdpool
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_mutex_unlock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcpd.o(i.dhcpd_stop)
</UL>
<P><STRONG><a name="[4c5]"></a>printf_dhcpdpool</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dhcpd.o(i.printf_dhcpdpool))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_wifi_api_rx_event_handler
</UL>

<P><STRONG><a name="[37]"></a>prvTimerCallback</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, iot_clock_afr.o(i.prvTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvTimerCallback &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_clock_afr.o(i.IotClock_TimerCreate)
</UL>
<P><STRONG><a name="[2f3]"></a>_destroyConnection</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iot_network_afr.o(i._destroyConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = _destroyConnection &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Destroy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_networkReceiveTask
</UL>

<P><STRONG><a name="[3f]"></a>_networkReceiveTask</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, iot_network_afr.o(i._networkReceiveTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584<LI>Call Chain = _networkReceiveTask &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyConnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_network_afr.o(i.IotNetworkAfr_SetReceiveCallback)
</UL>
<P><STRONG><a name="[2eb]"></a>_tlsSetup</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, iot_network_afr.o(i._tlsSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _tlsSetup &rArr; SOCKETS_SetSockOpt &rArr; prvRxSelectSet &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotNetworkAfr_Create
</UL>

<P><STRONG><a name="[41]"></a>_threadRoutineWrapper</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, iot_threads_afr.o(i._threadRoutineWrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _threadRoutineWrapper &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_threads_afr.o(i.Iot_CreateDetachedThread)
</UL>
<P><STRONG><a name="[2ac]"></a>IotDeQueue_Create</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iot_taskpool.o(i.IotDeQueue_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotDeQueue_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initJobsCache
</UL>

<P><STRONG><a name="[2ae]"></a>IotDeQueue_DequeueHead</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iot_taskpool.o(i.IotDeQueue_DequeueHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IotDeQueue_DequeueHead &rArr; IotListDouble_RemoveHead &rArr; IotListDouble_Remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_RemoveHead
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskPoolWorker
</UL>

<P><STRONG><a name="[2bc]"></a>IotLink_IsLinked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iot_taskpool.o(i.IotLink_IsLinked))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trySafeExtraction
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
</UL>

<P><STRONG><a name="[2ad]"></a>IotListDouble_Create</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, iot_taskpool.o(i.IotListDouble_Create))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotDeQueue_Create
</UL>

<P><STRONG><a name="[3c8]"></a>IotListDouble_FindFirstMatch</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, iot_taskpool.o(i.IotListDouble_FindFirstMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IotListDouble_FindFirstMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tryCancelInternal
</UL>

<P><STRONG><a name="[2b2]"></a>IotListDouble_InsertHead</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, iot_taskpool.o(i.IotListDouble_InsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_InsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleInternal
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertSorted
</UL>

<P><STRONG><a name="[2b0]"></a>IotListDouble_InsertSorted</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, iot_taskpool.o(i.IotListDouble_InsertSorted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IotListDouble_InsertSorted &rArr; IotListDouble_InsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_IsEmpty
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertTail
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
</UL>

<P><STRONG><a name="[2b3]"></a>IotListDouble_InsertTail</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, iot_taskpool.o(i.IotListDouble_InsertTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_InsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleInternal
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recycleJob
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertSorted
</UL>

<P><STRONG><a name="[2b1]"></a>IotListDouble_IsEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iot_taskpool.o(i.IotListDouble_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_RemoveHead
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_PeekHead
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertSorted
</UL>

<P><STRONG><a name="[2b4]"></a>IotListDouble_PeekHead</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, iot_taskpool.o(i.IotListDouble_PeekHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IotListDouble_PeekHead
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tryCancelInternal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
</UL>

<P><STRONG><a name="[2bb]"></a>IotListDouble_Remove</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, iot_taskpool.o(i.IotListDouble_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_Remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trySafeExtraction
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tryCancelInternal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_RemoveHead
</UL>

<P><STRONG><a name="[2af]"></a>IotListDouble_RemoveHead</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, iot_taskpool.o(i.IotListDouble_RemoveHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IotListDouble_RemoveHead &rArr; IotListDouble_Remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fetchOrAllocateJob
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotDeQueue_DequeueHead
</UL>

<P><STRONG><a name="[304]"></a>_IsShutdownStarted</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iot_taskpool.o(i._IsShutdownStarted))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_TryCancel
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Schedule
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_RecycleJob
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateRecyclableJob
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskPoolWorker
</UL>

<P><STRONG><a name="[307]"></a>_createTaskPool</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, iot_taskpool.o(i._createTaskPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _createTaskPool &rArr; _initTaskPoolControlStructures &rArr; IotSemaphore_Create &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iot_CreateDetachedThread
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Wait
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signalShutdown
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyTaskPool
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateSystemTaskPool
</UL>

<P><STRONG><a name="[308]"></a>_destroyJob</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iot_taskpool.o(i._destroyJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _destroyJob &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recycleJob
</UL>

<P><STRONG><a name="[30a]"></a>_destroyTaskPool</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iot_taskpool.o(i._destroyTaskPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _destroyTaskPool &rArr; IotSemaphore_Destroy &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Destroy
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Destroy
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createTaskPool
</UL>

<P><STRONG><a name="[305]"></a>_fetchOrAllocateJob</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, iot_taskpool.o(i._fetchOrAllocateJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _fetchOrAllocateJob &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_RemoveHead
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateRecyclableJob
</UL>

<P><STRONG><a name="[398]"></a>_initJobsCache</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iot_taskpool.o(i._initJobsCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _initJobsCache &rArr; IotDeQueue_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotDeQueue_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initTaskPoolControlStructures
</UL>

<P><STRONG><a name="[381]"></a>_initTaskPoolControlStructures</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, iot_taskpool.o(i._initTaskPoolControlStructures))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _initTaskPoolControlStructures &rArr; IotSemaphore_Create &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Destroy
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Create
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Destroy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Create
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerDestroy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerCreate
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initJobsCache
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Create
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotDeQueue_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createTaskPool
</UL>

<P><STRONG><a name="[302]"></a>_initializeJob</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iot_taskpool.o(i._initializeJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _initializeJob
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateJob
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateRecyclableJob
</UL>

<P><STRONG><a name="[68]"></a>_matchJobByPointer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iot_taskpool.o(i._matchJobByPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _matchJobByPointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_taskpool.o(i._tryCancelInternal)
</UL>
<P><STRONG><a name="[306]"></a>_performTaskPoolParameterValidation</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, iot_taskpool.o(i._performTaskPoolParameterValidation))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateSystemTaskPool
</UL>

<P><STRONG><a name="[30d]"></a>_recycleJob</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iot_taskpool.o(i._recycleJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _recycleJob &rArr; _destroyJob &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyJob
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_RecycleJob
</UL>

<P><STRONG><a name="[310]"></a>_rescheduleDeferredJobsTimer</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, iot_taskpool.o(i._rescheduleDeferredJobsTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimeMs
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_TimerArm
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tryCancelInternal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
</UL>

<P><STRONG><a name="[30f]"></a>_scheduleInternal</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, iot_taskpool.o(i._scheduleInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _scheduleInternal &rArr; Iot_CreateDetachedThread &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iot_CreateDetachedThread
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Wait
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Post
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertTail
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Schedule
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerThread
</UL>

<P><STRONG><a name="[309]"></a>_signalShutdown</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, iot_taskpool.o(i._signalShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _signalShutdown &rArr; IotSemaphore_Post &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Post
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Destroy
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createTaskPool
</UL>

<P><STRONG><a name="[54]"></a>_taskPoolWorker</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, iot_taskpool.o(i._taskPoolWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _taskPoolWorker &rArr; IotMutex_Lock &rArr; prIotMutexTimedLock &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_TimedWait
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotSemaphore_Post
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsShutdownStarted
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotDeQueue_DequeueHead
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iot_taskpool.o(i._createTaskPool)
<LI> iot_taskpool.o(i._scheduleInternal)
</UL>
<P><STRONG><a name="[40]"></a>_timerEventCompare</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, iot_taskpool.o(i._timerEventCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _timerEventCompare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_taskpool.o(i.IotTaskPool_ScheduleDeferred)
</UL>
<P><STRONG><a name="[5f]"></a>_timerThread</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, iot_taskpool.o(i._timerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _timerThread &rArr; _scheduleInternal &rArr; Iot_CreateDetachedThread &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_GetTimeMs
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduleInternal
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rescheduleDeferredJobsTimer
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroyTaskPool
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsShutdownStarted
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_PeekHead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_taskpool.o(i._initTaskPoolControlStructures)
</UL>
<P><STRONG><a name="[312]"></a>_tryCancelInternal</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, iot_taskpool.o(i._tryCancelInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rescheduleDeferredJobsTimer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_PeekHead
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_FindFirstMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_TryCancel
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trySafeExtraction
</UL>

<P><STRONG><a name="[30c]"></a>_trySafeExtraction</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, iot_taskpool.o(i._trySafeExtraction))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_strerror
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tryCancelInternal
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLink_IsLinked
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_ScheduleDeferred
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Schedule
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_RecycleJob
</UL>

<P><STRONG><a name="[2c1]"></a>_reallocLoggingBuffer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, iot_logging.o(i._reallocLoggingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _reallocLoggingBuffer &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
</UL>

<P><STRONG><a name="[25c]"></a>IotListDouble_Create</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, aws_iot_network_manager.o(i.IotListDouble_Create))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_Init
</UL>

<P><STRONG><a name="[25d]"></a>IotListDouble_InsertTail</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, aws_iot_network_manager.o(i.IotListDouble_InsertTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IotListDouble_InsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_SubscribeForStateChange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_onNetworkStateChangeCallback
</UL>

<P><STRONG><a name="[260]"></a>IotListDouble_Remove</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, aws_iot_network_manager.o(i.IotListDouble_Remove))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_RemoveSubscription
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dispatchNetworkStateChangeCB
</UL>

<P><STRONG><a name="[63]"></a>_dispatchNetworkStateChangeCB</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, aws_iot_network_manager.o(i._dispatchNetworkStateChangeCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _dispatchNetworkStateChangeCB &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_Remove
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Schedule
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_RecycleJob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_iot_network_manager.o(i._onNetworkStateChangeCallback)
</UL>
<P><STRONG><a name="[30]"></a>_onNetworkStateChangeCallback</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, aws_iot_network_manager.o(i._onNetworkStateChangeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _onNetworkStateChangeCallback &rArr; IotTaskPool_Schedule &rArr; _trySafeExtraction &rArr; _tryCancelInternal &rArr; _rescheduleDeferredJobsTimer &rArr; IotClock_TimerArm &rArr; IotLog_Generic &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotLog_Generic
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetJobStorageFromHandle
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_GetSystemTaskPool
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Unlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotMutex_Lock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotListDouble_InsertTail
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_Schedule
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_RecycleJob
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotTaskPool_CreateRecyclableJob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_iot_network_manager.o(i.AwsIotNetworkManager_Init)
</UL>
<P><STRONG><a name="[3cc]"></a>_wifiConnectAccessPoint</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, aws_iot_network_manager.o(i._wifiConnectAccessPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = _wifiConnectAccessPoint &rArr; WIFI_ConnectAP &rArr; _mtk_sta_ip_down &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotClock_SleepMs
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifiEnable
</UL>

<P><STRONG><a name="[256]"></a>_wifiEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aws_iot_network_manager.o(i._wifiEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = _wifiEnable &rArr; WIFI_On &rArr; _mtk_wifi_bootstrap &rArr; _ip_init &rArr; lwip_tcpip_init &rArr; ethernetif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifiConnectAccessPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwsIotNetworkManager_EnableNetwork
</UL>

<P><STRONG><a name="[135]"></a>wpa_supplicant_task</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wpa_supplicant_task.o(i.wpa_supplicant_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = wpa_supplicant_task &rArr; wpa_supplicant_entry &rArr; wpa_supplicant_entry_iface_change &rArr; wpa_driver_inband_handle_wow &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_get_wic_wakeup
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_delete
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_opmode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant_task.o(i.wpa_supplicant_task_init)
</UL>
<P><STRONG><a name="[667]"></a>DlListAddTail</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inband_queue.o(i.DlListAddTail))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_mfree
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_add_to_wait_list
</UL>

<P><STRONG><a name="[681]"></a>DlListDel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inband_queue.o(i.DlListDel))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_mfree
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_malloc
</UL>

<P><STRONG><a name="[68b]"></a>DlListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inband_queue.o(i.DlListInit))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_init
</UL>

<P><STRONG><a name="[673]"></a>DlListLen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, inband_queue.o(i.DlListLen))
<BR><BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[af]"></a>_inband_queue_n9log_dump</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inband_queue.o(i._inband_queue_n9log_dump))
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(i.inband_queue_init)
</UL>
<P><STRONG><a name="[665]"></a>inband_add_to_wait_list</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, inband_queue.o(i.inband_add_to_wait_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inband_add_to_wait_list &rArr; wifi_os_task_exit_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_exit_critical
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_enter_critical
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlListAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
</UL>

<P><STRONG><a name="[ad]"></a>inband_default_rsp_handler</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, inband_queue.o(i.inband_default_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inband_default_rsp_handler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 3]<UL><LI> inband_queue.o(i.inband_enqueue_cmd_config)
<LI> inband_queue.o(i.inband_queue_exec)
<LI> inband_queue.o(i.inband_queue_query)
</UL>
<P><STRONG><a name="[670]"></a>inband_enqueue_cmd_config</STRONG> (Thumb, 554 bytes, Stack size 72 bytes, inband_queue.o(i.inband_enqueue_cmd_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_sleep
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_get_scheduler_state
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_get_name
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_get_handle
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_exit_critical
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_enter_critical
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_create_binary
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_malloc
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_get_mq_spaces
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_tx_buf_unlock
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_mfree
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_malloc
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlListLen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_query
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>

<P><STRONG><a name="[687]"></a>inband_evt_get_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inband_queue.o(i.inband_evt_get_handler))
<BR><BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_handler
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
</UL>

<P><STRONG><a name="[67f]"></a>inband_job_add</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, inband_queue.o(i.inband_job_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inband_job_add &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
</UL>

<P><STRONG><a name="[672]"></a>inband_malloc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inband_queue.o(i.inband_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inband_malloc &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_exit_critical
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_enter_critical
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlListDel
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[67c]"></a>inband_mfree</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, inband_queue.o(i.inband_mfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inband_mfree &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_exit_critical
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_task_enter_critical
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_delete
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_free
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlListDel
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlListAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[ae]"></a>inband_queue_task</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, inband_queue.o(i.inband_queue_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inband_queue_task &rArr; wifi_os_queue_receive &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inband_queue.o(i.inband_queue_init)
</UL>
<P><STRONG><a name="[676]"></a>inband_send_cmd</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, inband_queue.o(i.inband_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_tx_flow_control_check_and_update_tx
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connsys_util_tx_data
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_tx_buf_unlock
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_tx_buf_lock
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_add_to_wait_list
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[686]"></a>inband_show_wifi_event_format</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inband_queue.o(i.inband_show_wifi_event_format))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_evt_handler
</UL>

<P><STRONG><a name="[68f]"></a>inband_tx_buf_lock</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, inband_queue.o(i.inband_tx_buf_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inband_tx_buf_lock &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
</UL>

<P><STRONG><a name="[67b]"></a>inband_tx_buf_unlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, inband_queue.o(i.inband_tx_buf_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inband_tx_buf_unlock &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_semphr_give
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_cmd
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_enqueue_cmd_config
</UL>

<P><STRONG><a name="[42]"></a>prvNetTask</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_task.o(i.prvNetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvNetTask &rArr; wifi_os_queue_receive &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_os_queue_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_task.o(i.NetTaskInit)
</UL>
<P><STRONG><a name="[97d]"></a>wifi_beacon_probe_rsp_parser</STRONG> (Thumb, 818 bytes, Stack size 40 bytes, wifi_scan.o(i.wifi_beacon_probe_rsp_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wifi_beacon_probe_rsp_parser &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memmove
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_list_handler
</UL>

<P><STRONG><a name="[3d1]"></a>_wpa_hexdump</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wpa_debug.o(i._wpa_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_debug_print_timestamp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>

<P><STRONG><a name="[3d3]"></a>_wpa_hexdump_ascii</STRONG> (Thumb, 226 bytes, Stack size 136 bytes, wpa_debug.o(i._wpa_hexdump_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _wpa_hexdump_ascii &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_debug_print_timestamp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_ascii_key
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_ascii
</UL>

<P><STRONG><a name="[a81]"></a>wpa_drv_get_socket</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wpa_supplicant_entry.o(i.wpa_drv_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_drv_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_iface_change
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_entry_dual_iface
</UL>

<P><STRONG><a name="[386]"></a>_do_isr</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wifi_inband.o(i._do_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _do_isr &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_scan_custom
</UL>

<P><STRONG><a name="[388]"></a>_do_process_driver_event</STRONG> (Thumb, 1314 bytes, Stack size 200 bytes, driver_inband.o(i._do_process_driver_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = _do_process_driver_event &rArr; wpa_driver_inband_raw_receive &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_iface
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_wep_key
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_raw_receive
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_radio_onoff
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_process_drv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_msg_recv
</UL>

<P><STRONG><a name="[391]"></a>do_process_drv_event</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, driver_inband.o(i.do_process_drv_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080<LI>Call Chain = do_process_drv_event &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_inband_update_proto_cipher_from_N9
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
</UL>

<P><STRONG><a name="[4e3]"></a>driver_inband_update_proto_cipher_from_N9</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, driver_inband.o(i.driver_inband_update_proto_cipher_from_N9))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = driver_inband_update_proto_cipher_from_N9 &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_process_drv_event
</UL>

<P><STRONG><a name="[ab]"></a>driver_msg_recv</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, driver_inband.o(i.driver_msg_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = driver_msg_recv &rArr; _do_process_driver_event &rArr; wpa_driver_inband_raw_receive &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_driver_init)
</UL>
<P><STRONG><a name="[ac]"></a>handle_read</STRONG> (Thumb, 54 bytes, Stack size 176 bytes, driver_inband.o(i.handle_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = handle_read &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_driver_init)
</UL>
<P><STRONG><a name="[198]"></a>inband_add_pmkid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.inband_add_pmkid))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[669]"></a>inband_create_iface</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, driver_inband.o(i.inband_create_iface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inband_create_iface
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_disable_11b_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_if_add
</UL>

<P><STRONG><a name="[66a]"></a>inband_disable_11b_rates</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_inband.o(i.inband_disable_11b_rates))
<BR><BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_create_iface
</UL>

<P><STRONG><a name="[193]"></a>inband_driver_init</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, driver_inband.o(i.inband_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = inband_driver_init &rArr; l2_packet_init &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_mac_address
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strstr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_read_sock
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_preocess_global_event
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_init
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_register_supplicant_set_api
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>inband_driver_send_eapol</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, driver_inband.o(i.inband_driver_send_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inband_driver_send_eapol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>inband_driver_send_ether</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, driver_inband.o(i.inband_driver_send_ether))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inband_driver_send_ether
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>inband_flush_pmkid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.inband_flush_pmkid))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[66f]"></a>inband_register_supplicant_set_api</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, driver_inband.o(i.inband_register_supplicant_set_api))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_driver_init
</UL>

<P><STRONG><a name="[199]"></a>inband_remove_pmkid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.inband_remove_pmkid))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>inband_send_frame</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, driver_inband.o(i.inband_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inband_send_frame &rArr; wpa_driver_inband_send_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_send_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[9f6]"></a>inband_send_frame_cmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_inband.o(i.inband_send_frame_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_send_frame
</UL>

<P><STRONG><a name="[1b0]"></a>inband_set_p2p_powersave</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, driver_inband.o(i.inband_set_p2p_powersave))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inband_set_p2p_powersave
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_set_power_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[692]"></a>inband_set_power_save</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_inband.o(i.inband_set_power_save))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_set_p2p_powersave
</UL>

<P><STRONG><a name="[9f7]"></a>is_broadcast_ether_addr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, driver_inband.o(i.is_broadcast_ether_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_sta_deauth
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_key
</UL>

<P><STRONG><a name="[c2]"></a>mtk_ap_get_sta</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, driver_inband.o(i.mtk_ap_get_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mtk_ap_get_sta &rArr; ap_get_sta &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b4]"></a>mtk_supplicant_calculate_pmk</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, driver_inband.o(i.mtk_supplicant_calculate_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = mtk_supplicant_calculate_pmk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1 (via Veneer)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[c1]"></a>mtk_supplicant_check_wps_element_from_ap</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, driver_inband.o(i.mtk_supplicant_check_wps_element_from_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mtk_supplicant_check_wps_element_from_ap &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[c4]"></a>mtk_supplicant_disable_trigger_scan</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, driver_inband.o(i.mtk_supplicant_disable_trigger_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mtk_supplicant_disable_trigger_scan &rArr; wpa_supplicant_get_iface &rArr; os_strcmp &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_iface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[c5]"></a>mtk_supplicant_enable_trigger_scan</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver_inband.o(i.mtk_supplicant_enable_trigger_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mtk_supplicant_enable_trigger_scan &rArr; wpa_supplicant_get_iface &rArr; os_strcmp &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_iface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b3]"></a>mtk_supplicant_get_pmk</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_get_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_get_pmk &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b1]"></a>mtk_supplicant_get_security</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_get_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_get_security &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b8]"></a>mtk_supplicant_get_ssid</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_get_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_get_ssid &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[bb]"></a>mtk_supplicant_get_wep_key</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_get_wep_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_get_wep_key &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b6]"></a>mtk_supplicant_get_wpa_psk_key</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_get_wpa_psk_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_get_wpa_psk_key &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[c0]"></a>mtk_supplicant_radio_onoff</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, driver_inband.o(i.mtk_supplicant_radio_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = mtk_supplicant_radio_onoff &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_sched_scan
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b9]"></a>mtk_supplicant_set_bssid</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_set_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_set_bssid &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b2]"></a>mtk_supplicant_set_pmk</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_set_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_set_pmk &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b0]"></a>mtk_supplicant_set_security</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_set_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_set_security &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_encr
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_auth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b7]"></a>mtk_supplicant_set_ssid</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_set_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_set_ssid &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[ba]"></a>mtk_supplicant_set_wep_key</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_set_wep_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mtk_supplicant_set_wep_key &rArr; supplicant_ready_query &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[b5]"></a>mtk_supplicant_set_wpa_psk_key</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, driver_inband.o(i.mtk_supplicant_set_wpa_psk_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mtk_supplicant_set_wpa_psk_key &rArr; wpa_config_set_wpapsk &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_get_interface_by_port
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_wpapsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[bf]"></a>mtk_supplicant_start_scan</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver_inband.o(i.mtk_supplicant_start_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = mtk_supplicant_start_scan &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_iface
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[be]"></a>mtk_supplicant_stop_scan</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, driver_inband.o(i.mtk_supplicant_stop_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mtk_supplicant_stop_scan &rArr; wpa_supplicant_cancel_sched_scan &rArr; wpa_supplicant_stop_sched_scan &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_iface
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ready_query
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_sched_scan
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(i.inband_register_supplicant_set_api)
</UL>
<P><STRONG><a name="[197]"></a>wpa_driver_inband_associate</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, driver_inband.o(i.wpa_driver_inband_associate))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = wpa_driver_inband_associate &rArr; wpa_driver_inband_set_wep_key &rArr; wifi_inband_set_wep_key &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_wep_key
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_set_ps_mode
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_connect
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_encryption
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_auth_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>wpa_driver_inband_cancel_remain_on_channel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_cancel_remain_on_channel))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[9ed]"></a>wpa_driver_inband_connect</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, driver_inband.o(i.wpa_driver_inband_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = wpa_driver_inband_connect &rArr; wifi_inband_bssid &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_opmode
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_set_ap_start
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_bssid
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_associate
</UL>

<P><STRONG><a name="[195]"></a>wpa_driver_inband_deauthenticate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, driver_inband.o(i.wpa_driver_inband_deauthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wpa_driver_inband_deauthenticate &rArr; wpa_driver_inband_disconnect &rArr; wifi_inband_disconnect &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>wpa_driver_inband_deinit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, driver_inband.o(i.wpa_driver_inband_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wpa_driver_inband_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_preocess_global_event
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_unregister_read_sock
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_del_beacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>wpa_driver_inband_deinit_ap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_deinit_ap))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[9ef]"></a>wpa_driver_inband_del_beacon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_del_beacon))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_deinit
</UL>

<P><STRONG><a name="[196]"></a>wpa_driver_inband_disassociate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, driver_inband.o(i.wpa_driver_inband_disassociate))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wpa_driver_inband_disassociate &rArr; wpa_driver_inband_disconnect &rArr; wifi_inband_disconnect &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[9ee]"></a>wpa_driver_inband_disconnect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver_inband.o(i.wpa_driver_inband_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wpa_driver_inband_disconnect &rArr; wifi_inband_disconnect &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_disassociate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_deauthenticate
</UL>

<P><STRONG><a name="[191]"></a>wpa_driver_inband_driver_cmd</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, driver_inband.o(i.wpa_driver_inband_driver_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpa_driver_inband_driver_cmd &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>wpa_driver_inband_get_bssid</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, driver_inband.o(i.wpa_driver_inband_get_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wpa_driver_inband_get_bssid &rArr; wifi_inband_bssid &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_bssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>wpa_driver_inband_get_mac_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_get_mac_addr))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>wpa_driver_inband_get_scan_results</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, driver_inband.o(i.wpa_driver_inband_get_scan_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wpa_driver_inband_get_scan_results &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_reset
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_table_array
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_scan_table_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>wpa_driver_inband_get_ssid</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, driver_inband.o(i.wpa_driver_inband_get_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wpa_driver_inband_get_ssid &rArr; wifi_inband_ssid &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_ssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>wpa_driver_inband_hapd_send_eapol</STRONG> (Thumb, 140 bytes, Stack size 1640 bytes, driver_inband.o(i.wpa_driver_inband_hapd_send_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = wpa_driver_inband_hapd_send_eapol &rArr; ethernet_raw_pkt_sender &rArr; low_level_output_scatter &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_raw_pkt_sender
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>wpa_driver_inband_if_add</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, driver_inband.o(i.wpa_driver_inband_if_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpa_driver_inband_if_add &rArr; inband_create_iface
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_create_iface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[390]"></a>wpa_driver_inband_raw_receive</STRONG> (Thumb, 94 bytes, Stack size 176 bytes, driver_inband.o(i.wpa_driver_inband_raw_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = wpa_driver_inband_raw_receive &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_process_driver_event
</UL>

<P><STRONG><a name="[1ac]"></a>wpa_driver_inband_remain_on_channel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_remain_on_channel))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>wpa_driver_inband_scan</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, driver_inband.o(i.wpa_driver_inband_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = wpa_driver_inband_scan &rArr; mtk_supplicant_scan_in_repeater_mode &rArr; wifi_inband_wireless_mode &rArr; inband_queue_query &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_inband_start_scan
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_n9_auto_scan_status
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_supplicant_scan_in_repeater_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>wpa_driver_inband_scan_timeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, driver_inband.o(i.wpa_driver_inband_scan_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = wpa_driver_inband_scan_timeout &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>
<BR>[Address Reference Count : 3]<UL><LI> driver_inband.o(i.do_process_drv_event)
<LI> driver_inband.o(i.wpa_driver_inband_deinit)
<LI> driver_inband.o(i.wpa_driver_inband_scan)
</UL>
<P><STRONG><a name="[1aa]"></a>wpa_driver_inband_send_action</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, driver_inband.o(i.wpa_driver_inband_send_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_driver_inband_send_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>wpa_driver_inband_send_action_cancel_wait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_send_action_cancel_wait))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[691]"></a>wpa_driver_inband_send_frame</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, driver_inband.o(i.wpa_driver_inband_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_driver_inband_send_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_frame_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_send_frame
</UL>

<P><STRONG><a name="[19d]"></a>wpa_driver_inband_send_mlme</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, driver_inband.o(i.wpa_driver_inband_send_mlme))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_driver_inband_send_mlme
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>wpa_driver_inband_set_ap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_set_ap))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>wpa_driver_inband_set_key</STRONG> (Thumb, 330 bytes, Stack size 160 bytes, driver_inband.o(i.wpa_driver_inband_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = wpa_driver_inband_set_key &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_ether_addr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[7f5]"></a>wpa_driver_inband_set_ptk_kck_kek</STRONG> (Thumb, 160 bytes, Stack size 144 bytes, driver_inband.o(i.wpa_driver_inband_set_ptk_kck_kek))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = wpa_driver_inband_set_ptk_kck_kek &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inband_queue_exec
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_ptk_kck_kek
</UL>

<P><STRONG><a name="[1a9]"></a>wpa_driver_inband_set_supp_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_set_supp_port))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>wpa_driver_inband_sta_add</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_sta_add))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>wpa_driver_inband_sta_deauth</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, driver_inband.o(i.wpa_driver_inband_sta_deauth))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wpa_driver_inband_sta_deauth &rArr; wifi_connection_disconnect_sta &rArr; wifi_inband_disconnect &rArr; inband_queue_exec &rArr; inband_enqueue_cmd_config &rArr; inband_send_cmd &rArr; connsys_util_tx_data &rArr; connsys_fifo_write &rArr; connsys_bus_write_port &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connection_disconnect_sta
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_ether_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>wpa_driver_inband_sta_disassoc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, driver_inband.o(i.wpa_driver_inband_sta_disassoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_driver_inband_sta_disassoc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>wpa_driver_inband_sta_remove</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_inband.o(i.wpa_driver_inband_sta_remove))
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>wpa_driver_inband_sta_set_flags</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, driver_inband.o(i.wpa_driver_inband_sta_set_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_driver_inband_sta_set_flags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_inband.o(.constdata)
</UL>
<P><STRONG><a name="[562]"></a>dl_list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eloop.o(i.dl_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>

<P><STRONG><a name="[565]"></a>dl_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eloop.o(i.dl_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
</UL>

<P><STRONG><a name="[560]"></a>eloop_get_sock_table</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eloop.o(i.eloop_get_sock_table))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_unregister_sock
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_sock
</UL>

<P><STRONG><a name="[569]"></a>eloop_process_pending_signals</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, eloop.o(i.eloop_process_pending_signals))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eloop_process_pending_signals
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
</UL>

<P><STRONG><a name="[559]"></a>eloop_remove_timeout</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eloop.o(i.eloop_remove_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>

<P><STRONG><a name="[561]"></a>eloop_sock_table_add_sock</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, eloop.o(i.eloop_sock_table_add_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = eloop_sock_table_add_sock &rArr; os_mem_realloc &rArr; pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_sock
</UL>

<P><STRONG><a name="[55c]"></a>eloop_sock_table_destroy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eloop.o(i.eloop_sock_table_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eloop_sock_table_destroy &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
</UL>

<P><STRONG><a name="[56a]"></a>eloop_sock_table_dispatch</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, eloop.o(i.eloop_sock_table_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eloop_sock_table_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
</UL>

<P><STRONG><a name="[56c]"></a>eloop_sock_table_remove_sock</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, eloop.o(i.eloop_sock_table_remove_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eloop_sock_table_remove_sock &rArr; os_memmove &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_unregister_sock
</UL>

<P><STRONG><a name="[566]"></a>eloop_sock_table_set_fds</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, eloop.o(i.eloop_sock_table_set_fds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eloop_sock_table_set_fds
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
</UL>

<P><STRONG><a name="[41f]"></a>are_ies_equal</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, bss.o(i.are_ies_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = are_ies_equal &rArr; wpa_scan_get_vendor_ie_multi &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_compare_res
</UL>

<P><STRONG><a name="[4c7]"></a>dl_list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bss.o(i.dl_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
</UL>

<P><STRONG><a name="[4c6]"></a>dl_list_add_tail</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bss.o(i.dl_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dl_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
</UL>

<P><STRONG><a name="[9d2]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bss.o(i.dl_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
</UL>

<P><STRONG><a name="[9cb]"></a>dl_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bss.o(i.dl_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush_by_age
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove_oldest
</UL>

<P><STRONG><a name="[9d0]"></a>dl_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bss.o(i.dl_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_init
</UL>

<P><STRONG><a name="[81a]"></a>notify_bss_changes</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, bss.o(i.notify_bss_changes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = notify_bss_changes
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bss_wps_changed
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bss_wpaie_changed
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bss_signal_changed
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bss_rsnie_changed
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bss_rates_changed
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bss_privacy_changed
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bss_mode_changed
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bss_ies_changed
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bss_freq_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update
</UL>

<P><STRONG><a name="[9bf]"></a>wpa_bss_add</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bss.o(i.wpa_bss_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wpa_bss_add &rArr; wpa_bss_remove_oldest &rArr; wpa_bss_remove_oldest_unknown &rArr; wpa_bss_remove &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_bss_entry
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove_oldest
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_copy_res
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_scan_res
</UL>

<P><STRONG><a name="[9c4]"></a>wpa_bss_compare_res</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, bss.o(i.wpa_bss_compare_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = wpa_bss_compare_res &rArr; are_ies_equal &rArr; wpa_scan_get_vendor_ie_multi &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update
</UL>

<P><STRONG><a name="[9c1]"></a>wpa_bss_copy_res</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bss.o(i.wpa_bss_copy_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_bss_copy_res &rArr; os_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
</UL>

<P><STRONG><a name="[9c7]"></a>wpa_bss_in_use</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bss.o(i.wpa_bss_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_bss_in_use &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_end
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush_by_age
</UL>

<P><STRONG><a name="[9cd]"></a>wpa_bss_included_in_scan</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, bss.o(i.wpa_bss_included_in_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_bss_included_in_scan &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_end
</UL>

<P><STRONG><a name="[9d1]"></a>wpa_bss_known</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bss.o(i.wpa_bss_known))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_bss_known &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove_oldest_unknown
</UL>

<P><STRONG><a name="[9c8]"></a>wpa_bss_remove</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, bss.o(i.wpa_bss_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wpa_bss_remove &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ret_bss_entry
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_end
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush_by_age
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove_oldest_unknown
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove_oldest
</UL>

<P><STRONG><a name="[9c3]"></a>wpa_bss_remove_oldest</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bss.o(i.wpa_bss_remove_oldest))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wpa_bss_remove_oldest &rArr; wpa_bss_remove_oldest_unknown &rArr; wpa_bss_remove &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove_oldest_unknown
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
</UL>

<P><STRONG><a name="[9d4]"></a>wpa_bss_remove_oldest_unknown</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bss.o(i.wpa_bss_remove_oldest_unknown))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wpa_bss_remove_oldest_unknown &rArr; wpa_bss_remove &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_known
</UL>
<BR>[Called By]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove_oldest
</UL>

<P><STRONG><a name="[9d5]"></a>wpa_bss_update</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, bss.o(i.wpa_bss_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = wpa_bss_update &rArr; wpa_bss_compare_res &rArr; are_ies_equal &rArr; wpa_scan_get_vendor_ie_multi &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_realloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_copy_res
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_compare_res
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_bss_changes
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_update_scan_res
</UL>

<P><STRONG><a name="[9c9]"></a>wpa_del_bss_entry_list</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bss.o(i.wpa_del_bss_entry_list))
<BR><BR>[Called By]<UL><LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_flush
</UL>

<P><STRONG><a name="[9c0]"></a>wpa_get_bss_entry</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bss.o(i.wpa_get_bss_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_get_bss_entry &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
</UL>

<P><STRONG><a name="[9cf]"></a>wpa_init_bss_entry_list</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bss.o(i.wpa_init_bss_entry_list))
<BR><BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_init
</UL>

<P><STRONG><a name="[9d3]"></a>wpa_ret_bss_entry</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bss.o(i.wpa_ret_bss_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_ret_bss_entry &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
</UL>

<P><STRONG><a name="[426]"></a>wpabuf_head_u8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bss.o(i.wpabuf_head_u8))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_ies_equal
</UL>

<P><STRONG><a name="[119]"></a>ap_probe_req_rx</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ap.o(i.ap_probe_req_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ap_probe_req_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap.o(i.wpa_supplicant_create_ap)
</UL>
<P><STRONG><a name="[117]"></a>ap_public_action_rx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap.o(i.ap_public_action_rx))
<BR>[Address Reference Count : 1]<UL><LI> ap.o(i.wpa_supplicant_create_ap)
</UL>
<P><STRONG><a name="[11c]"></a>ap_sta_authorized_cb</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ap.o(i.ap_sta_authorized_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ap_sta_authorized_cb &rArr; wpas_notify_sta_authorized
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_sta_authorized
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap.o(i.wpa_supplicant_create_ap)
</UL>
<P><STRONG><a name="[118]"></a>ap_vendor_action_rx</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ap.o(i.ap_vendor_action_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ap_vendor_action_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap.o(i.wpa_supplicant_create_ap)
</UL>
<P><STRONG><a name="[11b]"></a>ap_wps_event_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap.o(i.ap_wps_event_cb))
<BR>[Address Reference Count : 1]<UL><LI> ap.o(i.wpa_supplicant_create_ap)
</UL>
<P><STRONG><a name="[11a]"></a>ap_wps_reg_success_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap.o(i.ap_wps_reg_success_cb))
<BR>[Address Reference Count : 1]<UL><LI> ap.o(i.wpa_supplicant_create_ap)
</UL>
<P><STRONG><a name="[a6b]"></a>wpa_supplicant_conf_ap</STRONG> (Thumb, 844 bytes, Stack size 32 bytes, ap.o(i.wpa_supplicant_conf_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wpa_supplicant_conf_ap &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_strdup
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlcpy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_create_ap
</UL>

<P><STRONG><a name="[11d]"></a>wpas_ap_configured_cb</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ap.o(i.wpas_ap_configured_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wpas_ap_configured_cb &rArr; wpa_supplicant_set_state &rArr; wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap.o(i.wpa_supplicant_create_ap)
</UL>
<P><STRONG><a name="[c8]"></a>freq_cmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scan.o(i.freq_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = freq_cmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scan.o(i.int_array_sort_unique)
</UL>
<P><STRONG><a name="[697]"></a>int_array_concat</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, scan.o(i.int_array_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = int_array_concat &rArr; os_mem_realloc &rArr; pvPortRealloc &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_realloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_array_len
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[698]"></a>int_array_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scan.o(i.int_array_len))
<BR><BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_array_sort_unique
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_array_concat
</UL>

<P><STRONG><a name="[699]"></a>int_array_sort_unique</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, scan.o(i.int_array_sort_unique))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = int_array_sort_unique &rArr; qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_array_len
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[a27]"></a>wpa_scan_get_max_rate</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, scan.o(i.wpa_scan_get_max_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_scan_get_max_rate &rArr; wpa_scan_get_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_result_compar
</UL>

<P><STRONG><a name="[122]"></a>wpa_scan_result_compar</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, scan.o(i.wpa_scan_result_compar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wpa_scan_result_compar &rArr; wpa_scan_get_max_rate &rArr; wpa_scan_get_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_max_rate
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scan.o(i.wpa_supplicant_get_scan_results)
</UL>
<P><STRONG><a name="[a4c]"></a>wpa_supplicant_assoc_try</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, scan.o(i.wpa_supplicant_assoc_try))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = wpa_supplicant_assoc_try &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[a5c]"></a>wpa_supplicant_build_filter_ssids</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, scan.o(i.wpa_supplicant_build_filter_ssids))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wpa_supplicant_build_filter_ssids &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[11e]"></a>wpa_supplicant_delayed_sched_scan_timeout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, scan.o(i.wpa_supplicant_delayed_sched_scan_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = wpa_supplicant_delayed_sched_scan_timeout &rArr; wpa_supplicant_req_sched_scan &rArr; wpa_supplicant_set_state &rArr; wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scan.o(i.wpa_supplicant_delayed_sched_scan)
</UL>
<P><STRONG><a name="[ac6]"></a>wpa_supplicant_extra_ies</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scan.o(i.wpa_supplicant_extra_ies))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
</UL>

<P><STRONG><a name="[a9f]"></a>wpa_supplicant_gen_assoc_event</STRONG> (Thumb, 128 bytes, Stack size 160 bytes, scan.o(i.wpa_supplicant_gen_assoc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = wpa_supplicant_gen_assoc_event &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_driver_inband_apcli_connect
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_network_changed
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_initiate_eapol
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[ac8]"></a>wpa_supplicant_optimize_freqs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scan.o(i.wpa_supplicant_optimize_freqs))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[114]"></a>wpa_supplicant_scan</STRONG> (Thumb, 954 bytes, Stack size 208 bytes, scan.o(i.wpa_supplicant_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408<LI>Call Chain = wpa_supplicant_scan &rArr; wpa_supplicant_gen_assoc_event &rArr; wpa_supplicant_event &rArr; wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_ascii
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_optimize_freqs
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gen_assoc_event
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_extra_ies
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_build_filter_ssids
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_try
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_array_sort_unique
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_array_concat
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_ap_scan_changed
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_trigger_scan
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_enabled_networks
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scan.o(i.wpa_supplicant_cancel_scan)
<LI> scan.o(i.wpa_supplicant_req_scan)
</UL>
<P><STRONG><a name="[115]"></a>wpa_supplicant_sched_scan_timeout</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, scan.o(i.wpa_supplicant_sched_scan_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wpa_supplicant_sched_scan_timeout &rArr; wpa_supplicant_cancel_sched_scan &rArr; wpa_supplicant_stop_sched_scan &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_sched_scan
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scan.o(i.wpa_supplicant_cancel_sched_scan)
<LI> scan.o(i.wpa_supplicant_req_sched_scan)
</UL>
<P><STRONG><a name="[ac7]"></a>wpa_supplicant_start_sched_scan</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, scan.o(i.wpa_supplicant_start_sched_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpa_supplicant_start_sched_scan &rArr; wpa_supplicant_notify_scanning
</UL>
<BR>[Calls]<UL><LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_notify_scanning
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
</UL>

<P><STRONG><a name="[a5d]"></a>wpa_supplicant_stop_sched_scan</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, scan.o(i.wpa_supplicant_stop_sched_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpa_supplicant_stop_sched_scan &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_sched_scan
</UL>

<P><STRONG><a name="[a28]"></a>wpabuf_put_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, scan.o(i.wpabuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
</UL>

<P><STRONG><a name="[5a1]"></a>add_freq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wpa_supplicant.o(i.add_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bss_freqs_in_ess
</UL>

<P><STRONG><a name="[aa6]"></a>dl_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_supplicant.o(i.dl_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[596]"></a>free_hw_features</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wpa_supplicant.o(i.free_hw_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = free_hw_features &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[59f]"></a>get_bss_freqs_in_ess</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, wpa_supplicant.o(i.get_bss_freqs_in_ess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_bss_freqs_in_ess &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_get
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_connection_failed
</UL>

<P><STRONG><a name="[a4f]"></a>is_zero_ether_addr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wpa_supplicant.o(i.is_zero_ether_addr))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[881]"></a>select_driver</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wpa_supplicant.o(i.select_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = select_driver &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_driver
</UL>

<P><STRONG><a name="[a58]"></a>wpa_drv_get_capa</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_drv_get_capa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_drv_get_capa
</UL>
<BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[ad0]"></a>wpa_drv_get_mac_addr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wpa_supplicant.o(i.wpa_drv_get_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_drv_get_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_mac_addr
</UL>

<P><STRONG><a name="[ac4]"></a>wpa_drv_inband_cmd</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wpa_supplicant.o(i.wpa_drv_inband_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_drv_inband_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
</UL>

<P><STRONG><a name="[a75]"></a>wpa_drv_set_countermeasures</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_drv_set_countermeasures))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_drv_set_countermeasures
</UL>
<BR>[Called By]<UL><LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit_iface
</UL>

<P><STRONG><a name="[aad]"></a>wpa_drv_set_country</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_drv_set_country))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_drv_set_country
</UL>
<BR>[Called By]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_config
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[9da]"></a>wpa_drv_set_key</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, wpa_supplicant.o(i.wpa_drv_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_wpa_none_key
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_set_wep_keys
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
</UL>

<P><STRONG><a name="[acc]"></a>wpa_drv_set_operstate</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_drv_set_operstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_drv_set_operstate
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[acd]"></a>wpa_drv_set_supp_port</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_drv_set_supp_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_drv_set_supp_port
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[a12]"></a>wpa_key_mgmt_wpa</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpa_supplicant.o(i.wpa_key_mgmt_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_key_mgmt_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_ieee8021x
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[a13]"></a>wpa_key_mgmt_wpa_ieee8021x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_supplicant.o(i.wpa_key_mgmt_wpa_ieee8021x))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
</UL>

<P><STRONG><a name="[a14]"></a>wpa_key_mgmt_wpa_psk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_supplicant.o(i.wpa_key_mgmt_wpa_psk))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configuration
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
</UL>

<P><STRONG><a name="[a47]"></a>wpa_supplicant_alloc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wpa_supplicant.o(i.wpa_supplicant_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wpa_supplicant_alloc &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_add_iface
</UL>

<P><STRONG><a name="[a60]"></a>wpa_supplicant_check_group_cipher_from_ap</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, wpa_supplicant.o(i.wpa_supplicant_check_group_cipher_from_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = wpa_supplicant_check_group_cipher_from_ap &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[a61]"></a>wpa_supplicant_check_pairwise_cipher_from_ap</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, wpa_supplicant.o(i.wpa_supplicant_check_pairwise_cipher_from_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = wpa_supplicant_check_pairwise_cipher_from_ap &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[a62]"></a>wpa_supplicant_check_proto_from_ap</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, wpa_supplicant.o(i.wpa_supplicant_check_proto_from_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = wpa_supplicant_check_proto_from_ap &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[a63]"></a>wpa_supplicant_cleanup</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = wpa_supplicant_cleanup &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ap_deinit
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_deinit
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_sched_scan
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_network_removed
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_scard_ctx
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_eapol
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deinit
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_clear
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_deinit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_hw_features
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deinit_iface
</UL>

<P><STRONG><a name="[a67]"></a>wpa_supplicant_clear_connection</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_clear_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_network_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
</UL>

<P><STRONG><a name="[a6e]"></a>wpa_supplicant_daemon</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpa_supplicant.o(i.wpa_supplicant_daemon))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_supplicant_daemon
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_daemonize
</UL>
<BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_run
</UL>

<P><STRONG><a name="[a49]"></a>wpa_supplicant_deinit_iface</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wpa_supplicant_deinit_iface))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = wpa_supplicant_deinit_iface &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_countermeasures
</UL>
<BR>[Called By]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_remove_iface
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_add_iface
</UL>

<P><STRONG><a name="[a48]"></a>wpa_supplicant_init_iface</STRONG> (Thumb, 1784 bytes, Stack size 72 bytes, wpa_supplicant.o(i.wpa_supplicant_init_iface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = wpa_supplicant_init_iface &rArr; wpa_config_read &rArr; wpa_get_setting_from_profile &rArr; wpa_config_set_wpapsk &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_strdup
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlcpy
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strchr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_init
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_eapol
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_param
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ifname
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_fast_reauth
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_eapol
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_read
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_new_conf
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_alloc_empty
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_driver
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_country
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_get_capa
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_add_iface
</UL>

<P><STRONG><a name="[123]"></a>wpa_supplicant_msg_ifname_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_supplicant.o(i.wpa_supplicant_msg_ifname_cb))
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(i.wpa_supplicant_init)
</UL>
<P><STRONG><a name="[aa8]"></a>wpa_supplicant_set_driver</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, wpa_supplicant.o(i.wpa_supplicant_set_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wpa_supplicant_set_driver &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strncmp
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strchr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_iface
</UL>

<P><STRONG><a name="[acf]"></a>wpa_supplicant_suites_from_ai</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, wpa_supplicant.o(i.wpa_supplicant_suites_from_ai))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wpa_supplicant_suites_from_ai &rArr; wpa_sm_parse_own_wpa_ie &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[113]"></a>wpa_supplicant_timeout</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, wpa_supplicant.o(i.wpa_supplicant_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = wpa_supplicant_timeout &rArr; wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_add
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
</UL>
<BR>[Address Reference Count : 4]<UL><LI> wpa_supplicant.o(i.wpa_supplicant_cancel_auth_timeout)
<LI> wpa_supplicant.o(i.wpa_supplicant_clear_connection)
<LI> wpa_supplicant.o(i.wpa_supplicant_req_auth_timeout)
<LI> wpa_supplicant.o(i.wpas_connection_failed)
</UL>
<P><STRONG><a name="[5d9]"></a>hex2num</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, common.o(i.hex2num))
<BR><BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwaddr_aton
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>

<P><STRONG><a name="[ad4]"></a>wpabuf_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpabuf.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
</UL>

<P><STRONG><a name="[ad3]"></a>wpabuf_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpabuf.o(i.wpabuf_len))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
</UL>

<P><STRONG><a name="[ad6]"></a>wpabuf_mhead_u8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpabuf.o(i.wpabuf_mhead_u8))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>

<P><STRONG><a name="[ad5]"></a>wpabuf_overflow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wpabuf.o(i.wpabuf_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>

<P><STRONG><a name="[ad2]"></a>wpabuf_put_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wpabuf.o(i.wpabuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
</UL>

<P><STRONG><a name="[abd]"></a>ieee80211w_set_keys</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa.o(i.ieee80211w_set_keys))
<BR><BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
</UL>

<P><STRONG><a name="[9fa]"></a>is_zero_ether_addr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wpa.o(i.is_zero_ether_addr))
<BR><BR>[Called By]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>

<P><STRONG><a name="[9ea]"></a>wpa_derive_ptk</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, wpa.o(i.wpa_derive_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = wpa_derive_ptk &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
</UL>
<BR>[Called By]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[9f8]"></a>wpa_eapol_key_dump</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, wpa.o(i.wpa_eapol_key_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wpa_eapol_key_dump &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[a33]"></a>wpa_key_mgmt_ft</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa.o(i.wpa_key_mgmt_ft))
<BR><BR>[Called By]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
</UL>

<P><STRONG><a name="[9eb]"></a>wpa_key_mgmt_sha256</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa.o(i.wpa_key_mgmt_sha256))
<BR><BR>[Called By]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_derive_ptk
</UL>

<P><STRONG><a name="[aa3]"></a>wpa_key_mgmt_wpa_ieee8021x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa.o(i.wpa_key_mgmt_wpa_ieee8021x))
<BR><BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
</UL>

<P><STRONG><a name="[a26]"></a>wpa_report_ie_mismatch</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, wpa.o(i.wpa_report_ie_mismatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wpa_report_ie_mismatch &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
</UL>

<P><STRONG><a name="[a34]"></a>wpa_sm_alloc_eapol</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, wpa.o(i.wpa_sm_alloc_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_sm_alloc_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
</UL>

<P><STRONG><a name="[ab2]"></a>wpa_sm_cancel_auth_timeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wpa.o(i.wpa_sm_cancel_auth_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_sm_cancel_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
</UL>

<P><STRONG><a name="[a39]"></a>wpa_sm_deauthenticate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_deauthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_sm_deauthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_pmksa_free_cb
</UL>

<P><STRONG><a name="[9fc]"></a>wpa_sm_ether_send</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, wpa.o(i.wpa_sm_ether_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_sm_ether_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
</UL>

<P><STRONG><a name="[9fb]"></a>wpa_sm_get_bssid</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_get_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_sm_get_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>

<P><STRONG><a name="[a38]"></a>wpa_sm_get_state</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wpa.o(i.wpa_sm_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_sm_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[ab4]"></a>wpa_sm_mlme_setprotection</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wpa.o(i.wpa_sm_mlme_setprotection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_sm_mlme_setprotection
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
</UL>

<P><STRONG><a name="[112]"></a>wpa_sm_pmksa_free_cb</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wpa.o(i.wpa_sm_pmksa_free_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wpa_sm_pmksa_free_cb &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa.o(i.wpa_sm_init)
</UL>
<P><STRONG><a name="[111]"></a>wpa_sm_rekey_ptk</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_rekey_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = wpa_sm_rekey_ptk &rArr; wpa_sm_key_request &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wpa.o(i.wpa_sm_deinit)
<LI> wpa.o(i.wpa_supplicant_install_ptk)
</UL>
<P><STRONG><a name="[ab0]"></a>wpa_sm_set_key</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, wpa.o(i.wpa_sm_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_sm_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
</UL>

<P><STRONG><a name="[abc]"></a>wpa_sm_set_rekey_offload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_set_rekey_offload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_sm_set_rekey_offload
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[ab3]"></a>wpa_sm_set_state</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_sm_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
</UL>

<P><STRONG><a name="[110]"></a>wpa_sm_start_preauth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_start_preauth))
<BR>[Address Reference Count : 2]<UL><LI> wpa.o(i.wpa_sm_deinit)
<LI> wpa.o(i.wpa_supplicant_key_neg_complete)
</UL>
<P><STRONG><a name="[a5e]"></a>wpa_supplicant_check_group_cipher</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, wpa.o(i.wpa_supplicant_check_group_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wpa_supplicant_check_group_cipher &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher_txt
</UL>
<BR>[Called By]<UL><LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
</UL>

<P><STRONG><a name="[a3c]"></a>wpa_supplicant_decrypt_key_data</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, wpa.o(i.wpa_supplicant_decrypt_key_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = wpa_supplicant_decrypt_key_data &rArr; rc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
</UL>
<BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[aa2]"></a>wpa_supplicant_get_pmk</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, wpa.o(i.wpa_supplicant_get_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wpa_supplicant_get_pmk &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk_from_pmksa
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_ether_send
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_ieee8021x
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_ft
</UL>
<BR>[Called By]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[aa4]"></a>wpa_supplicant_gtk_tx_bit_workaround</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wpa.o(i.wpa_supplicant_gtk_tx_bit_workaround))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpa_supplicant_gtk_tx_bit_workaround &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
</UL>

<P><STRONG><a name="[aaf]"></a>wpa_supplicant_install_gtk</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, wpa.o(i.wpa_supplicant_install_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wpa_supplicant_install_gtk &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
</UL>

<P><STRONG><a name="[ab1]"></a>wpa_supplicant_install_ptk</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, wpa.o(i.wpa_supplicant_install_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wpa_supplicant_install_ptk &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[a36]"></a>wpa_supplicant_key_neg_complete</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, wpa.o(i.wpa_supplicant_key_neg_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wpa_supplicant_key_neg_complete &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher_txt
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_state
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_mlme_setprotection
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_connect
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
</UL>

<P><STRONG><a name="[ab6]"></a>wpa_supplicant_pairwise_gtk</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, wpa.o(i.wpa_supplicant_pairwise_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[a3f]"></a>wpa_supplicant_process_1_of_2</STRONG> (Thumb, 340 bytes, Stack size 120 bytes, wpa.o(i.wpa_supplicant_process_1_of_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = wpa_supplicant_process_1_of_2 &rArr; wpa_supplicant_send_2_of_2 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher_txt
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_state
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_rekey_offload
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_get_state
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[ab9]"></a>wpa_supplicant_process_1_of_2_rsn</STRONG> (Thumb, 262 bytes, Stack size 128 bytes, wpa.o(i.wpa_supplicant_process_1_of_2_rsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wpa_supplicant_process_1_of_2_rsn &rArr; wpa_supplicant_check_group_cipher &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211w_set_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[aba]"></a>wpa_supplicant_process_1_of_2_wpa</STRONG> (Thumb, 392 bytes, Stack size 80 bytes, wpa.o(i.wpa_supplicant_process_1_of_2_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = wpa_supplicant_process_1_of_2_wpa &rArr; rc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[a3e]"></a>wpa_supplicant_process_1_of_4</STRONG> (Thumb, 430 bytes, Stack size 160 bytes, wpa.o(i.wpa_supplicant_process_1_of_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = wpa_supplicant_process_1_of_4 &rArr; wpa_derive_ptk &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_state
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_derive_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[a3d]"></a>wpa_supplicant_process_3_of_4</STRONG> (Thumb, 610 bytes, Stack size 152 bytes, wpa.o(i.wpa_supplicant_process_3_of_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_send_4_of_4 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_state
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_rekey_offload
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_mlme_setprotection
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211w_set_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[abb]"></a>wpa_supplicant_send_2_of_2</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, wpa.o(i.wpa_supplicant_send_2_of_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wpa_supplicant_send_2_of_2 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[abf]"></a>wpa_supplicant_validate_ie</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, wpa.o(i.wpa_supplicant_validate_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wpa_supplicant_validate_ie &rArr; wpa_report_ie_mismatch &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_report_ie_mismatch
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_ft
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[a3b]"></a>wpa_supplicant_verify_eapol_key_mic</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, wpa.o(i.wpa_supplicant_verify_eapol_key_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = wpa_supplicant_verify_eapol_key_mic &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
</UL>
<BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[a00]"></a>wpa_gen_wpa_ie_rsn</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, wpa_ie.o(i.wpa_gen_wpa_ie_rsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wpa_gen_wpa_ie_rsn &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
</UL>

<P><STRONG><a name="[a01]"></a>wpa_gen_wpa_ie_wpa</STRONG> (Thumb, 422 bytes, Stack size 20 bytes, wpa_ie.o(i.wpa_gen_wpa_ie_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_gen_wpa_ie_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
</UL>

<P><STRONG><a name="[a19]"></a>wpa_parse_generic</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, wpa_ie.o(i.wpa_parse_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_parse_generic &rArr; wpa_hexdump_key &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
</UL>

<P><STRONG><a name="[650]"></a>ieee802_11_parse_vendor_specific</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, ieee802_11_common.o(i.ieee802_11_parse_vendor_specific))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee802_11_parse_vendor_specific
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
</UL>

<P><STRONG><a name="[5f8]"></a>hostapd_config_free_bss</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, ap_config.o(i.hostapd_config_free_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hostapd_config_free_bss &rArr; hostapd_config_free_wep &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_wep
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_vlan
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_radius
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_eap_user
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free
</UL>

<P><STRONG><a name="[5fa]"></a>hostapd_config_free_eap_user</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ap_config.o(i.hostapd_config_free_eap_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hostapd_config_free_eap_user &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_bss
</UL>

<P><STRONG><a name="[5fb]"></a>hostapd_config_free_radius</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ap_config.o(i.hostapd_config_free_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hostapd_config_free_radius &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_bss
</UL>

<P><STRONG><a name="[5fc]"></a>hostapd_config_free_vlan</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ap_config.o(i.hostapd_config_free_vlan))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hostapd_config_free_vlan &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_bss
</UL>

<P><STRONG><a name="[5f9]"></a>hostapd_config_free_wep</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ap_config.o(i.hostapd_config_free_wep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hostapd_config_free_wep &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free_bss
</UL>

<P><STRONG><a name="[5fd]"></a>hostapd_config_read_wpa_psk</STRONG> (Thumb, 482 bytes, Stack size 184 bytes, ap_config.o(i.hostapd_config_read_wpa_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = hostapd_config_read_wpa_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1 (via Veneer)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwaddr_aton
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
</UL>

<P><STRONG><a name="[604]"></a>hostapd_derive_psk</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ap_config.o(i.hostapd_derive_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = hostapd_derive_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_ascii_key
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_ascii
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
</UL>

<P><STRONG><a name="[5ef]"></a>wpabuf_put_buf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ap_drv_ops.o(i.wpabuf_put_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wpabuf_put_buf &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>

<P><STRONG><a name="[5e9]"></a>wpabuf_put_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ap_drv_ops.o(i.wpabuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_build_ap_extra_ies
</UL>

<P><STRONG><a name="[5e1]"></a>hostapd_broadcast_key_clear_iface</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, hostapd.o(i.hostapd_broadcast_key_clear_iface))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hostapd_broadcast_key_clear_iface &rArr; hostapd_drv_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_broadcast_wep_clear
</UL>

<P><STRONG><a name="[5e3]"></a>hostapd_broadcast_wep_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hostapd.o(i.hostapd_broadcast_wep_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hostapd_broadcast_wep_clear &rArr; hostapd_broadcast_key_clear_iface &rArr; hostapd_drv_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_broadcast_key_clear_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[5e4]"></a>hostapd_broadcast_wep_set</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, hostapd.o(i.hostapd_broadcast_wep_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hostapd_broadcast_wep_set &rArr; hostapd_drv_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_vlan_id_ifname
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_encryption
</UL>

<P><STRONG><a name="[5f0]"></a>hostapd_cleanup</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, hostapd.o(i.hostapd_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hostapd_cleanup &rArr; hostapd_deinit_wpa &rArr; wpa_deinit &rArr; pmksa_cache_auth_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_acl_deinit
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authsrv_deinit
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_if_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
</UL>

<P><STRONG><a name="[5f4]"></a>hostapd_cleanup_iface</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hostapd.o(i.hostapd_cleanup_iface))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hostapd_cleanup_iface &rArr; hostapd_config_free &rArr; hostapd_config_free_bss &rArr; hostapd_config_free_wep &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_free
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
</UL>

<P><STRONG><a name="[610]"></a>hostapd_cleanup_iface_pre</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hostapd.o(i.hostapd_cleanup_iface_pre))
<BR><BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
</UL>

<P><STRONG><a name="[609]"></a>hostapd_flush_old_stations</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, hostapd.o(i.hostapd_flush_old_stations))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_none
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[623]"></a>hostapd_setup_bss</STRONG> (Thumb, 908 bytes, Stack size 96 bytes, hostapd.o(i.hostapd_setup_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init_keys
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_init
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_acl_init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authsrv_init
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_in_conf
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_encryption
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_broadcast_wep_clear
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_ssid
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_privacy
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_if_add
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_ssid
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_none
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mac_comp_empty
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mac_comp
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
</UL>

<P><STRONG><a name="[626]"></a>hostapd_setup_encryption</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, hostapd.o(i.hostapd_setup_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hostapd_setup_encryption &rArr; hostapd_broadcast_wep_set &rArr; hostapd_drv_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_broadcast_wep_set
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_privacy
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[636]"></a>hostapd_tx_queue_params</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, hostapd.o(i.hostapd_tx_queue_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hostapd_tx_queue_params &rArr; hostapd_set_tx_queue_params
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_tx_queue_params
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
</UL>

<P><STRONG><a name="[63d]"></a>hostapd_validate_bssid_configuration</STRONG> (Thumb, 488 bytes, Stack size 72 bytes, hostapd.o(i.hostapd_validate_bssid_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hostapd_validate_bssid_configuration &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_none
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mac_comp_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface
</UL>

<P><STRONG><a name="[624]"></a>mac_in_conf</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hostapd.o(i.mac_in_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mac_in_conf &rArr; hostapd_mac_comp &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mac_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[631]"></a>setup_interface</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, hostapd.o(i.setup_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface_complete
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_validate_bssid_configuration
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_country
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[a6]"></a>_ieee802_1x_abort_auth</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ieee802_1x.o(i._ieee802_1x_abort_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = _ieee802_1x_abort_auth &rArr; ieee802_1x_abort_auth &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_abort_auth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[a1]"></a>_ieee802_1x_finished</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ieee802_1x.o(i._ieee802_1x_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = _ieee802_1x_finished &rArr; ieee802_1x_finished &rArr; wpa_auth_pmksa_add &rArr; pmksa_cache_auth_add &rArr; rsn_pmkid &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_finished
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[a7]"></a>_ieee802_1x_tx_key</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ieee802_1x.o(i._ieee802_1x_tx_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = _ieee802_1x_tx_key &rArr; ieee802_1x_tx_key &rArr; ieee802_1x_tx_key_one &rArr; hmac_md5 &rArr; hmac_md5_vector &rArr; md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[5d4]"></a>handle_eap</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ieee802_1x.o(i.handle_eap))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = handle_eap &rArr; handle_eap_response &rArr; wpabuf_alloc_copy &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_eap_response
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
</UL>

<P><STRONG><a name="[5d5]"></a>handle_eap_response</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, ieee802_1x.o(i.handle_eap_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = handle_eap_response &rArr; wpabuf_alloc_copy &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_get_name
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_eap
</UL>

<P><STRONG><a name="[a0]"></a>ieee802_1x_aaa_send</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ieee802_1x.o(i.ieee802_1x_aaa_send))
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[651]"></a>ieee802_1x_alloc_eapol_sm</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ieee802_1x.o(i.ieee802_1x_alloc_eapol_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ieee802_1x_alloc_eapol_sm &rArr; eapol_auth_alloc &rArr; eapol_auth_initialize &rArr; eapol_sm_step_run &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_get_pmksa
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
</UL>

<P><STRONG><a name="[a8]"></a>ieee802_1x_eapol_event</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ieee802_1x.o(i.ieee802_1x_eapol_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ieee802_1x_eapol_event &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[9f]"></a>ieee802_1x_eapol_send</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ieee802_1x.o(i.ieee802_1x_eapol_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ieee802_1x_eapol_send &rArr; ieee802_1x_send &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[396]"></a>ieee802_1x_finished</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ieee802_1x.o(i.ieee802_1x_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ieee802_1x_finished &rArr; wpa_auth_pmksa_add &rArr; pmksa_cache_auth_add &rArr; rsn_pmkid &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sleep
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_pmksa_add
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ieee802_1x_finished
</UL>

<P><STRONG><a name="[a2]"></a>ieee802_1x_get_eap_user</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ieee802_1x.o(i.ieee802_1x_get_eap_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ieee802_1x_get_eap_user &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_eap_user
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[a4]"></a>ieee802_1x_logger</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ieee802_1x.o(i.ieee802_1x_logger))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ieee802_1x_logger &rArr; hostapd_logger &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[9e]"></a>ieee802_1x_rekey</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, ieee802_1x.o(i.ieee802_1x_rekey))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ieee802_1x_rekey &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey_broadcast
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_for_each_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ieee802_1x.o(i.ieee802_1x_deinit)
<LI> ieee802_1x.o(i.ieee802_1x_rekey)
</UL>
<P><STRONG><a name="[65f]"></a>ieee802_1x_rekey_broadcast</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ieee802_1x.o(i.ieee802_1x_rekey_broadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ieee802_1x_rekey_broadcast &rArr; wpa_hexdump_key &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_rekey
</UL>

<P><STRONG><a name="[654]"></a>ieee802_1x_send</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, ieee802_1x.o(i.ieee802_1x_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ieee802_1x_send &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_pairwise_set
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key_one
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_eapol_send
</UL>

<P><STRONG><a name="[a5]"></a>ieee802_1x_set_port_authorized</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ieee802_1x.o(i.ieee802_1x_set_port_authorized))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ieee802_1x_set_port_authorized &rArr; ieee802_1x_set_sta_authorized &rArr; ap_sta_set_authorized &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[a3]"></a>ieee802_1x_sta_entry_alive</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ieee802_1x.o(i.ieee802_1x_sta_entry_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ieee802_1x_sta_entry_alive &rArr; ap_get_sta &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_init)
</UL>
<P><STRONG><a name="[a9]"></a>ieee802_1x_sta_key_available</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ieee802_1x.o(i.ieee802_1x_sta_key_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ieee802_1x_sta_key_available &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802_1x.o(i.ieee802_1x_rekey)
</UL>
<P><STRONG><a name="[663]"></a>ieee802_1x_tx_key_one</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, ieee802_1x.o(i.ieee802_1x_tx_key_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ieee802_1x_tx_key_one &rArr; hmac_md5 &rArr; hmac_md5_vector &rArr; md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_send
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_tx_key
</UL>

<P><STRONG><a name="[658]"></a>wpa_key_mgmt_wpa_psk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ieee802_1x.o(i.wpa_key_mgmt_wpa_psk))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_new_station
</UL>

<P><STRONG><a name="[6a]"></a>ap_handle_session_timer</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, sta_info.o(i.ap_handle_session_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ap_handle_session_timer &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sta_info.o(i.ap_free_sta)
</UL>
<P><STRONG><a name="[6b]"></a>ap_sta_deauth_cb_timeout</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, sta_info.o(i.ap_sta_deauth_cb_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ap_sta_deauth_cb_timeout &rArr; ap_sta_remove &rArr; ieee802_1x_notify_port_enabled &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sta_info.o(i.ap_free_sta)
</UL>
<P><STRONG><a name="[6c]"></a>ap_sta_disassoc_cb_timeout</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, sta_info.o(i.ap_sta_disassoc_cb_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ap_sta_disassoc_cb_timeout &rArr; ap_sta_remove &rArr; ieee802_1x_notify_port_enabled &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sta_info.o(i.ap_free_sta)
<LI> sta_info.o(i.ap_sta_disassociate)
</UL>
<P><STRONG><a name="[408]"></a>ap_sta_hash_del</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sta_info.o(i.ap_sta_hash_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ap_sta_hash_del &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[409]"></a>ap_sta_list_del</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sta_info.o(i.ap_sta_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[41b]"></a>ap_sta_remove</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sta_info.o(i.ap_sta_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ap_sta_remove &rArr; ieee802_1x_notify_port_enabled &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_notify_port_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassoc_cb_timeout
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_deauth_cb_timeout
</UL>

<P><STRONG><a name="[419]"></a>ap_sta_remove_in_other_bss</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, sta_info.o(i.ap_sta_remove_in_other_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = ap_sta_remove_in_other_bss &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
</UL>

<P><STRONG><a name="[407]"></a>hostapd_drv_sta_remove</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sta_info.o(i.hostapd_drv_sta_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_drv_sta_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
</UL>

<P><STRONG><a name="[8e]"></a>prune_associations</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, utils.o(i.prune_associations))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = prune_associations &rArr; ap_sta_disassociate &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassociate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(i.hostapd_prune_associations)
</UL>
<P><STRONG><a name="[222]"></a>pbkdf2_sha1_f</STRONG> (Thumb, 176 bytes, Stack size 112 bytes, sha1-pbkdf2.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
</UL>

<P><STRONG><a name="[3d8]"></a>_wpa_supplicant_event_scan_results</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, events.o(i._wpa_supplicant_event_scan_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_get_scan_channel_number
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg_ctrl
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_driver_bss_selection
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_scan_done
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_results_free
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_sched_scan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_scan_results
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_scan_results
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rsn_preauth_scan_results
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_new_scan
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pick_new_network
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pick_network
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_need_to_roam
</UL>
<BR>[Called By]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[a9d]"></a>disconnect_reason_recoverable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, events.o(i.disconnect_reason_recoverable))
<BR><BR>[Called By]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
</UL>

<P><STRONG><a name="[a2e]"></a>freq_allowed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, events.o(i.freq_allowed))
<BR><BR>[Called By]<UL><LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[87a]"></a>ht_supported</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, events.o(i.ht_supported))
<BR><BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_match
</UL>

<P><STRONG><a name="[a9b]"></a>is_zero_ether_addr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, events.o(i.is_zero_ether_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[879]"></a>rate_match</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, events.o(i.rate_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rate_match &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_supported
</UL>
<BR>[Called By]<UL><LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[9b5]"></a>wnm_action_rx</STRONG> (Thumb, 170 bytes, Stack size 288 bytes, events.o(i.wnm_action_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wnm_action_rx &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a8c]"></a>wpa_drv_get_capa</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, events.o(i.wpa_drv_get_capa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_drv_get_capa
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[a9e]"></a>wpa_drv_set_countermeasures</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, events.o(i.wpa_drv_set_countermeasures))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_drv_set_countermeasures
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_stop_countermeasures
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_michael_mic_failure
</UL>

<P><STRONG><a name="[9fd]"></a>wpa_find_assoc_pmkid</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, events.o(i.wpa_find_assoc_pmkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wpa_find_assoc_pmkid &rArr; wpa_sm_parse_own_wpa_ie &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
</UL>

<P><STRONG><a name="[a15]"></a>wpa_key_mgmt_wpa</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, events.o(i.wpa_key_mgmt_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_key_mgmt_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_ieee8021x
</UL>
<BR>[Called By]<UL><LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_match_privacy
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_any
</UL>

<P><STRONG><a name="[a18]"></a>wpa_key_mgmt_wpa_any</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, events.o(i.wpa_key_mgmt_wpa_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_key_mgmt_wpa_any &rArr; wpa_key_mgmt_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_update_ie
</UL>

<P><STRONG><a name="[a16]"></a>wpa_key_mgmt_wpa_ieee8021x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, events.o(i.wpa_key_mgmt_wpa_ieee8021x))
<BR><BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
</UL>

<P><STRONG><a name="[a17]"></a>wpa_key_mgmt_wpa_psk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, events.o(i.wpa_key_mgmt_wpa_psk))
<BR><BR>[Called By]<UL><LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
</UL>

<P><STRONG><a name="[a29]"></a>wpa_scan_res_match</STRONG> (Thumb, 910 bytes, Stack size 120 bytes, events.o(i.wpa_scan_res_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = wpa_scan_res_match &rArr; wpa_supplicant_ssid_bss_match &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_security_valid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_encr
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_auth
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_get
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_enabled_networks
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_match_privacy
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_match
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[a4d]"></a>wpa_supplicant_assoc_update_ie</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, events.o(i.wpa_supplicant_assoc_update_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wpa_supplicant_assoc_update_ie &rArr; wpa_sm_set_ap_wpa_ie &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_any
</UL>
<BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[a97]"></a>wpa_supplicant_dynamic_keys</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, events.o(i.wpa_supplicant_dynamic_keys))
<BR><BR>[Called By]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[a86]"></a>wpa_supplicant_event_assoc</STRONG> (Thumb, 976 bytes, Stack size 104 bytes, events.o(i.wpa_supplicant_event_assoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = wpa_supplicant_event_assoc &rArr; hostapd_notif_assoc &rArr; ap_sta_add &rArr; ap_sta_remove_in_other_bss &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_bssid_changed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_set_wep_keys
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_scan_results
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_assoc
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_notify_auth_start
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scard_init
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_new_bss
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_dynamic_keys
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_assoc_update_ie
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_ieee8021x
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_get_capa
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a89]"></a>wpa_supplicant_event_associnfo</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, events.o(i.wpa_supplicant_event_associnfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wpa_supplicant_event_associnfo &rArr; wpa_supplicant_update_scan_results &rArr; wpa_supplicant_get_scan_results &rArr;  wpa_driver_inband_handle_wow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_scan_results
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_find_assoc_pmkid
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[a87]"></a>wpa_supplicant_event_disassoc</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, events.o(i.wpa_supplicant_event_disassoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = wpa_supplicant_event_disassoc &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_sched_scan
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_connection_failed
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_dynamic_keys
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_reason_recoverable
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a8a]"></a>wpa_supplicant_event_interface_status</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, events.o(i.wpa_supplicant_event_interface_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = wpa_supplicant_event_interface_status &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_deinit
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_driver_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a85]"></a>wpa_supplicant_event_michael_mic_failure</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, events.o(i.wpa_supplicant_event_michael_mic_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = wpa_supplicant_event_michael_mic_failure &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sleep
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_add
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_countermeasures
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a8b]"></a>wpa_supplicant_event_pmkid_candidate</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, events.o(i.wpa_supplicant_event_pmkid_candidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wpa_supplicant_event_pmkid_candidate &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a88]"></a>wpa_supplicant_event_scan_results</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, events.o(i.wpa_supplicant_event_scan_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = wpa_supplicant_event_scan_results &rArr; _wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_create_ap &rArr; hostapd_setup_interface &rArr; setup_interface &rArr; hostapd_setup_interface_complete &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a94]"></a>wpa_supplicant_event_unprot_deauth</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(i.wpa_supplicant_event_unprot_deauth))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a95]"></a>wpa_supplicant_event_unprot_disassoc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(i.wpa_supplicant_event_unprot_disassoc))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event
</UL>

<P><STRONG><a name="[a99]"></a>wpa_supplicant_get_new_bss</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, events.o(i.wpa_supplicant_get_new_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_supplicant_get_new_bss &rArr; wpa_bss_get &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[a2d]"></a>wpa_supplicant_match_privacy</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, events.o(i.wpa_supplicant_match_privacy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_supplicant_match_privacy &rArr; wpa_key_mgmt_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[3e3]"></a>wpa_supplicant_need_to_roam</STRONG> (Thumb, 492 bytes, Stack size 64 bytes, events.o(i.wpa_supplicant_need_to_roam))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wpa_supplicant_need_to_roam &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_driver_bss_selection
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[3e2]"></a>wpa_supplicant_pick_network</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, events.o(i.wpa_supplicant_pick_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wpa_supplicant_pick_network &rArr; wpa_supplicant_select_bss &rArr; wpa_scan_res_match &rArr; wpa_supplicant_ssid_bss_match &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_blacklist_clear
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[3e6]"></a>wpa_supplicant_pick_new_network</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, events.o(i.wpa_supplicant_pick_new_network))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[3db]"></a>wpa_supplicant_req_new_scan</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, events.o(i.wpa_supplicant_req_new_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wpa_supplicant_req_new_scan &rArr; wpa_supplicant_set_state &rArr; wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_enabled_networks
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[3e4]"></a>wpa_supplicant_rsn_preauth_scan_results</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, events.o(i.wpa_supplicant_rsn_preauth_scan_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wpa_supplicant_rsn_preauth_scan_results &rArr; wpa_bss_get_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[ab8]"></a>wpa_supplicant_select_bss</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, events.o(i.wpa_supplicant_select_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wpa_supplicant_select_bss &rArr; wpa_scan_res_match &rArr; wpa_supplicant_ssid_bss_match &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pick_network
</UL>

<P><STRONG><a name="[a98]"></a>wpa_supplicant_select_config</STRONG> (Thumb, 262 bytes, Stack size 104 bytes, events.o(i.wpa_supplicant_select_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = wpa_supplicant_select_config &rArr; wpa_supplicant_set_suites &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rsn_supp_set_config
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_network_changed
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_initiate_eapol
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_ssid
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_any
</UL>
<BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[a2c]"></a>wpa_supplicant_ssid_bss_match</STRONG> (Thumb, 752 bytes, Stack size 72 bytes, events.o(i.wpa_supplicant_ssid_bss_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wpa_supplicant_ssid_bss_match &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[9e9]"></a>wpa_convert_user_wep_key</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, config_nvram.o(i.wpa_convert_user_wep_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wpa_convert_user_wep_key &rArr; AtoH
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtoH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_user_wep_key
</UL>

<P><STRONG><a name="[a03]"></a>wpa_get_user_ssid</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, config_nvram.o(i.wpa_get_user_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_get_user_ssid &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
</UL>

<P><STRONG><a name="[a04]"></a>wpa_get_user_wep_key</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, config_nvram.o(i.wpa_get_user_wep_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = wpa_get_user_wep_key &rArr; wpa_convert_user_wep_key &rArr; AtoH
</UL>
<BR>[Calls]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_convert_user_wep_key
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
</UL>

<P><STRONG><a name="[a06]"></a>wpa_get_user_wpa_psk_key</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, config_nvram.o(i.wpa_get_user_wpa_psk_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_get_user_wpa_psk_key &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
</UL>

<P><STRONG><a name="[a05]"></a>wpa_store_wep_key</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, config_nvram.o(i.wpa_store_wep_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_store_wep_key &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_setting_from_profile
</UL>

<P><STRONG><a name="[ad7]"></a>wpas_notify_ap_sta_authorized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_ap_sta_authorized))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_sta_authorized
</UL>

<P><STRONG><a name="[ad8]"></a>wpas_notify_ap_sta_deauthorized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, notify.o(i.wpas_notify_ap_sta_deauthorized))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_notify_sta_authorized
</UL>

<P><STRONG><a name="[12d]"></a>_wpa_alloc_eapol</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, wpas_glue.o(i._wpa_alloc_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _wpa_alloc_eapol &rArr; wpa_alloc_eapol &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_alloc_eapol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[12b]"></a>_wpa_ether_send</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wpas_glue.o(i._wpa_ether_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _wpa_ether_send &rArr; wpa_ether_send &rArr; l2_packet_send &rArr; ethernet_raw_pkt_sender &rArr; low_level_output_scatter &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ether_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[12e]"></a>_wpa_supplicant_cancel_auth_timeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wpas_glue.o(i._wpa_supplicant_cancel_auth_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _wpa_supplicant_cancel_auth_timeout &rArr; wpa_supplicant_cancel_auth_timeout &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[126]"></a>_wpa_supplicant_deauthenticate</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wpas_glue.o(i._wpa_supplicant_deauthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = _wpa_supplicant_deauthenticate &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[127]"></a>_wpa_supplicant_disassociate</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wpas_glue.o(i._wpa_supplicant_disassociate))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = _wpa_supplicant_disassociate &rArr; wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_ap_deinit &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; ieee802_11_set_beacons &rArr; ieee802_11_set_beacon &rArr; hostapd_build_ap_extra_ies &rArr; hostapd_eid_time_adv &rArr; hostapd_update_time_adv &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[125]"></a>_wpa_supplicant_get_state</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wpas_glue.o(i._wpa_supplicant_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _wpa_supplicant_get_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[124]"></a>_wpa_supplicant_set_state</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wpas_glue.o(i._wpa_supplicant_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _wpa_supplicant_set_state &rArr; wpa_supplicant_set_state &rArr; wpa_supplicant_req_scan &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[3cf]"></a>wpa_alloc_eapol</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, wpas_glue.o(i.wpa_alloc_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_alloc_eapol &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_alloc_eapol
</UL>

<P><STRONG><a name="[acb]"></a>wpa_drv_set_key</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, wpas_glue.o(i.wpa_drv_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_key
</UL>

<P><STRONG><a name="[3d0]"></a>wpa_ether_send</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, wpas_glue.o(i.wpa_ether_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wpa_ether_send &rArr; l2_packet_send &rArr; ethernet_raw_pkt_sender &rArr; low_level_output_scatter &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_ether_send
</UL>

<P><STRONG><a name="[a02]"></a>wpa_get_beacon_ie</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, wpas_glue.o(i.wpa_get_beacon_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wpa_get_beacon_ie &rArr; wpa_sm_set_ap_wpa_ie &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_beacon_ie
</UL>

<P><STRONG><a name="[12f]"></a>wpa_supplicant_add_pmkid</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wpas_glue.o(i.wpa_supplicant_add_pmkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_supplicant_add_pmkid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[12c]"></a>wpa_supplicant_get_beacon_ie</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpas_glue.o(i.wpa_supplicant_get_beacon_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wpa_supplicant_get_beacon_ie &rArr; wpa_supplicant_update_scan_results &rArr; wpa_supplicant_get_scan_results &rArr;  wpa_driver_inband_handle_wow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_scan_results
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_beacon_ie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[12a]"></a>wpa_supplicant_get_bssid</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wpas_glue.o(i.wpa_supplicant_get_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_supplicant_get_bssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[132]"></a>wpa_supplicant_get_config_blob</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wpas_glue.o(i.wpa_supplicant_get_config_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wpa_supplicant_get_config_blob &rArr; wpa_config_get_blob &rArr; os_strcmp &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_get_blob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[129]"></a>wpa_supplicant_get_network_ctx</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wpas_glue.o(i.wpa_supplicant_get_network_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wpa_supplicant_get_network_ctx &rArr; wpa_supplicant_get_ssid &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_ssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[3ea]"></a>wpa_supplicant_get_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wpas_glue.o(i.wpa_supplicant_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_supplicant_get_state
</UL>

<P><STRONG><a name="[133]"></a>wpa_supplicant_mlme_setprotection</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, wpas_glue.o(i.wpa_supplicant_mlme_setprotection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_supplicant_mlme_setprotection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[130]"></a>wpa_supplicant_remove_pmkid</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wpas_glue.o(i.wpa_supplicant_remove_pmkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_supplicant_remove_pmkid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[131]"></a>wpa_supplicant_set_config_blob</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wpas_glue.o(i.wpa_supplicant_set_config_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wpa_supplicant_set_config_blob &rArr; wpa_config_set_blob &rArr; wpa_config_remove_blob &rArr; wpa_config_free_blob &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_write
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_blob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[128]"></a>wpa_supplicant_set_key</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, wpas_glue.o(i.wpa_supplicant_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wpa_supplicant_set_key &rArr; wpa_drv_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[134]"></a>wpa_supplicant_set_rekey_offload</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpas_glue.o(i.wpa_supplicant_set_rekey_offload))
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(i.wpa_supplicant_init_wpa)
</UL>
<P><STRONG><a name="[1b7]"></a>none_driver_deinit</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, driver_none.o(i.none_driver_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = none_driver_deinit &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_none.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>none_driver_hapd_deinit</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, driver_none.o(i.none_driver_hapd_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = none_driver_hapd_deinit &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_none.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>none_driver_hapd_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, driver_none.o(i.none_driver_hapd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = none_driver_hapd_init &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_none.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>none_driver_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, driver_none.o(i.none_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = none_driver_init &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_none.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>none_driver_send_eapol</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, driver_none.o(i.none_driver_send_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = none_driver_send_eapol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_none.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>none_driver_send_ether</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, driver_none.o(i.none_driver_send_ether))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = none_driver_send_ether
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_none.o(.constdata)
</UL>
<P><STRONG><a name="[a1f]"></a>rsn_key_mgmt_to_bitfield</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, wpa_common.o(i.rsn_key_mgmt_to_bitfield))
<BR><BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>

<P><STRONG><a name="[a1e]"></a>rsn_selector_to_bitfield</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, wpa_common.o(i.rsn_selector_to_bitfield))
<BR><BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>

<P><STRONG><a name="[a21]"></a>wpa_key_mgmt_to_bitfield</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, wpa_common.o(i.wpa_key_mgmt_to_bitfield))
<BR><BR>[Called By]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
</UL>

<P><STRONG><a name="[a20]"></a>wpa_selector_to_bitfield</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, wpa_common.o(i.wpa_selector_to_bitfield))
<BR><BR>[Called By]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
</UL>

<P><STRONG><a name="[5df]"></a>hostapd_acl_query_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ieee802_11_auth.o(i.hostapd_acl_query_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hostapd_acl_query_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_acl_deinit
</UL>

<P><STRONG><a name="[3c3]"></a>_pmksa_cache_free_entry</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pmksa_cache_auth.o(i._pmksa_cache_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _pmksa_cache_free_entry &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_deinit
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_free_entry
</UL>

<P><STRONG><a name="[f3]"></a>pmksa_cache_expire</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, pmksa_cache_auth.o(i.pmksa_cache_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pmksa_cache_expire &rArr; pmksa_cache_set_expiration &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_set_expiration
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_free_entry
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pmksa_cache_auth.o(i.pmksa_cache_set_expiration)
<LI> pmksa_cache_auth.o(i.pmksa_cache_auth_deinit)
</UL>
<P><STRONG><a name="[844]"></a>pmksa_cache_free_entry</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, pmksa_cache_auth.o(i.pmksa_cache_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pmksa_cache_free_entry &rArr; _pmksa_cache_free_entry &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pmksa_cache_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_expire
</UL>

<P><STRONG><a name="[842]"></a>pmksa_cache_from_eapol_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pmksa_cache_auth.o(i.pmksa_cache_from_eapol_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pmksa_cache_from_eapol_data &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add
</UL>

<P><STRONG><a name="[83e]"></a>pmksa_cache_link_entry</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pmksa_cache_auth.o(i.pmksa_cache_link_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pmksa_cache_link_entry &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_add_okc
</UL>

<P><STRONG><a name="[847]"></a>pmksa_cache_set_expiration</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pmksa_cache_auth.o(i.pmksa_cache_set_expiration))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = pmksa_cache_set_expiration &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_expire
</UL>

<P><STRONG><a name="[840]"></a>wpa_key_mgmt_sha256</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pmksa_cache_auth.o(i.wpa_key_mgmt_sha256))
<BR><BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_get_okc
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_auth_add
</UL>

<P><STRONG><a name="[8cd]"></a>ieee80211w_kde_add</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_auth.o(i.ieee80211w_kde_add))
<BR><BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[8cb]"></a>ieee80211w_kde_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_auth.o(i.ieee80211w_kde_len))
<BR><BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[8c2]"></a>sm_WPA_PTK_AUTHENTICATION2_Enter</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, wpa_auth.o(i.sm_WPA_PTK_AUTHENTICATION2_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = sm_WPA_PTK_AUTHENTICATION2_Enter &rArr; wpa_group_ensure_init &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_ensure_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8c4]"></a>sm_WPA_PTK_AUTHENTICATION_Enter</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wpa_auth.o(i.sm_WPA_PTK_AUTHENTICATION_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_WPA_PTK_AUTHENTICATION_Enter &rArr; wpa_auth_set_eapol
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8e1]"></a>sm_WPA_PTK_DISCONNECTED_Enter</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wpa_auth.o(i.sm_WPA_PTK_DISCONNECTED_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8c5]"></a>sm_WPA_PTK_DISCONNECT_Enter</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wpa_auth.o(i.sm_WPA_PTK_DISCONNECT_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sm_WPA_PTK_DISCONNECT_Enter &rArr; wpa_sta_disconnect &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8d0]"></a>sm_WPA_PTK_GROUP_IDLE_Enter</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wpa_auth.o(i.sm_WPA_PTK_GROUP_IDLE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
</UL>

<P><STRONG><a name="[8d1]"></a>sm_WPA_PTK_GROUP_KEYERROR_Enter</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, wpa_auth.o(i.sm_WPA_PTK_GROUP_KEYERROR_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
</UL>

<P><STRONG><a name="[8c7]"></a>sm_WPA_PTK_GROUP_REKEYESTABLISHED_Enter</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wpa_auth.o(i.sm_WPA_PTK_GROUP_REKEYESTABLISHED_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sm_WPA_PTK_GROUP_REKEYESTABLISHED_Enter &rArr; wpa_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
</UL>

<P><STRONG><a name="[8c9]"></a>sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, wpa_auth.o(i.sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_seqnum
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211w_kde_len
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211w_kde_add
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
</UL>

<P><STRONG><a name="[8cf]"></a>sm_WPA_PTK_GROUP_Step</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, wpa_auth.o(i.sm_WPA_PTK_GROUP_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = sm_WPA_PTK_GROUP_Step &rArr; sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYESTABLISHED_Enter
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_KEYERROR_Enter
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_IDLE_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[8d2]"></a>sm_WPA_PTK_INITIALIZE_Enter</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, wpa_auth.o(i.sm_WPA_PTK_INITIALIZE_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sm_WPA_PTK_INITIALIZE_Enter &rArr; wpa_remove_ptk &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8d4]"></a>sm_WPA_PTK_INITPMK_Enter</STRONG> (Thumb, 214 bytes, Stack size 96 bytes, wpa_auth.o(i.sm_WPA_PTK_INITPMK_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sm_WPA_PTK_INITPMK_Enter &rArr; wpa_auth_set_eapol
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8d5]"></a>sm_WPA_PTK_INITPSK_Enter</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wpa_auth.o(i.sm_WPA_PTK_INITPSK_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sm_WPA_PTK_INITPSK_Enter &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_psk
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8e4]"></a>sm_WPA_PTK_PTKCALCNEGOTIATING2_Enter</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wpa_auth.o(i.sm_WPA_PTK_PTKCALCNEGOTIATING2_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8d7]"></a>sm_WPA_PTK_PTKCALCNEGOTIATING_Enter</STRONG> (Thumb, 236 bytes, Stack size 88 bytes, wpa_auth.o(i.sm_WPA_PTK_PTKCALCNEGOTIATING_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = sm_WPA_PTK_PTKCALCNEGOTIATING_Enter &rArr; wpa_derive_ptk &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_derive_ptk
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_psk
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8da]"></a>sm_WPA_PTK_PTKINITDONE_Enter</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, wpa_auth.o(i.sm_WPA_PTK_PTKINITDONE_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sm_WPA_PTK_PTKINITDONE_Enter &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8dc]"></a>sm_WPA_PTK_PTKINITNEGOTIATING_Enter</STRONG> (Thumb, 420 bytes, Stack size 96 bytes, wpa_auth.o(i.sm_WPA_PTK_PTKINITNEGOTIATING_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_seqnum
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211w_kde_len
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211w_kde_add
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8dd]"></a>sm_WPA_PTK_PTKSTART_Enter</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, wpa_auth.o(i.sm_WPA_PTK_PTKSTART_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = sm_WPA_PTK_PTKSTART_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_ieee8021x
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8e0]"></a>sm_WPA_PTK_Step</STRONG> (Thumb, 616 bytes, Stack size 16 bytes, wpa_auth.o(i.sm_WPA_PTK_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_psk
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_ieee8021x
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_ptk_update
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_psk
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_eapol
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING2_Enter
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITPSK_Enter
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITPMK_Enter
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_DISCONNECT_Enter
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_DISCONNECTED_Enter
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION_Enter
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[a09]"></a>wpa_alg_enum</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_alg_enum))
<BR><BR>[Called By]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
</UL>

<P><STRONG><a name="[8e3]"></a>wpa_auth_get_eapol</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_auth_get_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_auth_get_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8d6]"></a>wpa_auth_get_psk</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_auth_get_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_auth_get_psk
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITPSK_Enter
</UL>

<P><STRONG><a name="[8ca]"></a>wpa_auth_get_seqnum</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_auth_get_seqnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_auth_get_seqnum
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[109]"></a>wpa_auth_pmksa_clear_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_auth_pmksa_clear_cb))
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(i.wpa_auth_pmksa_free_cb)
</UL>
<P><STRONG><a name="[10f]"></a>wpa_auth_pmksa_free_cb</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_auth_pmksa_free_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_auth_pmksa_free_cb &rArr; wpa_auth_for_each_sta
</UL>
<BR>[Calls]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_for_each_sta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(i.wpa_init)
</UL>
<P><STRONG><a name="[37d]"></a>wpa_auth_set_eapol</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_auth_set_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_auth_set_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITPMK_Enter
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION_Enter
</UL>

<P><STRONG><a name="[8db]"></a>wpa_auth_set_key</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, wpa_auth.o(i.wpa_auth_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpa_auth_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
</UL>

<P><STRONG><a name="[8e2]"></a>wpa_auth_sm_ptk_update</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wpa_auth.o(i.wpa_auth_sm_ptk_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wpa_auth_sm_ptk_update &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[8d8]"></a>wpa_derive_ptk</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, wpa_auth.o(i.wpa_derive_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = wpa_derive_ptk &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[9bb]"></a>wpa_free_sta_sm</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wpa_auth.o(i.wpa_free_sta_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_free_sta_sm &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[a07]"></a>wpa_gmk_to_gtk</STRONG> (Thumb, 106 bytes, Stack size 112 bytes, wpa_auth.o(i.wpa_gmk_to_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>

<P><STRONG><a name="[a08]"></a>wpa_group_config_group_keys</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, wpa_auth.o(i.wpa_group_config_group_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wpa_group_config_group_keys &rArr; wpa_auth_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_alg_enum
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeysdone
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_ensure_init
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_rekey
</UL>

<P><STRONG><a name="[8c3]"></a>wpa_group_ensure_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_group_ensure_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = wpa_group_ensure_init &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
</UL>

<P><STRONG><a name="[a0c]"></a>wpa_group_gtk_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_group_gtk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = wpa_group_gtk_init &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>

<P><STRONG><a name="[a0d]"></a>wpa_group_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = wpa_group_init &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_set_key_len
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[a0a]"></a>wpa_group_init_gmk_and_counter</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, wpa_auth.o(i.wpa_group_init_gmk_and_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wpa_group_init_gmk_and_counter &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_ensure_init
</UL>

<P><STRONG><a name="[a0e]"></a>wpa_group_set_key_len</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_group_set_key_len))
<BR><BR>[Called By]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
</UL>

<P><STRONG><a name="[a10]"></a>wpa_group_setkeys</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_group_setkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_for_each_sta
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>

<P><STRONG><a name="[a11]"></a>wpa_group_setkeysdone</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_group_setkeysdone))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wpa_group_setkeysdone &rArr; wpa_group_config_group_keys &rArr; wpa_auth_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>

<P><STRONG><a name="[a0f]"></a>wpa_group_sm_step</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_group_sm_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeysdone
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeys
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_gtk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init_keys
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
</UL>

<P><STRONG><a name="[10e]"></a>wpa_group_update_sta</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_group_update_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = wpa_group_update_sta &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(i.wpa_group_setkeys)
</UL>
<P><STRONG><a name="[a0b]"></a>wpa_gtk_update</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_gtk_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gmk_to_gtk
</UL>
<BR>[Called By]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeys
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_gtk_init
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_ensure_init
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_rekey
</UL>

<P><STRONG><a name="[8df]"></a>wpa_key_mgmt_sha256</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_key_mgmt_sha256))
<BR><BR>[Called By]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_derive_ptk
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
</UL>

<P><STRONG><a name="[8de]"></a>wpa_key_mgmt_wpa_ieee8021x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_key_mgmt_wpa_ieee8021x))
<BR><BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
</UL>

<P><STRONG><a name="[8d3]"></a>wpa_key_mgmt_wpa_psk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_key_mgmt_wpa_psk))
<BR><BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
</UL>

<P><STRONG><a name="[a24]"></a>wpa_receive_error_report</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, wpa_auth.o(i.wpa_receive_error_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wpa_receive_error_report &rArr; wpa_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_request_new_ptk
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[10d]"></a>wpa_rekey_gmk</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_rekey_gmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wpa_rekey_gmk &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_random
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
</UL>
<BR>[Address Reference Count : 3]<UL><LI> wpa_auth.o(i.wpa_deinit)
<LI> wpa_auth.o(i.wpa_init)
<LI> wpa_auth.o(i.wpa_rekey_gmk)
</UL>
<P><STRONG><a name="[10b]"></a>wpa_rekey_gtk</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_rekey_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = wpa_rekey_gtk &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>
<BR>[Address Reference Count : 5]<UL><LI> wpa_auth.o(i.wpa_auth_sta_deinit)
<LI> wpa_auth.o(i.wpa_deinit)
<LI> wpa_auth.o(i.wpa_init)
<LI> wpa_auth.o(i.wpa_receive)
<LI> wpa_auth.o(i.wpa_rekey_gtk)
</UL>
<P><STRONG><a name="[fe]"></a>wpa_rekey_ptk</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_rekey_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = wpa_rekey_ptk &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_request_new_ptk
</UL>
<BR>[Address Reference Count : 3]<UL><LI> wpa_auth.o(i.sm_WPA_PTK_PTKINITDONE_Enter)
<LI> wpa_auth.o(i.wpa_auth_sta_deinit)
<LI> wpa_auth.o(i.wpa_remove_ptk)
</UL>
<P><STRONG><a name="[a23]"></a>wpa_replay_counter_mark_invalid</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_replay_counter_mark_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_replay_counter_mark_invalid &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[a22]"></a>wpa_replay_counter_valid</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_replay_counter_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_replay_counter_valid &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[a25]"></a>wpa_request_new_ptk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_request_new_ptk))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_ptk
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
</UL>

<P><STRONG><a name="[8ce]"></a>wpa_send_eapol</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, wpa_auth.o(i.wpa_send_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[fd]"></a>wpa_send_eapol_timeout</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_send_eapol_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = wpa_send_eapol_timeout &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_logger
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Address Reference Count : 4]<UL><LI> wpa_auth.o(i.sm_WPA_PTK_PTKCALCNEGOTIATING_Enter)
<LI> wpa_auth.o(i.wpa_auth_sta_deinit)
<LI> wpa_auth.o(i.wpa_receive)
<LI> wpa_auth.o(i.wpa_send_eapol)
</UL>
<P><STRONG><a name="[10a]"></a>wpa_sm_call_step</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wpa_auth.o(i.wpa_sm_call_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = wpa_sm_call_step &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wpa_auth.o(i.wpa_auth_sm_notify)
<LI> wpa_auth.o(i.wpa_auth_sta_deinit)
</UL>
<P><STRONG><a name="[9ba]"></a>wpa_sm_step</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, wpa_auth.o(i.wpa_sm_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_free_sta_sm
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_call_step
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol_timeout
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_ptk
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_update_sta
</UL>

<P><STRONG><a name="[8c6]"></a>wpa_sta_disconnect</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wpa_auth.o(i.wpa_sta_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wpa_sta_disconnect &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_DISCONNECT_Enter
</UL>

<P><STRONG><a name="[374]"></a>wpa_use_aes_cmac</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_auth.o(i.wpa_use_aes_cmac))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[8d9]"></a>wpa_verify_key_mic</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, wpa_auth.o(i.wpa_verify_key_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wpa_verify_key_mic &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[638]"></a>hostapd_wpa_auth_conf</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hostapd_wpa_auth_conf &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
</UL>

<P><STRONG><a name="[90]"></a>hostapd_wpa_auth_disconnect</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = hostapd_wpa_auth_disconnect &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[9a]"></a>hostapd_wpa_auth_for_each_auth</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_for_each_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hostapd_wpa_auth_for_each_auth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[99]"></a>hostapd_wpa_auth_for_each_sta</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_for_each_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hostapd_wpa_auth_for_each_sta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[93]"></a>hostapd_wpa_auth_get_eapol</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_get_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hostapd_wpa_auth_get_eapol &rArr; ap_get_sta &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[95]"></a>hostapd_wpa_auth_get_msk</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_get_msk))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hostapd_wpa_auth_get_msk &rArr; ap_get_sta &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_get_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[94]"></a>hostapd_wpa_auth_get_psk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_get_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hostapd_wpa_auth_get_psk &rArr; hostapd_get_psk &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_psk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[97]"></a>hostapd_wpa_auth_get_seqnum</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_get_seqnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hostapd_wpa_auth_get_seqnum &rArr; hostapd_get_seqnum
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_seqnum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[8f]"></a>hostapd_wpa_auth_logger</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_logger))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hostapd_wpa_auth_logger &rArr; hostapd_logger &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[91]"></a>hostapd_wpa_auth_mic_failure_report</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_mic_failure_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = hostapd_wpa_auth_mic_failure_report &rArr; michael_mic_failure &rArr; ieee80211_tkip_countermeasures_start &rArr; wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[98]"></a>hostapd_wpa_auth_send_eapol</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_send_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hostapd_wpa_auth_send_eapol &rArr; ap_get_sta &rArr; os_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_sta_flags_to_drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[9b]"></a>hostapd_wpa_auth_send_ether</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_send_ether))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = hostapd_wpa_auth_send_ether &rArr; l2_packet_send &rArr; ethernet_raw_pkt_sender &rArr; low_level_output_scatter &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2_packet_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[92]"></a>hostapd_wpa_auth_set_eapol</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_set_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = hostapd_wpa_auth_set_eapol &rArr; ieee802_1x_notify_port_valid &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_notify_port_valid
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_notify_port_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[96]"></a>hostapd_wpa_auth_set_key</STRONG> (Thumb, 84 bytes, Stack size 80 bytes, wpa_auth_glue.o(i.hostapd_wpa_auth_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hostapd_wpa_auth_set_key &rArr; hostapd_drv_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_vlan_id_ifname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_setup_wpa)
</UL>
<P><STRONG><a name="[9c]"></a>wpa_auth_iface_iter</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wpa_auth_glue.o(i.wpa_auth_iface_iter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_auth_iface_iter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_glue.o(i.hostapd_wpa_auth_for_each_auth)
</UL>
<P><STRONG><a name="[64e]"></a>hostapd_drv_set_countermeasures</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tkip_countermeasures.o(i.hostapd_drv_set_countermeasures))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hostapd_drv_set_countermeasures
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_stop
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>

<P><STRONG><a name="[64c]"></a>ieee80211_tkip_countermeasures_start</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tkip_countermeasures.o(i.ieee80211_tkip_countermeasures_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ieee80211_tkip_countermeasures_start &rArr; wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_countermeasures_start
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_countermeasures
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_rekey
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>

<P><STRONG><a name="[9d]"></a>ieee80211_tkip_countermeasures_stop</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tkip_countermeasures.o(i.ieee80211_tkip_countermeasures_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ieee80211_tkip_countermeasures_stop &rArr; hostapd_logger &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_logger
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_countermeasures
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tkip_countermeasures.o(i.ieee80211_tkip_countermeasures_deinit)
<LI> tkip_countermeasures.o(i.ieee80211_tkip_countermeasures_start)
</UL>
<P><STRONG><a name="[513]"></a>eapol_auth_conf_clone</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.eapol_auth_conf_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eapol_auth_conf_clone &rArr; os_mem_strdup &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_strdup
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_init
</UL>

<P><STRONG><a name="[514]"></a>eapol_auth_conf_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eapol_auth_sm.o(i.eapol_auth_conf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eapol_auth_conf_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_deinit
</UL>

<P><STRONG><a name="[512]"></a>eapol_auth_initialize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.eapol_auth_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = eapol_auth_initialize &rArr; eapol_sm_step_run &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_alloc
</UL>

<P><STRONG><a name="[51c]"></a>eapol_auth_logger</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, eapol_auth_sm.o(i.eapol_auth_logger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eapol_auth_logger
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_vlogger
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_req
</UL>

<P><STRONG><a name="[519]"></a>eapol_auth_tx_canned_eap</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, eapol_auth_sm.o(i.eapol_auth_tx_canned_eap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = eapol_auth_tx_canned_eap &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset (via Veneer)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_FORCE_UNAUTH_Enter
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_FORCE_AUTH_Enter
</UL>

<P><STRONG><a name="[51b]"></a>eapol_auth_tx_req</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, eapol_auth_sm.o(i.eapol_auth_tx_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eapol_auth_tx_req &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_type
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_id
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_vlogger
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_logger
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_SUCCESS_Enter
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_REQUEST_Enter
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_FAIL_Enter
</UL>

<P><STRONG><a name="[51a]"></a>eapol_auth_vlogger</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, eapol_auth_sm.o(i.eapol_auth_vlogger))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_logger
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_HELD_Enter
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_AUTHENTICATED_Enter
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_req
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_canned_eap
</UL>

<P><STRONG><a name="[81]"></a>eapol_port_timers_tick</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, eapol_auth_sm.o(i.eapol_port_timers_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = eapol_port_timers_tick &rArr; eapol_sm_step_run &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>
<BR>[Address Reference Count : 3]<UL><LI> eapol_auth_sm.o(i.eapol_auth_free)
<LI> eapol_auth_sm.o(i.eapol_auth_initialize)
<LI> eapol_auth_sm.o(i.eapol_port_timers_tick)
</UL>
<P><STRONG><a name="[26]"></a>eapol_sm_get_eap_req_id_text</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.eapol_sm_get_eap_req_id_text))
<BR>[Address Reference Count : 1]<UL><LI> eapol_auth_sm.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>eapol_sm_get_eap_user</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, eapol_auth_sm.o(i.eapol_sm_get_eap_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eapol_sm_get_eap_user
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eapol_auth_sm.o(.data)
</UL>
<P><STRONG><a name="[51f]"></a>eapol_sm_sta_entry_alive</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.eapol_sm_sta_entry_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eapol_sm_sta_entry_alive
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>

<P><STRONG><a name="[82]"></a>eapol_sm_step_cb</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.eapol_sm_step_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = eapol_sm_step_cb &rArr; eapol_sm_step_run &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>
<BR>[Address Reference Count : 2]<UL><LI> eapol_auth_sm.o(i.eapol_auth_free)
<LI> eapol_auth_sm.o(i.eapol_auth_step)
</UL>
<P><STRONG><a name="[517]"></a>eapol_sm_step_run</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, eapol_auth_sm.o(i.eapol_sm_step_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = eapol_sm_step_run &rArr; eapol_auth_step &rArr; eloop_register_timeout &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_step
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_step
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_REAUTH_TIMER_Step
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_KEY_RX_Step
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CTRL_DIR_Step
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_Step
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_KEY_TX_Step
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_sta_entry_alive
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_cb
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_port_timers_tick
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_initialize
</UL>

<P><STRONG><a name="[888]"></a>sm_AUTH_KEY_TX_KEY_TRANSMIT_Enter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.sm_AUTH_KEY_TX_KEY_TRANSMIT_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_AUTH_KEY_TX_KEY_TRANSMIT_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_KEY_TX_Step
</UL>

<P><STRONG><a name="[887]"></a>sm_AUTH_KEY_TX_NO_KEY_TRANSMIT_Enter</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_AUTH_KEY_TX_NO_KEY_TRANSMIT_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_KEY_TX_Step
</UL>

<P><STRONG><a name="[522]"></a>sm_AUTH_KEY_TX_Step</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, eapol_auth_sm.o(i.sm_AUTH_KEY_TX_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_AUTH_KEY_TX_Step &rArr; sm_AUTH_KEY_TX_KEY_TRANSMIT_Enter
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_KEY_TX_NO_KEY_TRANSMIT_Enter
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_KEY_TX_KEY_TRANSMIT_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>

<P><STRONG><a name="[892]"></a>sm_AUTH_PAE_ABORTING_Enter</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_ABORTING_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[889]"></a>sm_AUTH_PAE_AUTHENTICATED_Enter</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_AUTHENTICATED_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sm_AUTH_PAE_AUTHENTICATED_Enter &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_get_name
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[891]"></a>sm_AUTH_PAE_AUTHENTICATING_Enter</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_AUTHENTICATING_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[890]"></a>sm_AUTH_PAE_CONNECTING_Enter</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_CONNECTING_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[88e]"></a>sm_AUTH_PAE_DISCONNECTED_Enter</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_DISCONNECTED_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_AUTH_PAE_DISCONNECTED_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[88a]"></a>sm_AUTH_PAE_FORCE_AUTH_Enter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_FORCE_AUTH_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sm_AUTH_PAE_FORCE_AUTH_Enter &rArr; eapol_auth_tx_canned_eap &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_canned_eap
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[88b]"></a>sm_AUTH_PAE_FORCE_UNAUTH_Enter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_FORCE_UNAUTH_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sm_AUTH_PAE_FORCE_UNAUTH_Enter &rArr; eapol_auth_tx_canned_eap &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_canned_eap
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[88c]"></a>sm_AUTH_PAE_HELD_Enter</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_HELD_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sm_AUTH_PAE_HELD_Enter &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_get_name
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_vlogger
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[88d]"></a>sm_AUTH_PAE_INITIALIZE_Enter</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_INITIALIZE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[88f]"></a>sm_AUTH_PAE_RESTART_Enter</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_RESTART_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_Step
</UL>

<P><STRONG><a name="[51e]"></a>sm_AUTH_PAE_Step</STRONG> (Thumb, 414 bytes, Stack size 8 bytes, eapol_auth_sm.o(i.sm_AUTH_PAE_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sm_AUTH_PAE_Step &rArr; sm_AUTH_PAE_FORCE_UNAUTH_Enter &rArr; eapol_auth_tx_canned_eap &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_RESTART_Enter
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_INITIALIZE_Enter
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_HELD_Enter
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_FORCE_UNAUTH_Enter
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_FORCE_AUTH_Enter
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_DISCONNECTED_Enter
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_CONNECTING_Enter
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_AUTHENTICATING_Enter
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_AUTHENTICATED_Enter
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_AUTH_PAE_ABORTING_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>

<P><STRONG><a name="[893]"></a>sm_BE_AUTH_FAIL_Enter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.sm_BE_AUTH_FAIL_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sm_BE_AUTH_FAIL_Enter &rArr; eapol_auth_tx_req &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_req
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_Step
</UL>

<P><STRONG><a name="[897]"></a>sm_BE_AUTH_IDLE_Enter</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_BE_AUTH_IDLE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_Step
</UL>

<P><STRONG><a name="[89a]"></a>sm_BE_AUTH_IGNORE_Enter</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_BE_AUTH_IGNORE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_Step
</UL>

<P><STRONG><a name="[896]"></a>sm_BE_AUTH_INITIALIZE_Enter</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.sm_BE_AUTH_INITIALIZE_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_BE_AUTH_INITIALIZE_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_Step
</UL>

<P><STRONG><a name="[894]"></a>sm_BE_AUTH_REQUEST_Enter</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.sm_BE_AUTH_REQUEST_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sm_BE_AUTH_REQUEST_Enter &rArr; eapol_auth_tx_req &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_req
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_Step
</UL>

<P><STRONG><a name="[898]"></a>sm_BE_AUTH_RESPONSE_Enter</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_BE_AUTH_RESPONSE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_Step
</UL>

<P><STRONG><a name="[895]"></a>sm_BE_AUTH_SUCCESS_Enter</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.sm_BE_AUTH_SUCCESS_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sm_BE_AUTH_SUCCESS_Enter &rArr; eapol_auth_tx_req &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_req
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_Step
</UL>

<P><STRONG><a name="[520]"></a>sm_BE_AUTH_Step</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, eapol_auth_sm.o(i.sm_BE_AUTH_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sm_BE_AUTH_Step &rArr; sm_BE_AUTH_SUCCESS_Enter &rArr; eapol_auth_tx_req &rArr; eapol_auth_vlogger &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_TIMEOUT_Enter
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_SUCCESS_Enter
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_RESPONSE_Enter
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_REQUEST_Enter
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_INITIALIZE_Enter
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_IGNORE_Enter
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_IDLE_Enter
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_FAIL_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>

<P><STRONG><a name="[899]"></a>sm_BE_AUTH_TIMEOUT_Enter</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_BE_AUTH_TIMEOUT_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_BE_AUTH_Step
</UL>

<P><STRONG><a name="[89c]"></a>sm_CTRL_DIR_FORCE_BOTH_Enter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_CTRL_DIR_FORCE_BOTH_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CTRL_DIR_Step
</UL>

<P><STRONG><a name="[89b]"></a>sm_CTRL_DIR_IN_OR_BOTH_Enter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_CTRL_DIR_IN_OR_BOTH_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CTRL_DIR_Step
</UL>

<P><STRONG><a name="[524]"></a>sm_CTRL_DIR_Step</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, eapol_auth_sm.o(i.sm_CTRL_DIR_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_CTRL_DIR_Step
</UL>
<BR>[Calls]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CTRL_DIR_IN_OR_BOTH_Enter
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CTRL_DIR_FORCE_BOTH_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>

<P><STRONG><a name="[8bf]"></a>sm_KEY_RX_KEY_RECEIVE_Enter</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_KEY_RX_KEY_RECEIVE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_KEY_RX_Step
</UL>

<P><STRONG><a name="[8be]"></a>sm_KEY_RX_NO_KEY_RECEIVE_Enter</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_KEY_RX_NO_KEY_RECEIVE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_KEY_RX_Step
</UL>

<P><STRONG><a name="[523]"></a>sm_KEY_RX_Step</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, eapol_auth_sm.o(i.sm_KEY_RX_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_KEY_RX_Step
</UL>
<BR>[Calls]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_KEY_RX_NO_KEY_RECEIVE_Enter
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_KEY_RX_KEY_RECEIVE_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>

<P><STRONG><a name="[8c0]"></a>sm_REAUTH_TIMER_INITIALIZE_Enter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.sm_REAUTH_TIMER_INITIALIZE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_REAUTH_TIMER_Step
</UL>

<P><STRONG><a name="[8c1]"></a>sm_REAUTH_TIMER_REAUTHENTICATE_Enter</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eapol_auth_sm.o(i.sm_REAUTH_TIMER_REAUTHENTICATE_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_REAUTH_TIMER_REAUTHENTICATE_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_REAUTH_TIMER_Step
</UL>

<P><STRONG><a name="[521]"></a>sm_REAUTH_TIMER_Step</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, eapol_auth_sm.o(i.sm_REAUTH_TIMER_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_REAUTH_TIMER_Step &rArr; sm_REAUTH_TIMER_REAUTHENTICATE_Enter
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_REAUTH_TIMER_REAUTHENTICATE_Enter
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_REAUTH_TIMER_INITIALIZE_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
</UL>

<P><STRONG><a name="[51d]"></a>wpabuf_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eapol_auth_sm.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_run
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_auth_tx_req
</UL>

<P><STRONG><a name="[4e8]"></a>eap_copy_buf</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, eap_server.o(i.eap_copy_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS2_Enter
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_REQUEST_Enter
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_REQUEST2_Enter
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_RETRANSMIT_Enter
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_RETRANSMIT2_Enter
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE2_Enter
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_AAA_RESPONSE_Enter
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_AAA_REQUEST_Enter
</UL>

<P><STRONG><a name="[4ea]"></a>eap_copy_data</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, eap_server.o(i.eap_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = eap_copy_data &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS2_Enter
</UL>

<P><STRONG><a name="[8aa]"></a>eap_sm_Policy_doPickUp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eap_server.o(i.eap_sm_Policy_doPickUp))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_PICK_UP_METHOD_Enter
</UL>

<P><STRONG><a name="[503]"></a>eap_sm_Policy_getDecision</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, eap_server.o(i.eap_sm_Policy_getDecision))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eap_sm_Policy_getDecision &rArr; eap_user_get &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_user_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SELECT_ACTION_Enter
</UL>

<P><STRONG><a name="[8ad]"></a>eap_sm_Policy_getNextMethod</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, eap_server.o(i.eap_sm_Policy_getNextMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eap_sm_Policy_getNextMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_PROPOSE_METHOD_Enter
</UL>

<P><STRONG><a name="[505]"></a>eap_sm_Policy_update</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, eap_server.o(i.eap_sm_Policy_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eap_sm_Policy_update &rArr; eap_sm_process_nak &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_process_nak
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NAK_Enter
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_RESPONSE_Enter
</UL>

<P><STRONG><a name="[507]"></a>eap_sm_buildFailure</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, eap_server.o(i.eap_sm_buildFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = eap_sm_buildFailure &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE_Enter
</UL>

<P><STRONG><a name="[508]"></a>eap_sm_buildSuccess</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, eap_server.o(i.eap_sm_buildSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = eap_sm_buildSuccess &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS_Enter
</UL>

<P><STRONG><a name="[8a2]"></a>eap_sm_calculateTimeout</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, eap_server.o(i.eap_sm_calculateTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eap_sm_calculateTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_IDLE_Enter
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_IDLE2_Enter
</UL>

<P><STRONG><a name="[509]"></a>eap_sm_getId</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, eap_server.o(i.eap_sm_getId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eap_sm_getId
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_AAA_RESPONSE_Enter
</UL>

<P><STRONG><a name="[50c]"></a>eap_sm_nextId</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, eap_server.o(i.eap_sm_nextId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eap_sm_nextId
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_REQUEST_Enter
</UL>

<P><STRONG><a name="[50d]"></a>eap_sm_parseEapResp</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, eap_server.o(i.eap_sm_parseEapResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eap_sm_parseEapResp
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_RECEIVED_Enter
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_RECEIVED2_Enter
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
</UL>

<P><STRONG><a name="[4fd]"></a>eap_user_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eap_server.o(i.eap_user_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eap_user_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_deinit
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_user_get
</UL>

<P><STRONG><a name="[8bb]"></a>sm_EAP_AAA_IDLE_Enter</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, eap_server.o(i.sm_EAP_AAA_IDLE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[89d]"></a>sm_EAP_AAA_REQUEST_Enter</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_AAA_REQUEST_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sm_EAP_AAA_REQUEST_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[89e]"></a>sm_EAP_AAA_RESPONSE_Enter</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_AAA_RESPONSE_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sm_EAP_AAA_RESPONSE_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_getId
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b7]"></a>sm_EAP_DISABLED_Enter</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, eap_server.o(i.sm_EAP_DISABLED_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8bd]"></a>sm_EAP_DISCARD2_Enter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, eap_server.o(i.sm_EAP_DISCARD2_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8ba]"></a>sm_EAP_DISCARD_Enter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, eap_server.o(i.sm_EAP_DISCARD_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[89f]"></a>sm_EAP_FAILURE2_Enter</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_FAILURE2_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sm_EAP_FAILURE2_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8a0]"></a>sm_EAP_FAILURE_Enter</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, eap_server.o(i.sm_EAP_FAILURE_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sm_EAP_FAILURE_Enter &rArr; eap_sm_buildFailure &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildFailure
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8a1]"></a>sm_EAP_IDLE2_Enter</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_IDLE2_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sm_EAP_IDLE2_Enter &rArr; eap_sm_calculateTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_calculateTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8a3]"></a>sm_EAP_IDLE_Enter</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_IDLE_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sm_EAP_IDLE_Enter &rArr; eap_sm_calculateTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_calculateTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8a4]"></a>sm_EAP_INITIALIZE_Enter</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, eap_server.o(i.sm_EAP_INITIALIZE_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sm_EAP_INITIALIZE_Enter &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_clear_identity
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapResp
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8a5]"></a>sm_EAP_INITIALIZE_PASSTHROUGH_Enter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_INITIALIZE_PASSTHROUGH_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sm_EAP_INITIALIZE_PASSTHROUGH_Enter &rArr; wpabuf_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b9]"></a>sm_EAP_INTEGRITY_CHECK_Enter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_INTEGRITY_CHECK_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_EAP_INTEGRITY_CHECK_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8a6]"></a>sm_EAP_METHOD_REQUEST_Enter</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_METHOD_REQUEST_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sm_EAP_METHOD_REQUEST_Enter &rArr; wpabuf_free &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_nextId
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8a7]"></a>sm_EAP_METHOD_RESPONSE_Enter</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_METHOD_RESPONSE_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sm_EAP_METHOD_RESPONSE_Enter &rArr; eap_sm_Policy_update &rArr; eap_sm_process_nak &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_Policy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8a8]"></a>sm_EAP_NAK_Enter</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, eap_server.o(i.sm_EAP_NAK_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sm_EAP_NAK_Enter &rArr; eap_sm_Policy_update &rArr; eap_sm_process_nak &rArr; wpa_hexdump &rArr; _wpa_hexdump &rArr; wpa_debug_print_timestamp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_Policy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8a9]"></a>sm_EAP_PICK_UP_METHOD_Enter</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_PICK_UP_METHOD_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sm_EAP_PICK_UP_METHOD_Enter &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_get_eap_method
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_Policy_doPickUp
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8ac]"></a>sm_EAP_PROPOSE_METHOD_Enter</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, eap_server.o(i.sm_EAP_PROPOSE_METHOD_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sm_EAP_PROPOSE_METHOD_Enter &rArr; wpa_msg &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_get_eap_method
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_Policy_getNextMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8ae]"></a>sm_EAP_RECEIVED2_Enter</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_RECEIVED2_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_EAP_RECEIVED2_Enter &rArr; eap_sm_parseEapResp
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapResp
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8af]"></a>sm_EAP_RECEIVED_Enter</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_RECEIVED_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_EAP_RECEIVED_Enter &rArr; eap_sm_parseEapResp
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapResp
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b0]"></a>sm_EAP_RETRANSMIT2_Enter</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_RETRANSMIT2_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sm_EAP_RETRANSMIT2_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b1]"></a>sm_EAP_RETRANSMIT_Enter</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_RETRANSMIT_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sm_EAP_RETRANSMIT_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b2]"></a>sm_EAP_SELECT_ACTION_Enter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_SELECT_ACTION_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sm_EAP_SELECT_ACTION_Enter &rArr; eap_sm_Policy_getDecision &rArr; eap_user_get &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_Policy_getDecision
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b3]"></a>sm_EAP_SEND_REQUEST2_Enter</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_SEND_REQUEST2_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sm_EAP_SEND_REQUEST2_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b4]"></a>sm_EAP_SEND_REQUEST_Enter</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_SEND_REQUEST_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sm_EAP_SEND_REQUEST_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b5]"></a>sm_EAP_SUCCESS2_Enter</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, eap_server.o(i.sm_EAP_SUCCESS2_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sm_EAP_SUCCESS2_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_data
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_copy_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b6]"></a>sm_EAP_SUCCESS_Enter</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, eap_server.o(i.sm_EAP_SUCCESS_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sm_EAP_SUCCESS_Enter &rArr; eap_sm_buildSuccess &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_msg
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[501]"></a>sm_EAP_Step</STRONG> (Thumb, 1052 bytes, Stack size 8 bytes, eap_server.o(i.sm_EAP_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sm_EAP_Step &rArr; sm_EAP_SUCCESS2_Enter &rArr; eap_copy_buf &rArr; wpabuf_dup &rArr; wpabuf_put_data &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_TIMEOUT_FAILURE_Enter
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_TIMEOUT_FAILURE2_Enter
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS_Enter
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS2_Enter
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_REQUEST_Enter
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_REQUEST2_Enter
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SELECT_ACTION_Enter
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_RETRANSMIT_Enter
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_RETRANSMIT2_Enter
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_RECEIVED_Enter
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_RECEIVED2_Enter
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_PROPOSE_METHOD_Enter
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_PICK_UP_METHOD_Enter
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NAK_Enter
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_RESPONSE_Enter
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_REQUEST_Enter
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INTEGRITY_CHECK_Enter
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_PASSTHROUGH_Enter
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_IDLE_Enter
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_IDLE2_Enter
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE_Enter
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE2_Enter
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_DISCARD_Enter
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_DISCARD2_Enter
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_DISABLED_Enter
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_AAA_RESPONSE_Enter
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_AAA_REQUEST_Enter
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_AAA_IDLE_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_server_sm_step
</UL>

<P><STRONG><a name="[8bc]"></a>sm_EAP_TIMEOUT_FAILURE2_Enter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, eap_server.o(i.sm_EAP_TIMEOUT_FAILURE2_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[8b8]"></a>sm_EAP_TIMEOUT_FAILURE_Enter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, eap_server.o(i.sm_EAP_TIMEOUT_FAILURE_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[50b]"></a>wpabuf_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eap_server.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NAK_Enter
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapResp
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_getId
</UL>

<P><STRONG><a name="[50a]"></a>wpabuf_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eap_server.o(i.wpabuf_len))
<BR><BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NAK_Enter
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapResp
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_getId
</UL>

<P><STRONG><a name="[7c]"></a>eap_identity_buildReq</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, eap_server_identity.o(i.eap_identity_buildReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = eap_identity_buildReq &rArr; eap_msg_alloc &rArr; wpabuf_put_u8 &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eap_server_identity.o(i.eap_server_identity_register)
</UL>
<P><STRONG><a name="[7d]"></a>eap_identity_check</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, eap_server_identity.o(i.eap_identity_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eap_identity_check &rArr; eap_hdr_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_hdr_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eap_server_identity.o(i.eap_server_identity_register)
</UL>
<P><STRONG><a name="[79]"></a>eap_identity_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eap_server_identity.o(i.eap_identity_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eap_identity_init &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_initPickUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eap_server_identity.o(i.eap_server_identity_register)
</UL>
<P><STRONG><a name="[7a]"></a>eap_identity_initPickUp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eap_server_identity.o(i.eap_identity_initPickUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eap_identity_initPickUp &rArr; eap_identity_init &rArr; os_mem_zalloc &rArr; os_mem_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eap_server_identity.o(i.eap_server_identity_register)
</UL>
<P><STRONG><a name="[7f]"></a>eap_identity_isDone</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eap_server_identity.o(i.eap_identity_isDone))
<BR>[Address Reference Count : 1]<UL><LI> eap_server_identity.o(i.eap_server_identity_register)
</UL>
<P><STRONG><a name="[80]"></a>eap_identity_isSuccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eap_server_identity.o(i.eap_identity_isSuccess))
<BR>[Address Reference Count : 1]<UL><LI> eap_server_identity.o(i.eap_server_identity_register)
</UL>
<P><STRONG><a name="[7e]"></a>eap_identity_process</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, eap_server_identity.o(i.eap_identity_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = eap_identity_process &rArr; wpa_hexdump_ascii &rArr; _wpa_hexdump_ascii &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_ascii
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_hdr_validate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_identity_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eap_server_identity.o(i.eap_server_identity_register)
</UL>
<P><STRONG><a name="[7b]"></a>eap_identity_reset</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, eap_server_identity.o(i.eap_identity_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eap_identity_reset &rArr; os_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eap_server_identity.o(i.eap_server_identity_register)
</UL>
<P><STRONG><a name="[136]"></a>wpa_auth_okc_iter</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wpa_auth_ie.o(i.wpa_auth_okc_iter))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = wpa_auth_okc_iter &rArr; pmksa_cache_get_okc &rArr; rsn_pmkid &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; os_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmksa_cache_get_okc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth_ie.o(i.wpa_validate_wpa_ie)
</UL>
<P><STRONG><a name="[a1b]"></a>wpa_parse_generic</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, wpa_auth_ie.o(i.wpa_parse_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_parse_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
</UL>

<P><STRONG><a name="[9b8]"></a>wpa_write_wpa_ie</STRONG> (Thumb, 442 bytes, Stack size 20 bytes, wpa_auth_ie.o(i.wpa_write_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_write_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
</UL>

<P><STRONG><a name="[3f4]"></a>rijndaelDecrypt</STRONG> (Thumb, 1048 bytes, Stack size 64 bytes, aes-internal-dec.o(i.rijndaelDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rijndaelDecrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[3f8]"></a>rijndaelKeySetupDec</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, aes-internal-dec.o(i.rijndaelKeySetupDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rijndaelKeySetupDec &rArr; rijndaelKeySetupEnc
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupEnc
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_init
</UL>

<P><STRONG><a name="[87d]"></a>rotr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aes-internal-dec.o(i.rotr))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupDec
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelDecrypt
</UL>

<P><STRONG><a name="[314]"></a>MD5Transform</STRONG> (Thumb, 1802 bytes, Stack size 20 bytes, md5-internal.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[4ed]"></a>wpabuf_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eap_common.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_type
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_id
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_hdr_validate
</UL>

<P><STRONG><a name="[4ec]"></a>wpabuf_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eap_common.o(i.wpabuf_len))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_type
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_id
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_hdr_validate
</UL>

<P><STRONG><a name="[4f4]"></a>wpabuf_put_u8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, eap_common.o(i.wpabuf_put_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wpabuf_put_u8 &rArr; wpabuf_put &rArr; wpabuf_overflow &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
</UL>

<P><STRONG><a name="[3fa]"></a>rijndaelEncrypt</STRONG> (Thumb, 1118 bytes, Stack size 64 bytes, aes-internal-enc.o(i.rijndaelEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rijndaelEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[87e]"></a>rotr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aes-internal-enc.o(i.rotr))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelEncrypt
</UL>

<P><STRONG><a name="[392]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[36f]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[3c5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3c4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vsnprintf)
<LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[50]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[2e]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
